2017-10-24 17:32:29,046 - session_2017-10-24T17_32_29_0 - DEBUG - Backend()
2017-10-24 17:32:29,046 - session_2017-10-24T17_32_29_0 - DEBUG - Backend.initialize()
2017-10-24 17:32:29,078 - session_2017-10-24T17_32_29_0 - DEBUG - Backend.add_module(DmeModule, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f9b41056f10>>, False])
2017-10-24 17:32:29,078 - session_2017-10-24T17_32_29_0 - DEBUG - Backend.add_module(GenerateModule, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f9b41056f10>>, 'eng'])
2017-10-24 17:32:29,078 - session_2017-10-24T17_32_29_0 - DEBUG - Backend.add_module(DeviceManager, args=[])
2017-10-24 17:32:29,078 - session_2017-10-24T17_32_29_0 - DEBUG - Backend.add_module(CogloadModule, args=[])
2017-10-24 17:32:29,078 - session_2017-10-24T17_32_29_0 - INFO - TurnManager.enter_state(IDLE, __init__) (previous state was None)
2017-10-24 17:32:29,078 - session_2017-10-24T17_32_29_0 - DEBUG - Backend.add_module(GuiBackend, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f9b41056f10>>, True, 'disabled'])
2017-10-24 17:32:29,078 - session_2017-10-24T17_32_29_0 - DEBUG - Backend.add_module(IndependentGuiBackend, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f9b41056f10>>])
2017-10-24 17:32:29,079 - session_2017-10-24T17_32_29_0 - DEBUG - Backend.add_module(InterpretModule, args=[<bound method Backend.get_device_manager of <tdm.backend.Backend object at 0x7f9b41056f10>>, <bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f9b41056f10>>, 'eng', False, True])
2017-10-24 17:32:29,079 - session_2017-10-24T17_32_29_0 - DEBUG - Backend initialized
2017-10-24 17:32:29,079 - session_2017-10-24T17_32_29_0 - DEBUG - Backend started in directory '/home/gusmatssar/recipedialogue/tdm'
2017-10-24 17:32:29,079 - session_2017-10-24T17_32_29_0 - DEBUG - Backend uses TDM version '5.0.0'
2017-10-24 17:32:29,079 - session_2017-10-24T17_32_29_0 - DEBUG - Backend uses backend config {u'active_ddd': u'recipehelp', u'ddds': [u'recipehelp'], u'asr': u'none', u'use_recognition_profile': False, u'use_word_list_correction': False, u'supported_languages': [u'eng'], u'repeat_questions': False}
2017-10-24 17:32:29,079 - session_2017-10-24T17_32_29_0 - DEBUG - Backend uses language 'eng'
2017-10-24 17:32:29,079 - session_2017-10-24T17_32_29_0 - DEBUG - running module InterpretModule
2017-10-24 17:32:29,079 - session_2017-10-24T17_32_29_0 - DEBUG - running module DmeModule
2017-10-24 17:32:29,081 - session_2017-10-24T17_32_29_0 - DEBUG - running module DeviceManager
2017-10-24 17:32:29,081 - session_2017-10-24T17_32_29_0 - DEBUG - running module GenerateModule
2017-10-24 17:32:29,081 - session_2017-10-24T17_32_29_0 - DEBUG - running module IndependentGuiBackend
2017-10-24 17:32:29,081 - session_2017-10-24T17_32_29_0 - DEBUG - running module GuiBackend
2017-10-24 17:32:29,081 - session_2017-10-24T17_32_29_0 - DEBUG - running module CogloadModule
2017-10-24 17:32:29,082 - session_2017-10-24T17_32_29_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 17:32:29,082 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 17:32:29,082 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(REGISTER_BACKEND, None, sender=Backend, reason=None))
2017-10-24 17:32:29,083 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(REGISTER_BACKEND, None, sender=Backend, reason=None)
2017-10-24 17:32:29,083 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "Backend", "_reason": null, "event_type": "REGISTER_BACKEND"}
2017-10-24 17:32:29,084 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:29,085 - session_2017-10-24T17_32_29_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 17:32:29,116 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend received event {"content": null, "_sender": "Frontend", "_reason": null, "event_type": "FRONTEND_READY"}
2017-10-24 17:32:29,116 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 17:32:29,116 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(FRONTEND_READY, None, sender=Frontend, reason=None))
2017-10-24 17:32:29,117 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(FRONTEND_READY, None, sender=Frontend, reason=None)
2017-10-24 17:32:29,117 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(BACKEND_READY, None, sender=Backend, reason=None))
2017-10-24 17:32:29,118 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(BACKEND_READY, None, sender=Backend, reason=None)
2017-10-24 17:32:29,118 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "Backend", "_reason": null, "event_type": "BACKEND_READY"}
2017-10-24 17:32:29,119 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:29,119 - session_2017-10-24T17_32_29_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 17:32:29,125 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend received event {"content": null, "_sender": "Frontend", "_reason": null, "event_type": "START"}
2017-10-24 17:32:29,125 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 17:32:29,125 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(START, None, sender=Frontend, reason=None))
2017-10-24 17:32:29,125 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(START, None, sender=Frontend, reason=None)
2017-10-24 17:32:29,125 - session_2017-10-24T17_32_29_0 - DEBUG - InterpretModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 17:32:29,126 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 17:32:29,126 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-24 17:32:29,126 - session_2017-10-24T17_32_29_0 - INFO - running ISU module: update (Event(START, None, sender=Frontend, reason=None))
2017-10-24 17:32:29,127 - session_2017-10-24T17_32_29_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f9b40820090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9b40143790>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508859149.13
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(START, None, sender=Frontend, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: None
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([do(top)])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: None
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:32:29,127 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:filterReadings
2017-10-24 17:32:29,128 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 17:32:29,128 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 17:32:29,130 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:32:29,130 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 17:32:29,131 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 17:32:29,132 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:32:29,133 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 17:32:29,133 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 17:32:29,133 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 17:32:29,133 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 17:32:29,133 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 17:32:29,133 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 17:32:29,133 - session_2017-10-24T17_32_29_0 - INFO - BEGIN integrate_moves
2017-10-24 17:32:29,133 - session_2017-10-24T17_32_29_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 17:32:29,133 - session_2017-10-24T17_32_29_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 17:32:29,133 - session_2017-10-24T17_32_29_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 17:32:29,133 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrate
2017-10-24 17:32:29,134 - session_2017-10-24T17_32_29_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 17:32:29,134 - session_2017-10-24T17_32_29_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 17:32:29,134 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:32:29,134 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_action
2017-10-24 17:32:29,134 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:32:29,134 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:accommodate
2017-10-24 17:32:29,135 - session_2017-10-24T17_32_29_0 - INFO - breaking out of accommodate
2017-10-24 17:32:29,135 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:32:29,135 - session_2017-10-24T17_32_29_0 - INFO - END integrate_moves
2017-10-24 17:32:29,135 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:32:29,135 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:29,138 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: findActionPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.plan: Stack([do(top)])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 17:32:29,138 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:32:29,140 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 17:32:29,140 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:29,140 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:32:29,141 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:29,141 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 17:32:29,141 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:32:29,141 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:32:29,141 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:29,141 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:32:29,141 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 17:32:29,141 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 17:32:29,141 - session_2017-10-24T17_32_29_0 - INFO - running ISU module: select
2017-10-24 17:32:29,142 - session_2017-10-24T17_32_29_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f9b40820090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9b40143790>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508859149.13
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(START, None, sender=Frontend, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: None
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: None
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:32:29,142 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 17:32:29,146 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.tmp.sys.goals: stackset([])
+ tis.private.tmp.sys.goals: stackset([perform(top)])
?                                      ++++++++++++
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-24 17:32:29,146 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_action
2017-10-24 17:32:29,149 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.goal(X))])
?                                                                  +++++++++++++++++++++
-- END TIS changes --
2017-10-24 17:32:29,149 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_icm
2017-10-24 17:32:29,151 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
?                                       +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.goal(X))])
?                                   ---------------------------------
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 17:32:29,151 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_move
2017-10-24 17:32:29,154 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
?                                                              +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 17:32:29,154 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_icm
2017-10-24 17:32:29,154 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_move
2017-10-24 17:32:29,154 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 17:32:29,157 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:32:29,157 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 17:32:29,157 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:set_timeout
2017-10-24 17:32:29,159 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: None
?                       ^^^^
+ tis.timeout.duration: 5.0
?                       ^^^
-- END TIS changes --
2017-10-24 17:32:29,159 - session_2017-10-24T17_32_29_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 17:32:29,159 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None))
2017-10-24 17:32:29,160 - session_2017-10-24T17_32_29_0 - DEBUG - DeviceManager handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 17:32:29,160 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 17:32:29,160 - session_2017-10-24T17_32_29_0 - DEBUG - IndependentGuiBackend handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 17:32:29,160 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 17:32:29,160 - session_2017-10-24T17_32_29_0 - DEBUG - CogloadModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 17:32:29,160 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None))
2017-10-24 17:32:29,160 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-24 17:32:29,160 - session_2017-10-24T17_32_29_0 - DEBUG - IndependentGuiBackend handles Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-24 17:32:29,161 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend handles Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-24 17:32:29,161 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": {"ddd_name": "recipehelp", "language_code": "eng"}, "_sender": "DmeModule", "_reason": null, "event_type": "SET_DDD"}
2017-10-24 17:32:29,161 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:29,161 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 17:32:29,162 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 17:32:29,162 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 17:32:29,163 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:29,163 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None)))
2017-10-24 17:32:29,164 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None))
2017-10-24 17:32:29,164 - session_2017-10-24T17_32_29_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 17:32:29,164 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:29,165 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:29,165 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:29,165 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-24 17:32:29,166 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 17:32:29,166 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 17:32:29,166 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 17:32:29,166 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:loadplan)
2017-10-24 17:32:29,166 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Move ICMMove(icm:loadplan) generated as ''
2017-10-24 17:32:29,167 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 17:32:29,167 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Move Move(ask(?X.goal(X)), ddd_name=u'recipehelp') generated as u'What would you like to do?'
2017-10-24 17:32:29,167 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 17:32:29,168 - session_2017-10-24T17_32_29_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:29,169 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:29,169 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 17:32:29,169 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 17:32:29,170 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-24 17:32:29,170 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 17:32:29,170 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 17:32:29,170 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 17:32:29,170 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend generated message []
2017-10-24 17:32:29,170 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 17:32:29,170 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend posted event
2017-10-24 17:32:29,171 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None))
2017-10-24 17:32:29,171 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 17:32:29,171 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "What would you like to do?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 17:32:29,171 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:29,171 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-24 17:32:29,172 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 17:32:29,172 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 17:32:29,172 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:29,172 - session_2017-10-24T17_32_29_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 17:32:29,206 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend received event {"content": ["", "What would you like to do?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 17:32:29,207 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 17:32:29,207 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, What would you like to do?], sender=TextOutputComponent, reason=None))
2017-10-24 17:32:29,207 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, What would you like to do?], sender=TextOutputComponent, reason=None)
2017-10-24 17:32:29,207 - session_2017-10-24T17_32_29_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 17:32:29,208 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 17:32:29,208 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 17:32:29,208 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 17:32:29,208 - session_2017-10-24T17_32_29_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None))
2017-10-24 17:32:29,209 - session_2017-10-24T17_32_29_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f9b40820090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9b40143790>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508859149.21
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:32:29,209 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:filterReadings
2017-10-24 17:32:29,209 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 17:32:29,209 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 17:32:29,212 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: None
?                        ^^^^
+ tis.shared.lu.speaker: SYS
?                        ^^^
-- END TIS changes --
2017-10-24 17:32:29,212 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 17:32:29,212 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 17:32:29,214 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:32:29,215 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 17:32:29,215 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 17:32:29,215 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 17:32:29,215 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 17:32:29,215 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 17:32:29,215 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 17:32:29,215 - session_2017-10-24T17_32_29_0 - INFO - BEGIN integrate_moves
2017-10-24 17:32:29,215 - session_2017-10-24T17_32_29_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 17:32:29,215 - session_2017-10-24T17_32_29_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 17:32:29,215 - session_2017-10-24T17_32_29_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 17:32:29,215 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrate
2017-10-24 17:32:29,220 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 17:32:29,220 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 17:32:29,220 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:32:29,220 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 17:32:29,220 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:29,220 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrate
2017-10-24 17:32:29,223 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.goal(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-24 17:32:29,223 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 17:32:29,223 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:32:29,224 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 17:32:29,224 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:29,224 - session_2017-10-24T17_32_29_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 17:32:29,224 - session_2017-10-24T17_32_29_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 17:32:29,224 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:32:29,224 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_action
2017-10-24 17:32:29,224 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:32:29,224 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:accommodate
2017-10-24 17:32:29,224 - session_2017-10-24T17_32_29_0 - INFO - breaking out of accommodate
2017-10-24 17:32:29,224 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:32:29,225 - session_2017-10-24T17_32_29_0 - INFO - END integrate_moves
2017-10-24 17:32:29,225 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:32:29,225 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:29,225 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 17:32:29,225 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:32:29,225 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:32:29,225 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:29,226 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:32:29,226 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 17:32:29,228 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:32:29,228 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 17:32:29,228 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 17:32:29,228 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 17:32:29,228 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 17:32:29,228 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 17:32:29,229 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:29,229 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 17:32:29,229 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 17:32:29,230 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 17:32:29,230 - session_2017-10-24T17_32_29_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 17:32:33,967 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "tell me what to do"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 17:32:33,968 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 17:32:33,968 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None))
2017-10-24 17:32:33,968 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None)
2017-10-24 17:32:33,968 - session_2017-10-24T17_32_29_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None)
2017-10-24 17:32:33,968 - session_2017-10-24T17_32_29_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "tell me what to do"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 17:32:33,968 - session_2017-10-24T17_32_29_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 17:32:33,974 - session_2017-10-24T17_32_29_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 17:32:33,974 - session_2017-10-24T17_32_29_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])} for DDD 'recipehelp'
2017-10-24 17:32:33,974 - session_2017-10-24T17_32_29_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
2017-10-24 17:32:33,974 - session_2017-10-24T17_32_29_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=InterpretModule, reason=None)
2017-10-24 17:32:33,975 - session_2017-10-24T17_32_29_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AskMove": {"_type": "ask", "_ddd_name": "recipehelp", "_content": {"445f2b7f7189027ce75dac332c96dde0.WhQuestion": {"_type": "WHQ", "_content": {"24b0f339529d53d987534676834bafa7.LambdaAbstractedPredicateProposition": {"_ontology_name": "RecipehelpOntology", "predicate": {"59344e6b24703bf8b6d12bbc60ef78f6.Predicate": {"sort": {"29469b87e7e7f813b80409572cadd835.BuiltinSort": {"_dynamic": false, "_name": "string"}}, "name": "say_step", "grammar_category": null, "_ontology_name": "RecipehelpOntology", "_multiple_instances": false, "feature_of_name": null}}}}}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "tell me what to do", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "tell me what to do"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "tell me what to do", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 17:32:33,975 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None)
2017-10-24 17:32:33,975 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=InterpretModule, reason=None))
2017-10-24 17:32:33,975 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=InterpretModule, reason=None)
2017-10-24 17:32:33,975 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 17:32:33,975 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 17:32:33,976 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-24 17:32:33,976 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:33,976 - session_2017-10-24T17_32_29_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-24 17:32:33,977 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
2017-10-24 17:32:33,977 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
2017-10-24 17:32:33,977 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
2017-10-24 17:32:33,977 - session_2017-10-24T17_32_29_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None))
2017-10-24 17:32:33,979 - session_2017-10-24T17_32_29_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f9b40820090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9b40143790>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508859153.98
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.goal(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:32:33,979 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:filterReadings
2017-10-24 17:32:33,981 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
-- END TIS changes --
2017-10-24 17:32:33,981 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:filterReadings
2017-10-24 17:32:33,986 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                               ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                               ^
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
?                                                                                                                              ^
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}
?                                                                                                                              ^
-- END TIS changes --
2017-10-24 17:32:33,986 - session_2017-10-24T17_32_29_0 - INFO - hypotheses reranking had no effect
2017-10-24 17:32:33,986 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 17:32:33,990 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')])
- tis.score: 1.0
?              ^
+ tis.score: 1.2
?              ^
-- END TIS changes --
2017-10-24 17:32:33,990 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 17:32:33,995 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-24 17:32:33,995 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 17:32:33,995 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 17:32:33,997 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:32:33,997 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 17:32:33,997 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 17:32:34,001 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.goals: stackset([])
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
- tis.private.tmp.usr.plan: Stack([])
+ tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
- tis.private.tmp.usr.qud: stackset([])
+ tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                    ++++++++++
-- END TIS changes --
2017-10-24 17:32:34,001 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 17:32:34,001 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 17:32:34,001 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 17:32:34,002 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 17:32:34,002 - session_2017-10-24T17_32_29_0 - INFO - BEGIN integrate_moves
2017-10-24 17:32:34,002 - session_2017-10-24T17_32_29_0 - INFO - init_shift: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])
2017-10-24 17:32:34,002 - session_2017-10-24T17_32_29_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 17:32:34,002 - session_2017-10-24T17_32_29_0 - INFO - init_shift: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])
2017-10-24 17:32:34,002 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrate
2017-10-24 17:32:34,005 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: integrateUsrAsk
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
- tis.private.nim: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
+ tis.shared.goals: stackset([resolve(?X.say_step(X)), resolve_user(?X.goal(X)), perform(top)])
?                             +++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
- tis.shared.qud: stackset([?X.goal(X)])
+ tis.shared.qud: stackset([?X.say_step(X), ?X.goal(X)])
?                              ++++++++++++++++
-- END TIS changes --
2017-10-24 17:32:34,005 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 17:32:34,005 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:32:34,008 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: downdateISSUES2
-- BEGIN TIS changes --
- tis.shared.goals: stackset([resolve(?X.say_step(X)), resolve_user(?X.goal(X)), perform(top)])
?                                                      --------------------------
+ tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
-- END TIS changes --
2017-10-24 17:32:34,008 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 17:32:34,008 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:34,012 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: findIssuePlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
?                                                                   - ^ ^ ---------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^ ^^
- tis.private.plan: Stack([findout(?X.goal(X))])
+ tis.private.plan: Stack([device_query(?X.say_step(X)), findout(?X.done(X)), forget(done)])
-- END TIS changes --
2017-10-24 17:32:34,013 - session_2017-10-24T17_32_29_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 17:32:34,013 - session_2017-10-24T17_32_29_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 17:32:34,013 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:32:34,013 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_action
2017-10-24 17:32:34,013 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:32:34,014 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:accommodate
2017-10-24 17:32:34,014 - session_2017-10-24T17_32_29_0 - INFO - breaking out of accommodate
2017-10-24 17:32:34,014 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:32:34,014 - session_2017-10-24T17_32_29_0 - INFO - END integrate_moves
2017-10-24 17:32:34,014 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:32:34,018 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: exec_dev_query
-- BEGIN TIS changes --
- tis.private.bel: {}
+ tis.private.bel: {say_step("Step one: preheat the oven to 180 degrees.")}
- tis.private.plan: Stack([device_query(?X.say_step(X)), findout(?X.done(X)), forget(done)])
?                          ------------------------------
+ tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
-- END TIS changes --
2017-10-24 17:32:34,018 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:34,018 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:32:34,019 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:34,019 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 17:32:34,022 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.say_step(X), ?X.goal(X)])
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 17:32:34,022 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:32:34,023 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:32:34,023 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:34,023 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:32:34,023 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 17:32:34,023 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, tell me what to do, sender=DmeModule, reason=None)
2017-10-24 17:32:34,024 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step one: preheat the oven to 180 degrees.}], sender=DmeModule, reason=None)
2017-10-24 17:32:34,024 - session_2017-10-24T17_32_29_0 - INFO - running ISU module: select
2017-10-24 17:32:34,025 - session_2017-10-24T17_32_29_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f9b40820090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9b40143790>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508859153.98
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {say_step("Step one: preheat the oven to 180 degrees.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:32:34,025 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 17:32:34,032 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                ++++++++++++++++++++++++++++++++
- tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.bel: {say_step("Step one: preheat the oven to 180 degrees.")}
- tis.private.tmp.sys.goals: stackset([perform(top)])
+ tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                                      +++++++++++++++++++++++++
- tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                             ^ ^^
+ tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), forget(done)])
?                                             ^ ^^    ++++++++++++++
-- END TIS changes --
2017-10-24 17:32:34,032 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_action
2017-10-24 17:32:34,035 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), findout(?X.done(X))])
?                                                                                                  +++++++++++++++++++++
-- END TIS changes --
2017-10-24 17:32:34,035 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_icm
2017-10-24 17:32:34,038 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), findout(?X.done(X))])
?                                 --------------------------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.done(X))])
-- END TIS changes --
2017-10-24 17:32:34,038 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_move
2017-10-24 17:32:34,038 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_icm
2017-10-24 17:32:34,042 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
?                                                             +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.done(X))])
?                                   ---------------------------------
+ tis.private.agenda: OpenQueue([#, findout(?X.done(X))])
-- END TIS changes --
2017-10-24 17:32:34,042 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_move
2017-10-24 17:32:34,045 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))])
?                                                                                    +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.done(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 17:32:34,045 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_icm
2017-10-24 17:32:34,045 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_move
2017-10-24 17:32:34,045 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 17:32:34,048 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:32:34,048 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 17:32:34,048 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:set_timeout
2017-10-24 17:32:34,050 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:32:34,050 - session_2017-10-24T17_32_29_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')])
2017-10-24 17:32:34,051 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {say_step("Step one: preheat the oven to 180 degrees.")}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None))
2017-10-24 17:32:34,051 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, tell me what to do, sender=DmeModule, reason=None))
2017-10-24 17:32:34,051 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, tell me what to do, sender=DmeModule, reason=None)
2017-10-24 17:32:34,051 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": "tell me what to do", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 17:32:34,052 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:34,052 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step one: preheat the oven to 180 degrees.}], sender=DmeModule, reason=None))
2017-10-24 17:32:34,052 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step one: preheat the oven to 180 degrees.}], sender=DmeModule, reason=None)
2017-10-24 17:32:34,053 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": "Step one: preheat the oven to 180 degrees."}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 17:32:34,054 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:34,054 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {say_step("Step one: preheat the oven to 180 degrees.")}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)))
2017-10-24 17:32:34,055 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {say_step("Step one: preheat the oven to 180 degrees.")}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None))
2017-10-24 17:32:34,055 - session_2017-10-24T17_32_29_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 17:32:34,055 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {say_step("Step one: preheat the oven to 180 degrees.")}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:34,055 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {say_step("Step one: preheat the oven to 180 degrees.")}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:34,057 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), forget(done)]), bel: {say_step("Step one: preheat the oven to 180 degrees.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:34,057 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={say_step("Step one: preheat the oven to 180 degrees.")})
2017-10-24 17:32:34,057 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 17:32:34,057 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={say_step("Step one: preheat the oven to 180 degrees.")})
2017-10-24 17:32:34,057 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 17:32:34,057 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.done(X)), ddd_name=u'recipehelp'), facts={say_step("Step one: preheat the oven to 180 degrees.")})
2017-10-24 17:32:34,057 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.done(X)), ddd_name=u'recipehelp')
2017-10-24 17:32:34,057 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:acc*pos)
2017-10-24 17:32:34,058 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Move ICMMove(icm:acc*pos) generated as ''
2017-10-24 17:32:34,058 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:loadplan)
2017-10-24 17:32:34,058 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Move ICMMove(icm:loadplan) generated as ''
2017-10-24 17:32:34,058 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.done(X)), ddd_name=u'recipehelp')
2017-10-24 17:32:34,059 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Move Move(ask(?X.done(X)), ddd_name=u'recipehelp') generated as u'Are you done?'
2017-10-24 17:32:34,059 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Are you done?], sender=GenerateModule, reason=None)
2017-10-24 17:32:34,061 - session_2017-10-24T17_32_29_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), forget(done)]), bel: {say_step("Step one: preheat the oven to 180 degrees.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:34,064 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), forget(done)]), bel: {say_step("Step one: preheat the oven to 180 degrees.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:34,065 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 17:32:34,065 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')])
2017-10-24 17:32:34,065 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={say_step("Step one: preheat the oven to 180 degrees.")})
2017-10-24 17:32:34,065 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 17:32:34,065 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={say_step("Step one: preheat the oven to 180 degrees.")})
2017-10-24 17:32:34,066 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 17:32:34,066 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.done(X)), ddd_name=u'recipehelp'), facts={say_step("Step one: preheat the oven to 180 degrees.")})
2017-10-24 17:32:34,066 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.done(X)), ddd_name=u'recipehelp')
2017-10-24 17:32:34,067 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend generated message []
2017-10-24 17:32:34,067 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 17:32:34,067 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend posted event
2017-10-24 17:32:34,067 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Are you done?], sender=GenerateModule, reason=None))
2017-10-24 17:32:34,068 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Are you done?], sender=GenerateModule, reason=None)
2017-10-24 17:32:34,068 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "", "Are you done?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 17:32:34,068 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:34,068 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-24 17:32:34,069 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 17:32:34,069 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 17:32:34,070 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:34,070 - session_2017-10-24T17_32_29_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 17:32:34,073 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend received event {"content": ["", "", "Are you done?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 17:32:34,073 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 17:32:34,074 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, , Are you done?], sender=TextOutputComponent, reason=None))
2017-10-24 17:32:34,074 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, , Are you done?], sender=TextOutputComponent, reason=None)
2017-10-24 17:32:34,074 - session_2017-10-24T17_32_29_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 17:32:34,074 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, , Are you done?], sender=TurnManager, reason=None)
2017-10-24 17:32:34,074 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, , Are you done?], sender=TurnManager, reason=None)
2017-10-24 17:32:34,074 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, , Are you done?], sender=TurnManager, reason=None)
2017-10-24 17:32:34,075 - session_2017-10-24T17_32_29_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, , Are you done?], sender=TurnManager, reason=None))
2017-10-24 17:32:34,076 - session_2017-10-24T17_32_29_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f9b40820090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9b40143790>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508859154.07
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, , Are you done?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {say_step("Step one: preheat the oven to 180 degrees.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {say_step("Step one: preheat the oven to 180 degrees.")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:32:34,076 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:filterReadings
2017-10-24 17:32:34,076 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 17:32:34,076 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 17:32:34,083 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
?            ^^
- tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 17:32:34,083 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 17:32:34,083 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 17:32:34,086 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:32:34,086 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 17:32:34,086 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 17:32:34,086 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 17:32:34,086 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 17:32:34,086 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 17:32:34,086 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 17:32:34,086 - session_2017-10-24T17_32_29_0 - INFO - BEGIN integrate_moves
2017-10-24 17:32:34,087 - session_2017-10-24T17_32_29_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 17:32:34,087 - session_2017-10-24T17_32_29_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 17:32:34,087 - session_2017-10-24T17_32_29_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 17:32:34,087 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrate
2017-10-24 17:32:34,091 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 17:32:34,091 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 17:32:34,091 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:32:34,092 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 17:32:34,092 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:34,092 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrate
2017-10-24 17:32:34,095 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
?                                                                       +++++++++++++++++++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 17:32:34,096 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 17:32:34,096 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:32:34,096 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 17:32:34,096 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:34,096 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrate
2017-10-24 17:32:34,099 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.done(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-24 17:32:34,099 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 17:32:34,099 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:32:34,100 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 17:32:34,100 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:34,100 - session_2017-10-24T17_32_29_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 17:32:34,100 - session_2017-10-24T17_32_29_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 17:32:34,100 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:32:34,100 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_action
2017-10-24 17:32:34,100 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:32:34,100 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:accommodate
2017-10-24 17:32:34,100 - session_2017-10-24T17_32_29_0 - INFO - breaking out of accommodate
2017-10-24 17:32:34,101 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:32:34,101 - session_2017-10-24T17_32_29_0 - INFO - END integrate_moves
2017-10-24 17:32:34,101 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:32:34,101 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:34,101 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 17:32:34,101 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:32:34,101 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:32:34,102 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:34,102 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:32:34,102 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 17:32:34,104 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:32:34,104 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step one: preheat the oven to 180 degrees.}], sender=DmeModule, reason=None)
2017-10-24 17:32:34,105 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, , Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 17:32:34,105 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step one: preheat the oven to 180 degrees.}], sender=DmeModule, reason=None))
2017-10-24 17:32:34,105 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step one: preheat the oven to 180 degrees.}], sender=DmeModule, reason=None)
2017-10-24 17:32:34,105 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": "Step one: preheat the oven to 180 degrees."}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 17:32:34,105 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:34,106 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, , Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 17:32:34,106 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, , Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 17:32:34,106 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, , Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 17:32:34,106 - session_2017-10-24T17_32_29_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 17:32:38,161 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": ""}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 17:32:38,161 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 17:32:38,161 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: }], sender=TextInputComponent, reason=None))
2017-10-24 17:32:38,162 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: }], sender=TextInputComponent, reason=None)
2017-10-24 17:32:38,162 - session_2017-10-24T17_32_29_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: }], sender=TextInputComponent, reason=None)
2017-10-24 17:32:38,162 - session_2017-10-24T17_32_29_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": ""}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 17:32:38,162 - session_2017-10-24T17_32_29_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 17:32:38,163 - session_2017-10-24T17_32_29_0 - DEBUG - ExactInterpreter: Found no valid exact interpretations, returning an empty result.
2017-10-24 17:32:38,163 - session_2017-10-24T17_32_29_0 - DEBUG - Result from 'ExactInterpreter': []
2017-10-24 17:32:38,163 - session_2017-10-24T17_32_29_0 - DEBUG - Starting 'RobustInterpreter'
2017-10-24 17:32:38,163 - session_2017-10-24T17_32_29_0 - DEBUG - DddInterpreter.interpret_partially: timeout=1.99881100655
2017-10-24 17:32:38,164 - session_2017-10-24T17_32_29_0 - DEBUG - robust grammatical interpretations: []
2017-10-24 17:32:38,165 - session_2017-10-24T17_32_29_0 - DEBUG - _remove_literals(): Got no valid interpretations of partial utterances
2017-10-24 17:32:38,166 - session_2017-10-24T17_32_29_0 - DEBUG - RobustInterpreter: Partial interpretation failed.
2017-10-24 17:32:38,166 - session_2017-10-24T17_32_29_0 - DEBUG - RobustInterpreter: use_word_list_correction disabled, skipping interpretation with word correction
2017-10-24 17:32:38,166 - session_2017-10-24T17_32_29_0 - DEBUG - RobustInterpreter: Found no robust interpretations, returning an empty result.
2017-10-24 17:32:38,166 - session_2017-10-24T17_32_29_0 - DEBUG - Result from 'RobustInterpreter': []
2017-10-24 17:32:38,166 - session_2017-10-24T17_32_29_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {}, sender=InterpretModule, reason=None)
2017-10-24 17:32:38,166 - session_2017-10-24T17_32_29_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 17:32:38,166 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: }], sender=TextInputComponent, reason=None)
2017-10-24 17:32:38,166 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {}, sender=InterpretModule, reason=None))
2017-10-24 17:32:38,167 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {}, sender=InterpretModule, reason=None)
2017-10-24 17:32:38,167 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 17:32:38,167 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 17:32:38,167 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-24 17:32:38,167 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:38,167 - session_2017-10-24T17_32_29_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-24 17:32:38,168 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {}, sender=TurnManager, reason=None)
2017-10-24 17:32:38,168 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {}, sender=TurnManager, reason=None)
2017-10-24 17:32:38,168 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {}, sender=TurnManager, reason=None)
2017-10-24 17:32:38,168 - session_2017-10-24T17_32_29_0 - INFO - running ISU module: update (Event(INTERPRETATION, {}, sender=TurnManager, reason=None))
2017-10-24 17:32:38,169 - session_2017-10-24T17_32_29_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f9b40820090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9b40143790>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508859158.17
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {say_step("Step one: preheat the oven to 180 degrees.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {say_step("Step one: preheat the oven to 180 degrees.")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.done(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:32:38,170 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:filterReadings
2017-10-24 17:32:38,170 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 17:32:38,172 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-24 17:32:38,172 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 17:32:38,178 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
-- END TIS changes --
2017-10-24 17:32:38,178 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 17:32:38,178 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 17:32:38,181 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:32:38,181 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 17:32:38,181 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 17:32:38,181 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 17:32:38,182 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 17:32:38,182 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 17:32:38,182 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 17:32:38,182 - session_2017-10-24T17_32_29_0 - INFO - BEGIN integrate_moves
2017-10-24 17:32:38,182 - session_2017-10-24T17_32_29_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 17:32:38,182 - session_2017-10-24T17_32_29_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 17:32:38,182 - session_2017-10-24T17_32_29_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 17:32:38,182 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrate
2017-10-24 17:32:38,182 - session_2017-10-24T17_32_29_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 17:32:38,182 - session_2017-10-24T17_32_29_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 17:32:38,182 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:32:38,183 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_action
2017-10-24 17:32:38,183 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:32:38,183 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:accommodate
2017-10-24 17:32:38,183 - session_2017-10-24T17_32_29_0 - INFO - breaking out of accommodate
2017-10-24 17:32:38,183 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:32:38,183 - session_2017-10-24T17_32_29_0 - INFO - END integrate_moves
2017-10-24 17:32:38,183 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:32:38,184 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:38,184 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 17:32:38,186 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.done(X)])
?                           ----------
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 17:32:38,186 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:32:38,186 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:32:38,187 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:38,187 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:32:38,187 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 17:32:38,187 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step one: preheat the oven to 180 degrees.}], sender=DmeModule, reason=None)
2017-10-24 17:32:38,187 - session_2017-10-24T17_32_29_0 - INFO - running ISU module: select
2017-10-24 17:32:38,189 - session_2017-10-24T17_32_29_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f9b40820090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9b40143790>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508859158.17
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {say_step("Step one: preheat the oven to 180 degrees.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {say_step("Step one: preheat the oven to 180 degrees.")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:32:38,189 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 17:32:38,193 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
+ tis.private.tmp.sys.agenda: OpenQueue([#])
- tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
+ tis.private.tmp.sys.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
?                                             ++++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 17:32:38,193 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_action
2017-10-24 17:32:38,195 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: reraiseIssue
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise)), raise(?X.done(X))])
-- END TIS changes --
2017-10-24 17:32:38,195 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_icm
2017-10-24 17:32:38,198 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: selectIcmSemNeg
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg)])
-- END TIS changes --
2017-10-24 17:32:38,198 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_move
2017-10-24 17:32:38,198 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_icm
2017-10-24 17:32:38,201 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg), ICMMove(icm:reraise)])
?                                                                                      ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise)), raise(?X.done(X))])
?                                   --------------------------------
+ tis.private.agenda: OpenQueue([#, raise(?X.done(X))])
-- END TIS changes --
2017-10-24 17:32:38,201 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_move
2017-10-24 17:32:38,204 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg), ICMMove(icm:reraise)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.done(X)))])
?                                                                                                            +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, raise(?X.done(X))])
?                                 -------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 17:32:38,204 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_icm
2017-10-24 17:32:38,205 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_move
2017-10-24 17:32:38,205 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 17:32:38,207 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:32:38,207 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 17:32:38,207 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:set_timeout
2017-10-24 17:32:38,209 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:32:38,210 - session_2017-10-24T17_32_29_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.done(X)), ddd_name=u'recipehelp')])
2017-10-24 17:32:38,210 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {say_step("Step one: preheat the oven to 180 degrees.")}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {}, sender=TurnManager, reason=None))
2017-10-24 17:32:38,210 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step one: preheat the oven to 180 degrees.}], sender=DmeModule, reason=None))
2017-10-24 17:32:38,210 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step one: preheat the oven to 180 degrees.}], sender=DmeModule, reason=None)
2017-10-24 17:32:38,210 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": "Step one: preheat the oven to 180 degrees."}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 17:32:38,211 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:38,211 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {say_step("Step one: preheat the oven to 180 degrees.")}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {}, sender=TurnManager, reason=None)))
2017-10-24 17:32:38,212 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {say_step("Step one: preheat the oven to 180 degrees.")}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {}, sender=TurnManager, reason=None))
2017-10-24 17:32:38,212 - session_2017-10-24T17_32_29_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 17:32:38,212 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {say_step("Step one: preheat the oven to 180 degrees.")}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:38,213 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {say_step("Step one: preheat the oven to 180 degrees.")}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:38,214 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), forget(done)]), bel: {say_step("Step one: preheat the oven to 180 degrees.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:38,215 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:per*pos:""), facts={say_step("Step one: preheat the oven to 180 degrees.")})
2017-10-24 17:32:38,215 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:per*pos:"")
2017-10-24 17:32:38,215 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:sem*neg), facts={say_step("Step one: preheat the oven to 180 degrees.")})
2017-10-24 17:32:38,216 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:sem*neg)
2017-10-24 17:32:38,216 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise), facts={say_step("Step one: preheat the oven to 180 degrees.")})
2017-10-24 17:32:38,216 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise)
2017-10-24 17:32:38,216 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.done(X)), ddd_name=u'recipehelp'), facts={say_step("Step one: preheat the oven to 180 degrees.")})
2017-10-24 17:32:38,216 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.done(X)), ddd_name=u'recipehelp')
2017-10-24 17:32:38,216 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:per*pos:"")
2017-10-24 17:32:38,217 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Move ICMMove(icm:per*pos:"") generated as u'I heard you say.'
2017-10-24 17:32:38,217 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:sem*neg)
2017-10-24 17:32:38,217 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Move ICMMove(icm:sem*neg) generated as u"I don't understand."
2017-10-24 17:32:38,217 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:reraise)
2017-10-24 17:32:38,218 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Move ICMMove(icm:reraise) generated as u'So,'
2017-10-24 17:32:38,218 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.done(X)), ddd_name=u'recipehelp')
2017-10-24 17:32:38,218 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Move Move(ask(?X.done(X)), ddd_name=u'recipehelp') generated as u'Are you done?'
2017-10-24 17:32:38,218 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [I heard you say., I don't understand., So,, Are you done?], sender=GenerateModule, reason=None)
2017-10-24 17:32:38,220 - session_2017-10-24T17_32_29_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), forget(done)]), bel: {say_step("Step one: preheat the oven to 180 degrees.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:38,223 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), forget(done)]), bel: {say_step("Step one: preheat the oven to 180 degrees.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:38,223 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 17:32:38,223 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.done(X)), ddd_name=u'recipehelp')])
2017-10-24 17:32:38,223 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:per*pos:""), facts={say_step("Step one: preheat the oven to 180 degrees.")})
2017-10-24 17:32:38,223 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:per*pos:"")
2017-10-24 17:32:38,223 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:sem*neg), facts={say_step("Step one: preheat the oven to 180 degrees.")})
2017-10-24 17:32:38,223 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:sem*neg)
2017-10-24 17:32:38,224 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise), facts={say_step("Step one: preheat the oven to 180 degrees.")})
2017-10-24 17:32:38,224 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise)
2017-10-24 17:32:38,224 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.done(X)), ddd_name=u'recipehelp'), facts={say_step("Step one: preheat the oven to 180 degrees.")})
2017-10-24 17:32:38,224 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.done(X)), ddd_name=u'recipehelp')
2017-10-24 17:32:38,225 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend generated message []
2017-10-24 17:32:38,225 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 17:32:38,225 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend posted event
2017-10-24 17:32:38,225 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [I heard you say., I don't understand., So,, Are you done?], sender=GenerateModule, reason=None))
2017-10-24 17:32:38,226 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [I heard you say., I don't understand., So,, Are you done?], sender=GenerateModule, reason=None)
2017-10-24 17:32:38,226 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": ["I heard you say.", "I don't understand.", "So,", "Are you done?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 17:32:38,226 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:38,226 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-24 17:32:38,226 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 17:32:38,227 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 17:32:38,227 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:38,228 - session_2017-10-24T17_32_29_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 17:32:38,236 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend received event {"content": ["I heard you say.", "I don't understand.", "So,", "Are you done?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 17:32:38,236 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 17:32:38,236 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [I heard you say., I don't understand., So,, Are you done?], sender=TextOutputComponent, reason=None))
2017-10-24 17:32:38,237 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [I heard you say., I don't understand., So,, Are you done?], sender=TextOutputComponent, reason=None)
2017-10-24 17:32:38,237 - session_2017-10-24T17_32_29_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 17:32:38,237 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [I heard you say., I don't understand., So,, Are you done?], sender=TurnManager, reason=None)
2017-10-24 17:32:38,237 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [I heard you say., I don't understand., So,, Are you done?], sender=TurnManager, reason=None)
2017-10-24 17:32:38,237 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [I heard you say., I don't understand., So,, Are you done?], sender=TurnManager, reason=None)
2017-10-24 17:32:38,238 - session_2017-10-24T17_32_29_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [I heard you say., I don't understand., So,, Are you done?], sender=TurnManager, reason=None))
2017-10-24 17:32:38,239 - session_2017-10-24T17_32_29_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f9b40820090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9b40143790>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508859158.24
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [I heard you say., I don't understand., So,, Are you done?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.done(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {say_step("Step one: preheat the oven to 180 degrees.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {say_step("Step one: preheat the oven to 180 degrees.")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:32:38,239 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:filterReadings
2017-10-24 17:32:38,239 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 17:32:38,239 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 17:32:38,243 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: False
?                   ^^^^
+ tis.passive_mode: True
?                   ^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:per*pos:"", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
- tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
+ tis.shared.pm: {}
- tis.sys_turns: 0
?                ^
+ tis.sys_turns: 1
?                ^
-- END TIS changes --
2017-10-24 17:32:38,243 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 17:32:38,243 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 17:32:38,246 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:32:38,246 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 17:32:38,246 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 17:32:38,246 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 17:32:38,246 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 17:32:38,246 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 17:32:38,246 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 17:32:38,246 - session_2017-10-24T17_32_29_0 - INFO - BEGIN integrate_moves
2017-10-24 17:32:38,246 - session_2017-10-24T17_32_29_0 - INFO - init_shift: OpenQueue([ICMMove(icm:per*pos:"", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 17:32:38,247 - session_2017-10-24T17_32_29_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 17:32:38,247 - session_2017-10-24T17_32_29_0 - INFO - init_shift: OpenQueue([ICMMove(icm:per*pos:"", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 17:32:38,247 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrate
2017-10-24 17:32:38,250 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:per*pos:"", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                                         ^^^ ^^^^^^                                       ----------------------------------------------
+ tis.private.nim: OpenQueue([ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                                         ^^^ ^^^
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"", speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 17:32:38,251 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 17:32:38,251 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:32:38,251 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 17:32:38,251 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:38,251 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrate
2017-10-24 17:32:38,256 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"", speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)}
?                                                                          ++++++++++++++++++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 17:32:38,257 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 17:32:38,257 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:32:38,257 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 17:32:38,257 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:38,257 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrate
2017-10-24 17:32:38,261 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0)}
?                                                                                                                        ++++++++++++++++++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 17:32:38,261 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 17:32:38,261 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:32:38,262 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 17:32:38,262 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:38,262 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrate
2017-10-24 17:32:38,265 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?                                                                                                                                                                      ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.done(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-24 17:32:38,265 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 17:32:38,265 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:32:38,265 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 17:32:38,265 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:38,265 - session_2017-10-24T17_32_29_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 17:32:38,266 - session_2017-10-24T17_32_29_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 17:32:38,266 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:32:38,266 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_action
2017-10-24 17:32:38,266 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:32:38,266 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:accommodate
2017-10-24 17:32:38,266 - session_2017-10-24T17_32_29_0 - INFO - breaking out of accommodate
2017-10-24 17:32:38,266 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:32:38,266 - session_2017-10-24T17_32_29_0 - INFO - END integrate_moves
2017-10-24 17:32:38,266 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:32:38,267 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:38,267 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 17:32:38,267 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:32:38,267 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:32:38,267 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:38,267 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:32:38,268 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 17:32:38,270 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:32:38,270 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step one: preheat the oven to 180 degrees.}], sender=DmeModule, reason=None)
2017-10-24 17:32:38,270 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [I heard you say., I don't understand., So,, Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 17:32:38,270 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step one: preheat the oven to 180 degrees.}], sender=DmeModule, reason=None))
2017-10-24 17:32:38,270 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step one: preheat the oven to 180 degrees.}], sender=DmeModule, reason=None)
2017-10-24 17:32:38,270 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": "Step one: preheat the oven to 180 degrees."}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 17:32:38,271 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:38,271 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [I heard you say., I don't understand., So,, Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 17:32:38,272 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [I heard you say., I don't understand., So,, Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 17:32:38,272 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [I heard you say., I don't understand., So,, Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 17:32:38,272 - session_2017-10-24T17_32_29_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 17:32:40,078 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "yes"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 17:32:40,078 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 17:32:40,078 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: yes}], sender=TextInputComponent, reason=None))
2017-10-24 17:32:40,078 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: yes}], sender=TextInputComponent, reason=None)
2017-10-24 17:32:40,078 - session_2017-10-24T17_32_29_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: yes}], sender=TextInputComponent, reason=None)
2017-10-24 17:32:40,078 - session_2017-10-24T17_32_29_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "yes"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 17:32:40,078 - session_2017-10-24T17_32_29_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 17:32:40,081 - session_2017-10-24T17_32_29_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 17:32:40,081 - session_2017-10-24T17_32_29_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])} for DDD 'recipehelp'
2017-10-24 17:32:40,081 - session_2017-10-24T17_32_29_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}
2017-10-24 17:32:40,081 - session_2017-10-24T17_32_29_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=InterpretModule, reason=None)
2017-10-24 17:32:40,082 - session_2017-10-24T17_32_29_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Yes": {}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "yes", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "yes"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "yes", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.CustomSort": {"_ontology_name": "RecipehelpOntology", "_dynamic": false, "_name": "Boolean"}}, "value": "True"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "yes", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 17:32:40,082 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: yes}], sender=TextInputComponent, reason=None)
2017-10-24 17:32:40,082 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=InterpretModule, reason=None))
2017-10-24 17:32:40,082 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=InterpretModule, reason=None)
2017-10-24 17:32:40,082 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 17:32:40,082 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 17:32:40,082 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-24 17:32:40,083 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:40,083 - session_2017-10-24T17_32_29_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-24 17:32:40,083 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
2017-10-24 17:32:40,084 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
2017-10-24 17:32:40,084 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
2017-10-24 17:32:40,085 - session_2017-10-24T17_32_29_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None))
2017-10-24 17:32:40,086 - session_2017-10-24T17_32_29_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f9b40820090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9b40143790>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508859160.09
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg), ICMMove(icm:reraise), Move(ask(?X.done(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: True
tis.private.agenda: OpenQueue([#])
tis.private.bel: {say_step("Step one: preheat the oven to 180 degrees.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {say_step("Step one: preheat the oven to 180 degrees.")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: yes
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.done(X)])
tis.sys_turns: 1
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:32:40,086 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:filterReadings
2017-10-24 17:32:40,093 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                          ^^^^^                                                                                                              ^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ --------------------------------------------------------------------------
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                          ^^^^                                                                                                              ^^^^^^^^^^^^^^ ^^^
- tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}
?                                                                                                                                                                                         ^^^^^                                                                                                              -------------------------------------------------------------------------------------------------------------------------------------------
+ tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}
?                                                                                                                                                                                         ^^^^
-- END TIS changes --
2017-10-24 17:32:40,093 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:filterReadings
2017-10-24 17:32:40,099 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                                                                                                  ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                                                                                                  ^
- tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}
?                                                                                                                                                                                                                                                                 ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'yes'), #])}
?                                                                                                                                                                                                                                                                 ^
-- END TIS changes --
2017-10-24 17:32:40,105 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: uprankQUDResolving
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                                                                                                  ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                                                                                                  ^^
- tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'yes'), #])}
?                                                                                                                                                                                                                                                                 ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])}
?                                                                                                                                                                                                                                                                 ^^
-- END TIS changes --
2017-10-24 17:32:40,106 - session_2017-10-24T17_32_29_0 - INFO - hypotheses reranked: OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #]) upranked to position 1 from position 1, replacing OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])
2017-10-24 17:32:40,106 - session_2017-10-24T17_32_29_0 - INFO - Could not log rerank
2017-10-24 17:32:40,106 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 17:32:40,110 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')])
- tis.score: 1.0
?              ^
+ tis.score: 1.44
?              ^^
-- END TIS changes --
2017-10-24 17:32:40,110 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 17:32:40,115 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: True
?                   ^^^
+ tis.passive_mode: False
?                   ^^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:per*pos:"", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
- tis.sys_turns: 1
?                ^
+ tis.sys_turns: 0
?                ^
-- END TIS changes --
2017-10-24 17:32:40,115 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 17:32:40,115 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 17:32:40,118 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:32:40,118 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 17:32:40,118 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 17:32:40,125 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.bel: {}
+ tis.private.tmp.usr.bel: {say_step("Step one: preheat the oven to 180 degrees.")}
- tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                                                      ^  ^
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
?                                                      ^ ++++++++++++++++++++ ^^^^^^
- tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
?                                             ^ ^^
+ tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
?                                             ^ ^^    ++++++++++++++
- tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                       ^ ^^
+ tis.private.tmp.usr.qud: stackset([?X.done(X)])
?                                       ^ ^^
-- END TIS changes --
2017-10-24 17:32:40,125 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 17:32:40,125 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 17:32:40,125 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 17:32:40,125 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 17:32:40,125 - session_2017-10-24T17_32_29_0 - INFO - BEGIN integrate_moves
2017-10-24 17:32:40,125 - session_2017-10-24T17_32_29_0 - INFO - init_shift: OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])
2017-10-24 17:32:40,126 - session_2017-10-24T17_32_29_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 17:32:40,126 - session_2017-10-24T17_32_29_0 - INFO - init_shift: OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])
2017-10-24 17:32:40,126 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrate
2017-10-24 17:32:40,129 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: integrateUsrAnswer
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.nim: OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])
+ tis.private.nim: OpenQueue([#])
- tis.recent_commitments: {}
+ tis.recent_commitments: {done(True)}
?                          ++++++++++
- tis.shared.com: {}
+ tis.shared.com: {done(True)}
?                  ++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')}
-- END TIS changes --
2017-10-24 17:32:40,129 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 17:32:40,129 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:32:40,133 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {done(True)}
+ tis.shared.com: {done(True), resolved(?X.done(X))}
- tis.shared.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
?                             --------------------------
+ tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
-- END TIS changes --
2017-10-24 17:32:40,133 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 17:32:40,136 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: removeFindout
-- BEGIN TIS changes --
- tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
?                           ---------------------
+ tis.private.plan: Stack([forget(done)])
-- END TIS changes --
2017-10-24 17:32:40,136 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:40,136 - session_2017-10-24T17_32_29_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 17:32:40,136 - session_2017-10-24T17_32_29_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 17:32:40,136 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:32:40,137 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_action
2017-10-24 17:32:40,137 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:32:40,137 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:accommodate
2017-10-24 17:32:40,137 - session_2017-10-24T17_32_29_0 - INFO - breaking out of accommodate
2017-10-24 17:32:40,137 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:32:40,137 - session_2017-10-24T17_32_29_0 - INFO - END integrate_moves
2017-10-24 17:32:40,137 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:32:40,140 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: exec_forget
-- BEGIN TIS changes --
- tis.private.plan: Stack([forget(done)])
?                          ------------
+ tis.private.plan: Stack([])
- tis.shared.com: {done(True), resolved(?X.done(X))}
+ tis.shared.com: {}
-- END TIS changes --
2017-10-24 17:32:40,140 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:40,140 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:32:40,140 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:40,141 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 17:32:40,144 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.done(X)])
?                           ----------
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 17:32:40,144 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:32:40,144 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:32:40,144 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:40,145 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:32:40,145 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 17:32:40,145 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(COMMITMENTS_UPDATE, done(True), sender=DmeModule, reason=None)
2017-10-24 17:32:40,145 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, yes, sender=DmeModule, reason=None)
2017-10-24 17:32:40,145 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step one: preheat the oven to 180 degrees.}], sender=DmeModule, reason=None)
2017-10-24 17:32:40,145 - session_2017-10-24T17_32_29_0 - INFO - running ISU module: select
2017-10-24 17:32:40,146 - session_2017-10-24T17_32_29_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f9b40820090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9b40143790>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508859160.09
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')])
tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.bel: {say_step("Step one: preheat the oven to 180 degrees.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {say_step("Step one: preheat the oven to 180 degrees.")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {say_step("Step one: preheat the oven to 180 degrees.")}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: yes
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')}
tis.shared.pm: {ICMMove(icm:per*pos:"", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:32:40,146 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 17:32:40,150 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.tmp.sys.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
?                                             --------------------------
+ tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
- tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), forget(done)])
+ tis.private.tmp.sys.plan: Stack([])
-- END TIS changes --
2017-10-24 17:32:40,150 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_action
2017-10-24 17:32:40,153 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: selectRespond
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
?                                                                 +++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 17:32:40,153 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_icm
2017-10-24 17:32:40,156 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
?                                   --------------------------------
+ tis.private.agenda: OpenQueue([#, respond(?X.say_step(X))])
-- END TIS changes --
2017-10-24 17:32:40,156 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_move
2017-10-24 17:32:40,159 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: selectAnswer
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, Move(answer(say_step("Step one: preheat the oven to 180 degrees.")))])
- tis.private.agenda: OpenQueue([#, respond(?X.say_step(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 17:32:40,159 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_icm
2017-10-24 17:32:40,159 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_move
2017-10-24 17:32:40,159 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 17:32:40,162 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:32:40,162 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 17:32:40,162 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:set_timeout
2017-10-24 17:32:40,164 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-24 17:32:40,165 - session_2017-10-24T17_32_29_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp')])
2017-10-24 17:32:40,165 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp')]), bel: {say_step("Step one: preheat the oven to 180 degrees.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("Step one: preheat the oven to 180 degrees.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None))
2017-10-24 17:32:40,165 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(COMMITMENTS_UPDATE, done(True), sender=DmeModule, reason=None))
2017-10-24 17:32:40,165 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(COMMITMENTS_UPDATE, done(True), sender=DmeModule, reason=None)
2017-10-24 17:32:40,165 - session_2017-10-24T17_32_29_0 - DEBUG - DeviceManager handles Event(COMMITMENTS_UPDATE, done(True), sender=DmeModule, reason=None)
2017-10-24 17:32:40,166 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, yes, sender=DmeModule, reason=None))
2017-10-24 17:32:40,166 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, yes, sender=DmeModule, reason=None)
2017-10-24 17:32:40,166 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": "yes", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 17:32:40,166 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:40,167 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step one: preheat the oven to 180 degrees.}], sender=DmeModule, reason=None))
2017-10-24 17:32:40,167 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step one: preheat the oven to 180 degrees.}], sender=DmeModule, reason=None)
2017-10-24 17:32:40,167 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": "Step one: preheat the oven to 180 degrees."}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 17:32:40,168 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:40,168 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp')]), bel: {say_step("Step one: preheat the oven to 180 degrees.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("Step one: preheat the oven to 180 degrees.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)))
2017-10-24 17:32:40,168 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp')]), bel: {say_step("Step one: preheat the oven to 180 degrees.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("Step one: preheat the oven to 180 degrees.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None))
2017-10-24 17:32:40,169 - session_2017-10-24T17_32_29_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 17:32:40,169 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp')]), bel: {say_step("Step one: preheat the oven to 180 degrees.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("Step one: preheat the oven to 180 degrees.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:40,169 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp')]), bel: {say_step("Step one: preheat the oven to 180 degrees.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("Step one: preheat the oven to 180 degrees.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:40,170 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {say_step("Step one: preheat the oven to 180 degrees.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("Step one: preheat the oven to 180 degrees.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:40,170 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp'), facts={say_step("Step one: preheat the oven to 180 degrees.")})
2017-10-24 17:32:40,170 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp')
2017-10-24 17:32:40,171 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Generating utterance part from move Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp')
2017-10-24 17:32:40,171 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Move Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp') generated as u'Ok Step one: preheat the oven to 180 degrees..'
2017-10-24 17:32:40,171 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok Step one: preheat the oven to 180 degrees..], sender=GenerateModule, reason=None)
2017-10-24 17:32:40,172 - session_2017-10-24T17_32_29_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {say_step("Step one: preheat the oven to 180 degrees.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("Step one: preheat the oven to 180 degrees.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:40,174 - session_2017-10-24T17_32_29_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Ok Step one: preheat the oven to 180 degrees..}, sender=IndependentGuiBackend, reason=None)
2017-10-24 17:32:40,175 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {say_step("Step one: preheat the oven to 180 degrees.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("Step one: preheat the oven to 180 degrees.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:40,175 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 17:32:40,175 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp')])
2017-10-24 17:32:40,175 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp'), facts={say_step("Step one: preheat the oven to 180 degrees.")})
2017-10-24 17:32:40,175 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp')
2017-10-24 17:32:40,176 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.Popup instance at 0x7f9b400eeb00>]
2017-10-24 17:32:40,177 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f9b400eeb00>], sender=GuiBackend, reason=None)
2017-10-24 17:32:40,177 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend posted event
2017-10-24 17:32:40,178 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok Step one: preheat the oven to 180 degrees..], sender=GenerateModule, reason=None))
2017-10-24 17:32:40,178 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok Step one: preheat the oven to 180 degrees..], sender=GenerateModule, reason=None)
2017-10-24 17:32:40,178 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Ok Step one: preheat the oven to 180 degrees.."], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 17:32:40,180 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:40,180 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Ok Step one: preheat the oven to 180 degrees..}, sender=IndependentGuiBackend, reason=None))
2017-10-24 17:32:40,180 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Ok Step one: preheat the oven to 180 degrees..}, sender=IndependentGuiBackend, reason=None)
2017-10-24 17:32:40,180 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Ok Step one: preheat the oven to 180 degrees.."}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-24 17:32:40,181 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:40,181 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f9b400eeb00>], sender=GuiBackend, reason=None))
2017-10-24 17:32:40,181 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f9b400eeb00>], sender=GuiBackend, reason=None)
2017-10-24 17:32:40,182 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Ok Step one: preheat the oven to 180 degrees.."}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 17:32:40,182 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:40,183 - session_2017-10-24T17_32_29_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 17:32:40,186 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend received event {"content": ["Ok Step one: preheat the oven to 180 degrees.."], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 17:32:40,186 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 17:32:40,186 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Ok Step one: preheat the oven to 180 degrees..], sender=TextOutputComponent, reason=None))
2017-10-24 17:32:40,186 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Ok Step one: preheat the oven to 180 degrees..], sender=TextOutputComponent, reason=None)
2017-10-24 17:32:40,187 - session_2017-10-24T17_32_29_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 17:32:40,187 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Ok Step one: preheat the oven to 180 degrees..], sender=TurnManager, reason=None)
2017-10-24 17:32:40,187 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Ok Step one: preheat the oven to 180 degrees..], sender=TurnManager, reason=None)
2017-10-24 17:32:40,187 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Ok Step one: preheat the oven to 180 degrees..], sender=TurnManager, reason=None)
2017-10-24 17:32:40,187 - session_2017-10-24T17_32_29_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Ok Step one: preheat the oven to 180 degrees..], sender=TurnManager, reason=None))
2017-10-24 17:32:40,189 - session_2017-10-24T17_32_29_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f9b40820090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9b40143790>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508859160.19
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Ok Step one: preheat the oven to 180 degrees..], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(say_step("Step one: preheat the oven to 180 degrees.")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {say_step("Step one: preheat the oven to 180 degrees.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {say_step("Step one: preheat the oven to 180 degrees.")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {say_step("Step one: preheat the oven to 180 degrees.")}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: yes
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')}
tis.shared.pm: {ICMMove(icm:per*pos:"", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:32:40,190 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:filterReadings
2017-10-24 17:32:40,190 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 17:32:40,190 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 17:32:40,195 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')}
?            ^^
- tis.shared.pm: {ICMMove(icm:per*pos:"", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), ICMMove(icm:reraise, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 17:32:40,195 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 17:32:40,196 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 17:32:40,198 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:32:40,198 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 17:32:40,198 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 17:32:40,198 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 17:32:40,198 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 17:32:40,198 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 17:32:40,198 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 17:32:40,199 - session_2017-10-24T17_32_29_0 - INFO - BEGIN integrate_moves
2017-10-24 17:32:40,199 - session_2017-10-24T17_32_29_0 - INFO - init_shift: OpenQueue([Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 17:32:40,199 - session_2017-10-24T17_32_29_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 17:32:40,199 - session_2017-10-24T17_32_29_0 - INFO - init_shift: OpenQueue([Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 17:32:40,199 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrate
2017-10-24 17:32:40,203 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: integrateSysAnswer
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.com: {}
+ tis.shared.com: {say_step("Step one: preheat the oven to 180 degrees.")}
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 17:32:40,203 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 17:32:40,203 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:32:40,207 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {say_step("Step one: preheat the oven to 180 degrees.")}
+ tis.shared.com: {say_step("Step one: preheat the oven to 180 degrees."), resolved(?X.say_step(X))}
?                                                                        ++++++++++++++++++++++++++
- tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                             -------------------------
+ tis.shared.goals: stackset([perform(top)])
-- END TIS changes --
2017-10-24 17:32:40,207 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 17:32:40,207 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:40,207 - session_2017-10-24T17_32_29_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 17:32:40,207 - session_2017-10-24T17_32_29_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 17:32:40,207 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:32:40,207 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_action
2017-10-24 17:32:40,208 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:32:40,208 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:accommodate
2017-10-24 17:32:40,208 - session_2017-10-24T17_32_29_0 - INFO - breaking out of accommodate
2017-10-24 17:32:40,208 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:32:40,208 - session_2017-10-24T17_32_29_0 - INFO - END integrate_moves
2017-10-24 17:32:40,208 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:32:40,208 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:40,208 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 17:32:40,208 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:32:40,209 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:32:40,209 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:40,209 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:32:40,209 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 17:32:40,212 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-24 17:32:40,212 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step one: preheat the oven to 180 degrees.}], sender=DmeModule, reason=None)
2017-10-24 17:32:40,212 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Ok Step one: preheat the oven to 180 degrees..], latest_moves: OpenQueue([#, Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 17:32:40,212 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step one: preheat the oven to 180 degrees.}], sender=DmeModule, reason=None))
2017-10-24 17:32:40,212 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step one: preheat the oven to 180 degrees.}], sender=DmeModule, reason=None)
2017-10-24 17:32:40,213 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": "Step one: preheat the oven to 180 degrees."}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 17:32:40,213 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:40,213 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Ok Step one: preheat the oven to 180 degrees..], latest_moves: OpenQueue([#, Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None))
2017-10-24 17:32:40,213 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Ok Step one: preheat the oven to 180 degrees..], latest_moves: OpenQueue([#, Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 17:32:40,214 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Ok Step one: preheat the oven to 180 degrees..], latest_moves: OpenQueue([#, Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 17:32:40,215 - session_2017-10-24T17_32_29_0 - INFO - starting TIMEOUT timer: <tdm.maharani.scheduler.DelayedCall instance at 0x7f9b400ee098>:1.0
2017-10-24 17:32:40,215 - session_2017-10-24T17_32_29_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 17:32:41,215 - session_2017-10-24T17_32_29_0 - DEBUG - Timeout fired
2017-10-24 17:32:41,215 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager posts Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 17:32:41,215 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 17:32:41,215 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule handles Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 17:32:41,215 - session_2017-10-24T17_32_29_0 - INFO - running ISU module: update (Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 17:32:41,216 - session_2017-10-24T17_32_29_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f9b40820090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9b40143790>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508859161.22
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(say_step("Step one: preheat the oven to 180 degrees.")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {say_step("Step one: preheat the oven to 180 degrees.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {say_step("Step one: preheat the oven to 180 degrees.")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {say_step("Step one: preheat the oven to 180 degrees.")}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: yes
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {say_step("Step one: preheat the oven to 180 degrees."), resolved(?X.say_step(X))}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:32:41,216 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:filterReadings
2017-10-24 17:32:41,216 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 17:32:41,219 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-24 17:32:41,219 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 17:32:41,223 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')}
-- END TIS changes --
2017-10-24 17:32:41,223 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 17:32:41,223 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 17:32:41,226 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:32:41,226 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 17:32:41,226 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 17:32:41,226 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 17:32:41,226 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 17:32:41,226 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 17:32:41,226 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 17:32:41,226 - session_2017-10-24T17_32_29_0 - INFO - BEGIN integrate_moves
2017-10-24 17:32:41,227 - session_2017-10-24T17_32_29_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 17:32:41,227 - session_2017-10-24T17_32_29_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 17:32:41,227 - session_2017-10-24T17_32_29_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 17:32:41,227 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrate
2017-10-24 17:32:41,227 - session_2017-10-24T17_32_29_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 17:32:41,227 - session_2017-10-24T17_32_29_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 17:32:41,227 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:32:41,227 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_action
2017-10-24 17:32:41,227 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:32:41,227 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:accommodate
2017-10-24 17:32:41,228 - session_2017-10-24T17_32_29_0 - INFO - breaking out of accommodate
2017-10-24 17:32:41,228 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:32:41,228 - session_2017-10-24T17_32_29_0 - INFO - END integrate_moves
2017-10-24 17:32:41,228 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:32:41,231 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: recoverPerformPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 17:32:41,231 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:41,231 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:32:41,234 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.bel: {say_step("Step one: preheat the oven to 180 degrees.")}
+ tis.private.bel: {}
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
- tis.shared.com: {say_step("Step one: preheat the oven to 180 degrees."), resolved(?X.say_step(X))}
+ tis.shared.com: {}
-- END TIS changes --
2017-10-24 17:32:41,234 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:41,234 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:32:41,235 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:41,235 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 17:32:41,235 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:32:41,235 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:32:41,235 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:41,235 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:32:41,235 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 17:32:41,236 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 17:32:41,236 - session_2017-10-24T17_32_29_0 - INFO - running ISU module: select
2017-10-24 17:32:41,237 - session_2017-10-24T17_32_29_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f9b40820090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9b40143790>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508859161.22
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {say_step("Step one: preheat the oven to 180 degrees.")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {say_step("Step one: preheat the oven to 180 degrees.")}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: yes
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:32:41,237 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 17:32:41,241 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
?                                                                 ^^^  ^
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
?                                                                +++ ^^^^ +++ ^^^^^^^
- tis.private.tmp.sys.bel: {say_step("Step one: preheat the oven to 180 degrees.")}
+ tis.private.tmp.sys.bel: {}
- tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                                      -------------------------
+ tis.private.tmp.sys.goals: stackset([perform(top)])
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-24 17:32:41,241 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_action
2017-10-24 17:32:41,244 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
?                                                                              +++++++++++++++++++++
-- END TIS changes --
2017-10-24 17:32:41,244 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_icm
2017-10-24 17:32:41,247 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 17:32:41,247 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_move
2017-10-24 17:32:41,250 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
?                                                                          +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 17:32:41,250 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_icm
2017-10-24 17:32:41,250 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_move
2017-10-24 17:32:41,250 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 17:32:41,252 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:32:41,252 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 17:32:41,252 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:set_timeout
2017-10-24 17:32:41,255 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-24 17:32:41,255 - session_2017-10-24T17_32_29_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 17:32:41,255 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 17:32:46,205 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": ""}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 17:32:46,205 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 17:32:46,205 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: }], sender=TextInputComponent, reason=None))
2017-10-24 17:32:46,205 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: }], sender=TextInputComponent, reason=None)
2017-10-24 17:32:46,205 - session_2017-10-24T17_32_29_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: }], sender=TextInputComponent, reason=None)
2017-10-24 17:32:46,205 - session_2017-10-24T17_32_29_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": ""}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 17:32:46,205 - session_2017-10-24T17_32_29_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 17:32:46,206 - session_2017-10-24T17_32_29_0 - DEBUG - ExactInterpreter: Found no valid exact interpretations, returning an empty result.
2017-10-24 17:32:46,206 - session_2017-10-24T17_32_29_0 - DEBUG - Result from 'ExactInterpreter': []
2017-10-24 17:32:46,206 - session_2017-10-24T17_32_29_0 - DEBUG - Starting 'RobustInterpreter'
2017-10-24 17:32:46,206 - session_2017-10-24T17_32_29_0 - DEBUG - DddInterpreter.interpret_partially: timeout=1.9991300106
2017-10-24 17:32:46,207 - session_2017-10-24T17_32_29_0 - DEBUG - robust grammatical interpretations: []
2017-10-24 17:32:46,209 - session_2017-10-24T17_32_29_0 - DEBUG - _remove_literals(): Got no valid interpretations of partial utterances
2017-10-24 17:32:46,209 - session_2017-10-24T17_32_29_0 - DEBUG - RobustInterpreter: Partial interpretation failed.
2017-10-24 17:32:46,209 - session_2017-10-24T17_32_29_0 - DEBUG - RobustInterpreter: use_word_list_correction disabled, skipping interpretation with word correction
2017-10-24 17:32:46,209 - session_2017-10-24T17_32_29_0 - DEBUG - RobustInterpreter: Found no robust interpretations, returning an empty result.
2017-10-24 17:32:46,209 - session_2017-10-24T17_32_29_0 - DEBUG - Result from 'RobustInterpreter': []
2017-10-24 17:32:46,209 - session_2017-10-24T17_32_29_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {}, sender=InterpretModule, reason=None)
2017-10-24 17:32:46,209 - session_2017-10-24T17_32_29_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 17:32:46,209 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: }], sender=TextInputComponent, reason=None)
2017-10-24 17:32:46,210 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 17:32:46,210 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 17:32:46,210 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 17:32:46,210 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:46,210 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None)))
2017-10-24 17:32:46,211 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 17:32:46,211 - session_2017-10-24T17_32_29_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 17:32:46,211 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:46,212 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:46,213 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:46,213 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-24 17:32:46,213 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-24 17:32:46,213 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 17:32:46,213 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 17:32:46,213 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:reraise:perform(top))
2017-10-24 17:32:46,214 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Move ICMMove(icm:reraise:perform(top)) generated as u'Returning to the start view.'
2017-10-24 17:32:46,214 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 17:32:46,214 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Move Move(ask(?X.goal(X)), ddd_name=u'recipehelp') generated as u'What would you like to do?'
2017-10-24 17:32:46,214 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 17:32:46,215 - session_2017-10-24T17_32_29_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:46,217 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:46,217 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 17:32:46,217 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 17:32:46,217 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-24 17:32:46,217 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-24 17:32:46,218 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 17:32:46,218 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 17:32:46,218 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f9b40103f38>]
2017-10-24 17:32:46,218 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f9b40103f38>], sender=GuiBackend, reason=None)
2017-10-24 17:32:46,218 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend posted event
2017-10-24 17:32:46,218 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {}, sender=InterpretModule, reason=None))
2017-10-24 17:32:46,219 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {}, sender=InterpretModule, reason=None)
2017-10-24 17:32:46,219 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager posts Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-24 17:32:46,219 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-24 17:32:46,219 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_SPEAKING"}
2017-10-24 17:32:46,219 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:46,219 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None))
2017-10-24 17:32:46,220 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 17:32:46,220 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 17:32:46,220 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:46,221 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f9b40103f38>], sender=GuiBackend, reason=None))
2017-10-24 17:32:46,221 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f9b40103f38>], sender=GuiBackend, reason=None)
2017-10-24 17:32:46,221 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 17:32:46,221 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:46,221 - session_2017-10-24T17_32_29_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 17:32:46,236 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend received event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 17:32:46,236 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 17:32:46,237 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None))
2017-10-24 17:32:46,237 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None)
2017-10-24 17:32:46,237 - session_2017-10-24T17_32_29_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 17:32:46,237 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 17:32:46,237 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 17:32:46,237 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 17:32:46,238 - session_2017-10-24T17_32_29_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None))
2017-10-24 17:32:46,239 - session_2017-10-24T17_32_29_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f9b40820090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9b40143790>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508859166.24
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {say_step("Step one: preheat the oven to 180 degrees.")}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:32:46,239 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:filterReadings
2017-10-24 17:32:46,239 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 17:32:46,239 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 17:32:46,242 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: False
?                   ^^^^
+ tis.passive_mode: True
?                   ^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
- tis.shared.pm: {Move(answer(say_step("Step one: preheat the oven to 180 degrees.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
+ tis.shared.pm: {}
-- END TIS changes --
2017-10-24 17:32:46,242 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 17:32:46,242 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 17:32:46,245 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:32:46,246 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 17:32:46,246 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 17:32:46,246 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 17:32:46,246 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 17:32:46,246 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 17:32:46,246 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 17:32:46,246 - session_2017-10-24T17_32_29_0 - INFO - BEGIN integrate_moves
2017-10-24 17:32:46,246 - session_2017-10-24T17_32_29_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 17:32:46,246 - session_2017-10-24T17_32_29_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 17:32:46,246 - session_2017-10-24T17_32_29_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 17:32:46,246 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrate
2017-10-24 17:32:46,250 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 17:32:46,250 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 17:32:46,250 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:32:46,251 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 17:32:46,251 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:46,251 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrate
2017-10-24 17:32:46,254 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.goal(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-24 17:32:46,254 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 17:32:46,254 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:32:46,254 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 17:32:46,254 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:46,255 - session_2017-10-24T17_32_29_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 17:32:46,255 - session_2017-10-24T17_32_29_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 17:32:46,255 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:32:46,255 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_action
2017-10-24 17:32:46,255 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:32:46,255 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:accommodate
2017-10-24 17:32:46,255 - session_2017-10-24T17_32_29_0 - INFO - breaking out of accommodate
2017-10-24 17:32:46,255 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:32:46,255 - session_2017-10-24T17_32_29_0 - INFO - END integrate_moves
2017-10-24 17:32:46,255 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:32:46,256 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:46,256 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 17:32:46,256 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:32:46,256 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:32:46,256 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:46,256 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:32:46,256 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 17:32:46,259 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: True
?                      ^^^
+ tis.timeout.enabled: False
?                      ^^^^
-- END TIS changes --
2017-10-24 17:32:46,259 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 17:32:46,259 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 17:32:46,259 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 17:32:46,259 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 17:32:46,259 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 17:32:46,260 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:46,260 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 17:32:46,260 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 17:32:46,261 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 17:32:46,261 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {}, sender=TurnManager, reason=None)
2017-10-24 17:32:46,261 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {}, sender=TurnManager, reason=None)
2017-10-24 17:32:46,261 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {}, sender=TurnManager, reason=None)
2017-10-24 17:32:46,261 - session_2017-10-24T17_32_29_0 - INFO - running ISU module: update (Event(INTERPRETATION, {}, sender=TurnManager, reason=None))
2017-10-24 17:32:46,262 - session_2017-10-24T17_32_29_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f9b40820090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9b40143790>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508859166.26
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: True
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {say_step("Step one: preheat the oven to 180 degrees.")}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.goal(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:32:46,262 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:filterReadings
2017-10-24 17:32:46,262 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 17:32:46,265 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-24 17:32:46,265 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 17:32:46,269 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-24 17:32:46,270 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 17:32:46,270 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 17:32:46,273 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:32:46,273 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 17:32:46,273 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 17:32:46,274 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 17:32:46,274 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 17:32:46,274 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 17:32:46,274 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 17:32:46,274 - session_2017-10-24T17_32_29_0 - INFO - BEGIN integrate_moves
2017-10-24 17:32:46,274 - session_2017-10-24T17_32_29_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 17:32:46,274 - session_2017-10-24T17_32_29_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 17:32:46,274 - session_2017-10-24T17_32_29_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 17:32:46,274 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrate
2017-10-24 17:32:46,275 - session_2017-10-24T17_32_29_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 17:32:46,275 - session_2017-10-24T17_32_29_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 17:32:46,275 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:32:46,275 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_action
2017-10-24 17:32:46,275 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:32:46,275 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:accommodate
2017-10-24 17:32:46,275 - session_2017-10-24T17_32_29_0 - INFO - breaking out of accommodate
2017-10-24 17:32:46,275 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:32:46,275 - session_2017-10-24T17_32_29_0 - INFO - END integrate_moves
2017-10-24 17:32:46,275 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:32:46,276 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:46,276 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 17:32:46,278 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.goal(X)])
?                           ----------
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 17:32:46,278 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:32:46,279 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:32:46,279 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:46,279 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:32:46,279 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 17:32:46,279 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 17:32:46,279 - session_2017-10-24T17_32_29_0 - INFO - running ISU module: select
2017-10-24 17:32:46,280 - session_2017-10-24T17_32_29_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f9b40820090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9b40143790>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508859166.26
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: True
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {say_step("Step one: preheat the oven to 180 degrees.")}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:32:46,280 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 17:32:46,284 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
+ tis.private.tmp.sys.agenda: OpenQueue([#])
- tis.private.tmp.sys.goals: stackset([perform(top)])
+ tis.private.tmp.sys.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                                      ++++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 17:32:46,284 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_icm
2017-10-24 17:32:46,286 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: selectIcmSemNeg
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg)])
-- END TIS changes --
2017-10-24 17:32:46,287 - session_2017-10-24T17_32_29_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg)])
2017-10-24 17:32:46,287 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg)]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {}, sender=TurnManager, reason=None))
2017-10-24 17:32:46,287 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 17:32:46,287 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 17:32:46,287 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 17:32:46,288 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:46,288 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg)]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {}, sender=TurnManager, reason=None)))
2017-10-24 17:32:46,288 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg)]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {}, sender=TurnManager, reason=None))
2017-10-24 17:32:46,289 - session_2017-10-24T17_32_29_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 17:32:46,289 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg)]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:46,289 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg)]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:46,290 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg)]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:46,290 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:per*pos:""), facts={})
2017-10-24 17:32:46,290 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:per*pos:"")
2017-10-24 17:32:46,290 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:sem*neg), facts={})
2017-10-24 17:32:46,290 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:sem*neg)
2017-10-24 17:32:46,290 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:per*pos:"")
2017-10-24 17:32:46,291 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Move ICMMove(icm:per*pos:"") generated as u'I heard you say.'
2017-10-24 17:32:46,291 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:sem*neg)
2017-10-24 17:32:46,291 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Move ICMMove(icm:sem*neg) generated as u"I don't understand."
2017-10-24 17:32:46,291 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [I heard you say., I don't understand.], sender=GenerateModule, reason=None)
2017-10-24 17:32:46,292 - session_2017-10-24T17_32_29_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg)]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:46,293 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg)]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:46,294 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 17:32:46,294 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg)])
2017-10-24 17:32:46,294 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:per*pos:""), facts={})
2017-10-24 17:32:46,294 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:per*pos:"")
2017-10-24 17:32:46,294 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:sem*neg), facts={})
2017-10-24 17:32:46,294 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:sem*neg)
2017-10-24 17:32:46,295 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend generated message []
2017-10-24 17:32:46,295 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 17:32:46,295 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend posted event
2017-10-24 17:32:46,295 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [I heard you say., I don't understand.], sender=GenerateModule, reason=None))
2017-10-24 17:32:46,295 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [I heard you say., I don't understand.], sender=GenerateModule, reason=None)
2017-10-24 17:32:46,295 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": ["I heard you say.", "I don't understand."], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 17:32:46,296 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:46,296 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-24 17:32:46,296 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 17:32:46,296 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 17:32:46,297 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:46,297 - session_2017-10-24T17_32_29_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 17:32:46,312 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend received event {"content": ["I heard you say.", "I don't understand."], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 17:32:46,312 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 17:32:46,312 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [I heard you say., I don't understand.], sender=TextOutputComponent, reason=None))
2017-10-24 17:32:46,313 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [I heard you say., I don't understand.], sender=TextOutputComponent, reason=None)
2017-10-24 17:32:46,313 - session_2017-10-24T17_32_29_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 17:32:46,313 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [I heard you say., I don't understand.], sender=TurnManager, reason=None)
2017-10-24 17:32:46,313 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [I heard you say., I don't understand.], sender=TurnManager, reason=None)
2017-10-24 17:32:46,313 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [I heard you say., I don't understand.], sender=TurnManager, reason=None)
2017-10-24 17:32:46,313 - session_2017-10-24T17_32_29_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [I heard you say., I don't understand.], sender=TurnManager, reason=None))
2017-10-24 17:32:46,314 - session_2017-10-24T17_32_29_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f9b40820090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9b40143790>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508859166.31
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [I heard you say., I don't understand.], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg)])
tis.next_utterance.plan_item: None
tis.passive_mode: True
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {say_step("Step one: preheat the oven to 180 degrees.")}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:32:46,315 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:filterReadings
2017-10-24 17:32:46,315 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 17:32:46,315 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 17:32:46,318 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:per*pos:"", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
- tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
+ tis.shared.pm: {}
-- END TIS changes --
2017-10-24 17:32:46,318 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 17:32:46,319 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 17:32:46,321 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:32:46,321 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 17:32:46,321 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 17:32:46,321 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 17:32:46,321 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 17:32:46,321 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 17:32:46,321 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 17:32:46,321 - session_2017-10-24T17_32_29_0 - INFO - BEGIN integrate_moves
2017-10-24 17:32:46,322 - session_2017-10-24T17_32_29_0 - INFO - init_shift: OpenQueue([ICMMove(icm:per*pos:"", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), #])
2017-10-24 17:32:46,322 - session_2017-10-24T17_32_29_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 17:32:46,322 - session_2017-10-24T17_32_29_0 - INFO - init_shift: OpenQueue([ICMMove(icm:per*pos:"", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), #])
2017-10-24 17:32:46,322 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrate
2017-10-24 17:32:46,327 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:per*pos:"", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), #])
?                             -------------------------------------------------
+ tis.private.nim: OpenQueue([ICMMove(icm:sem*neg, speaker=SYS, score=1.0), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"", speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 17:32:46,327 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 17:32:46,327 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:32:46,327 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 17:32:46,327 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:46,328 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrate
2017-10-24 17:32:46,330 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:sem*neg, speaker=SYS, score=1.0), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"", speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)}
?                                                                          ++++++++++++++++++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 17:32:46,330 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 17:32:46,330 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:32:46,331 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 17:32:46,331 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:46,331 - session_2017-10-24T17_32_29_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 17:32:46,331 - session_2017-10-24T17_32_29_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 17:32:46,331 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:32:46,331 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_action
2017-10-24 17:32:46,331 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:32:46,331 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:accommodate
2017-10-24 17:32:46,331 - session_2017-10-24T17_32_29_0 - INFO - breaking out of accommodate
2017-10-24 17:32:46,332 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:32:46,332 - session_2017-10-24T17_32_29_0 - INFO - END integrate_moves
2017-10-24 17:32:46,332 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:32:46,332 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:46,332 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 17:32:46,332 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:32:46,332 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:32:46,333 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:46,333 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:32:46,333 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 17:32:46,335 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:32:46,335 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 17:32:46,336 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [I heard you say., I don't understand.], latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)])}, None), sender=DmeModule, reason=None)
2017-10-24 17:32:46,336 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 17:32:46,336 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 17:32:46,336 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 17:32:46,337 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:46,338 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [I heard you say., I don't understand.], latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)])}, None), sender=DmeModule, reason=None))
2017-10-24 17:32:46,339 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [I heard you say., I don't understand.], latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)])}, None), sender=DmeModule, reason=None)
2017-10-24 17:32:46,339 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [I heard you say., I don't understand.], latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)])}, None), sender=DmeModule, reason=None)
2017-10-24 17:32:46,339 - session_2017-10-24T17_32_29_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 17:32:49,622 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "next"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 17:32:49,623 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 17:32:49,623 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: next}], sender=TextInputComponent, reason=None))
2017-10-24 17:32:49,623 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: next}], sender=TextInputComponent, reason=None)
2017-10-24 17:32:49,623 - session_2017-10-24T17_32_29_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: next}], sender=TextInputComponent, reason=None)
2017-10-24 17:32:49,623 - session_2017-10-24T17_32_29_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "next"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 17:32:49,623 - session_2017-10-24T17_32_29_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 17:32:49,624 - session_2017-10-24T17_32_29_0 - DEBUG - ExactInterpreter: Found no valid exact interpretations, returning an empty result.
2017-10-24 17:32:49,624 - session_2017-10-24T17_32_29_0 - DEBUG - Result from 'ExactInterpreter': []
2017-10-24 17:32:49,625 - session_2017-10-24T17_32_29_0 - DEBUG - Starting 'RobustInterpreter'
2017-10-24 17:32:49,625 - session_2017-10-24T17_32_29_0 - DEBUG - DddInterpreter.interpret_partially: timeout=1.99872779846
2017-10-24 17:32:49,626 - session_2017-10-24T17_32_29_0 - DEBUG - robust grammatical interpretations: []
2017-10-24 17:32:49,626 - session_2017-10-24T17_32_29_0 - DEBUG - _remove_literals(): Got no valid interpretations of partial utterances
2017-10-24 17:32:49,626 - session_2017-10-24T17_32_29_0 - DEBUG - RobustInterpreter: Partial interpretation failed.
2017-10-24 17:32:49,627 - session_2017-10-24T17_32_29_0 - DEBUG - RobustInterpreter: use_word_list_correction disabled, skipping interpretation with word correction
2017-10-24 17:32:49,627 - session_2017-10-24T17_32_29_0 - DEBUG - RobustInterpreter: Found no robust interpretations, returning an empty result.
2017-10-24 17:32:49,627 - session_2017-10-24T17_32_29_0 - DEBUG - Result from 'RobustInterpreter': []
2017-10-24 17:32:49,627 - session_2017-10-24T17_32_29_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {}, sender=InterpretModule, reason=None)
2017-10-24 17:32:49,627 - session_2017-10-24T17_32_29_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 17:32:49,627 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: next}], sender=TextInputComponent, reason=None)
2017-10-24 17:32:49,627 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {}, sender=InterpretModule, reason=None))
2017-10-24 17:32:49,627 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {}, sender=InterpretModule, reason=None)
2017-10-24 17:32:49,627 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 17:32:49,628 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 17:32:49,628 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-24 17:32:49,628 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:49,629 - session_2017-10-24T17_32_29_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-24 17:32:49,629 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {}, sender=TurnManager, reason=None)
2017-10-24 17:32:49,629 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {}, sender=TurnManager, reason=None)
2017-10-24 17:32:49,629 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {}, sender=TurnManager, reason=None)
2017-10-24 17:32:49,629 - session_2017-10-24T17_32_29_0 - INFO - running ISU module: update (Event(INTERPRETATION, {}, sender=TurnManager, reason=None))
2017-10-24 17:32:49,630 - session_2017-10-24T17_32_29_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f9b40820090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9b40143790>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508859169.63
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:per*pos:""), ICMMove(icm:sem*neg)])
tis.next_utterance.plan_item: None
tis.passive_mode: True
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {say_step("Step one: preheat the oven to 180 degrees.")}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: next
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:32:49,630 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:filterReadings
2017-10-24 17:32:49,631 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 17:32:49,633 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-24 17:32:49,633 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 17:32:49,637 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:per*pos:"", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-24 17:32:49,637 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 17:32:49,637 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 17:32:49,639 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:32:49,639 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 17:32:49,639 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 17:32:49,639 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 17:32:49,640 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 17:32:49,640 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 17:32:49,640 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 17:32:49,640 - session_2017-10-24T17_32_29_0 - INFO - BEGIN integrate_moves
2017-10-24 17:32:49,640 - session_2017-10-24T17_32_29_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 17:32:49,640 - session_2017-10-24T17_32_29_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 17:32:49,640 - session_2017-10-24T17_32_29_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 17:32:49,640 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrate
2017-10-24 17:32:49,640 - session_2017-10-24T17_32_29_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 17:32:49,640 - session_2017-10-24T17_32_29_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 17:32:49,641 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:32:49,641 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_action
2017-10-24 17:32:49,641 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:32:49,641 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:accommodate
2017-10-24 17:32:49,641 - session_2017-10-24T17_32_29_0 - INFO - breaking out of accommodate
2017-10-24 17:32:49,641 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:32:49,641 - session_2017-10-24T17_32_29_0 - INFO - END integrate_moves
2017-10-24 17:32:49,641 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:32:49,642 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:49,642 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 17:32:49,642 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:32:49,642 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:32:49,642 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:49,642 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:32:49,643 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 17:32:49,643 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 17:32:49,643 - session_2017-10-24T17_32_29_0 - INFO - running ISU module: select
2017-10-24 17:32:49,644 - session_2017-10-24T17_32_29_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f9b40820090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9b40143790>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508859169.63
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: True
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {say_step("Step one: preheat the oven to 180 degrees.")}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: next
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {ICMMove(icm:per*pos:"", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:32:49,644 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 17:32:49,646 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:32:49,647 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_icm
2017-10-24 17:32:49,649 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: selectIcmSemNeg
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:per*pos:"next"), ICMMove(icm:sem*neg)])
-- END TIS changes --
2017-10-24 17:32:49,649 - session_2017-10-24T17_32_29_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:per*pos:"next"), ICMMove(icm:sem*neg)])
2017-10-24 17:32:49,649 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:"next"), ICMMove(icm:sem*neg)]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:"next"), ICMMove(icm:sem*neg)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {}, sender=TurnManager, reason=None))
2017-10-24 17:32:49,649 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 17:32:49,649 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 17:32:49,649 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 17:32:49,650 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:49,650 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:"next"), ICMMove(icm:sem*neg)]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:"next"), ICMMove(icm:sem*neg)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {}, sender=TurnManager, reason=None)))
2017-10-24 17:32:49,651 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:"next"), ICMMove(icm:sem*neg)]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:"next"), ICMMove(icm:sem*neg)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {}, sender=TurnManager, reason=None))
2017-10-24 17:32:49,651 - session_2017-10-24T17_32_29_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 17:32:49,651 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:"next"), ICMMove(icm:sem*neg)]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:"next"), ICMMove(icm:sem*neg)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:49,651 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:"next"), ICMMove(icm:sem*neg)]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:"next"), ICMMove(icm:sem*neg)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:49,652 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:"next"), ICMMove(icm:sem*neg)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:"next"), ICMMove(icm:sem*neg)]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:49,653 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:per*pos:"next"), facts={})
2017-10-24 17:32:49,653 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:per*pos:"next")
2017-10-24 17:32:49,653 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:sem*neg), facts={})
2017-10-24 17:32:49,653 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:sem*neg)
2017-10-24 17:32:49,653 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:per*pos:"next")
2017-10-24 17:32:49,653 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Move ICMMove(icm:per*pos:"next") generated as u'I heard you say next.'
2017-10-24 17:32:49,653 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:sem*neg)
2017-10-24 17:32:49,654 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Move ICMMove(icm:sem*neg) generated as u"I don't understand."
2017-10-24 17:32:49,654 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [I heard you say next., I don't understand.], sender=GenerateModule, reason=None)
2017-10-24 17:32:49,654 - session_2017-10-24T17_32_29_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:"next"), ICMMove(icm:sem*neg)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:"next"), ICMMove(icm:sem*neg)]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:49,656 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:"next"), ICMMove(icm:sem*neg)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:"next"), ICMMove(icm:sem*neg)]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:49,656 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 17:32:49,656 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:per*pos:"next"), ICMMove(icm:sem*neg)])
2017-10-24 17:32:49,656 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:per*pos:"next"), facts={})
2017-10-24 17:32:49,656 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:per*pos:"next")
2017-10-24 17:32:49,656 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:sem*neg), facts={})
2017-10-24 17:32:49,656 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:sem*neg)
2017-10-24 17:32:49,657 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend generated message []
2017-10-24 17:32:49,657 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 17:32:49,657 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend posted event
2017-10-24 17:32:49,657 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [I heard you say next., I don't understand.], sender=GenerateModule, reason=None))
2017-10-24 17:32:49,657 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [I heard you say next., I don't understand.], sender=GenerateModule, reason=None)
2017-10-24 17:32:49,657 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": ["I heard you say next.", "I don't understand."], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 17:32:49,658 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:49,658 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-24 17:32:49,658 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 17:32:49,658 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 17:32:49,659 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:49,659 - session_2017-10-24T17_32_29_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 17:32:49,673 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend received event {"content": ["I heard you say next.", "I don't understand."], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 17:32:49,673 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 17:32:49,673 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [I heard you say next., I don't understand.], sender=TextOutputComponent, reason=None))
2017-10-24 17:32:49,673 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [I heard you say next., I don't understand.], sender=TextOutputComponent, reason=None)
2017-10-24 17:32:49,673 - session_2017-10-24T17_32_29_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 17:32:49,673 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [I heard you say next., I don't understand.], sender=TurnManager, reason=None)
2017-10-24 17:32:49,673 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [I heard you say next., I don't understand.], sender=TurnManager, reason=None)
2017-10-24 17:32:49,673 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [I heard you say next., I don't understand.], sender=TurnManager, reason=None)
2017-10-24 17:32:49,674 - session_2017-10-24T17_32_29_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [I heard you say next., I don't understand.], sender=TurnManager, reason=None))
2017-10-24 17:32:49,675 - session_2017-10-24T17_32_29_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f9b40820090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9b40143790>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508859169.67
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [I heard you say next., I don't understand.], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"next", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:per*pos:"next"), ICMMove(icm:sem*neg)])
tis.next_utterance.plan_item: None
tis.passive_mode: True
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {say_step("Step one: preheat the oven to 180 degrees.")}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: next
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {ICMMove(icm:per*pos:"", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:32:49,675 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:filterReadings
2017-10-24 17:32:49,675 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 17:32:49,675 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 17:32:49,678 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:per*pos:"next", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
- tis.shared.pm: {ICMMove(icm:per*pos:"", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)}
+ tis.shared.pm: {}
-- END TIS changes --
2017-10-24 17:32:49,678 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 17:32:49,678 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 17:32:49,680 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:32:49,680 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 17:32:49,680 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 17:32:49,681 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 17:32:49,681 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 17:32:49,681 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 17:32:49,681 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 17:32:49,681 - session_2017-10-24T17_32_29_0 - INFO - BEGIN integrate_moves
2017-10-24 17:32:49,681 - session_2017-10-24T17_32_29_0 - INFO - init_shift: OpenQueue([ICMMove(icm:per*pos:"next", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), #])
2017-10-24 17:32:49,681 - session_2017-10-24T17_32_29_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 17:32:49,681 - session_2017-10-24T17_32_29_0 - INFO - init_shift: OpenQueue([ICMMove(icm:per*pos:"next", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), #])
2017-10-24 17:32:49,681 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrate
2017-10-24 17:32:49,685 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:per*pos:"next", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), #])
+ tis.private.nim: OpenQueue([ICMMove(icm:sem*neg, speaker=SYS, score=1.0), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"next", speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 17:32:49,685 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 17:32:49,685 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:32:49,685 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 17:32:49,685 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:49,686 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrate
2017-10-24 17:32:49,688 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:sem*neg, speaker=SYS, score=1.0), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"next", speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"next", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)}
?                                                                              ++++++++++++++++++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 17:32:49,688 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 17:32:49,688 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:32:49,689 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 17:32:49,689 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:49,689 - session_2017-10-24T17_32_29_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 17:32:49,689 - session_2017-10-24T17_32_29_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 17:32:49,689 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:32:49,689 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_action
2017-10-24 17:32:49,689 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:32:49,689 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:accommodate
2017-10-24 17:32:49,689 - session_2017-10-24T17_32_29_0 - INFO - breaking out of accommodate
2017-10-24 17:32:49,689 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:32:49,689 - session_2017-10-24T17_32_29_0 - INFO - END integrate_moves
2017-10-24 17:32:49,690 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:32:49,690 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:49,690 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 17:32:49,690 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:32:49,690 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:32:49,690 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:49,690 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:32:49,691 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 17:32:49,693 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:32:49,693 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 17:32:49,693 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [I heard you say next., I don't understand.], latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"next", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)])}, None), sender=DmeModule, reason=None)
2017-10-24 17:32:49,693 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 17:32:49,693 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 17:32:49,694 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 17:32:49,694 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:49,695 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [I heard you say next., I don't understand.], latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"next", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)])}, None), sender=DmeModule, reason=None))
2017-10-24 17:32:49,695 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [I heard you say next., I don't understand.], latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"next", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)])}, None), sender=DmeModule, reason=None)
2017-10-24 17:32:49,695 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [I heard you say next., I don't understand.], latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"next", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)])}, None), sender=DmeModule, reason=None)
2017-10-24 17:32:49,696 - session_2017-10-24T17_32_29_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 17:32:51,473 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "go to next"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 17:32:51,473 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 17:32:51,473 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None))
2017-10-24 17:32:51,473 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None)
2017-10-24 17:32:51,473 - session_2017-10-24T17_32_29_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None)
2017-10-24 17:32:51,473 - session_2017-10-24T17_32_29_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "go to next"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 17:32:51,474 - session_2017-10-24T17_32_29_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 17:32:51,475 - session_2017-10-24T17_32_29_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 17:32:51,475 - session_2017-10-24T17_32_29_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])} for DDD 'recipehelp'
2017-10-24 17:32:51,475 - session_2017-10-24T17_32_29_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
2017-10-24 17:32:51,475 - session_2017-10-24T17_32_29_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=InterpretModule, reason=None)
2017-10-24 17:32:51,476 - session_2017-10-24T17_32_29_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "go to next"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to next", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.RequestMove": {"_type": "request", "_ddd_name": "recipehelp", "_content": {"6e33aa3d9d132b93a4a4a6e9b2d00468.Action": {"_ontology_name": "RecipehelpOntology", "value": "go_to_next"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to next", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 17:32:51,476 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None)
2017-10-24 17:32:51,477 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=InterpretModule, reason=None))
2017-10-24 17:32:51,477 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=InterpretModule, reason=None)
2017-10-24 17:32:51,477 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 17:32:51,477 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 17:32:51,477 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-24 17:32:51,478 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:51,478 - session_2017-10-24T17_32_29_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-24 17:32:51,478 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
2017-10-24 17:32:51,478 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
2017-10-24 17:32:51,479 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
2017-10-24 17:32:51,479 - session_2017-10-24T17_32_29_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None))
2017-10-24 17:32:51,480 - session_2017-10-24T17_32_29_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f9b40820090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9b40143790>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508859171.48
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"next", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)])
tis.latest_moves_amb: {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:per*pos:"next"), ICMMove(icm:sem*neg)])
tis.next_utterance.plan_item: None
tis.passive_mode: True
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {say_step("Step one: preheat the oven to 180 degrees.")}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"next", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:32:51,481 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:filterReadings
2017-10-24 17:32:51,484 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
-- END TIS changes --
2017-10-24 17:32:51,484 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:filterReadings
2017-10-24 17:32:51,485 - session_2017-10-24T17_32_29_0 - INFO - hypotheses reranking had no effect
2017-10-24 17:32:51,485 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 17:32:51,487 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"next", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)])
+ tis.latest_moves: OpenQueue([#, Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next')])
-- END TIS changes --
2017-10-24 17:32:51,487 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 17:32:51,492 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: True
?                   ^^^
+ tis.passive_mode: False
?                   ^^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"next", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:per*pos:"next", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-24 17:32:51,492 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 17:32:51,492 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 17:32:51,495 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:32:51,495 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 17:32:51,495 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 17:32:51,500 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.bel: {say_step("Step one: preheat the oven to 180 degrees.")}
+ tis.private.tmp.usr.bel: {}
- tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
?                                                      ^ ^^^^^^^^^^^^ --------------
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                                                      ^ ^
- tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
?                                             ^ ^^    --------------
+ tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
?                                             ^ ^^
- tis.private.tmp.usr.qud: stackset([?X.done(X)])
?                                    ----------
+ tis.private.tmp.usr.qud: stackset([])
-- END TIS changes --
2017-10-24 17:32:51,500 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 17:32:51,500 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 17:32:51,500 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 17:32:51,500 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 17:32:51,500 - session_2017-10-24T17_32_29_0 - INFO - BEGIN integrate_moves
2017-10-24 17:32:51,501 - session_2017-10-24T17_32_29_0 - INFO - init_shift: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])
2017-10-24 17:32:51,501 - session_2017-10-24T17_32_29_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 17:32:51,501 - session_2017-10-24T17_32_29_0 - INFO - init_shift: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])
2017-10-24 17:32:51,501 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrate
2017-10-24 17:32:51,504 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: integrateUsrRequest
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.nim: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])
+ tis.private.nim: OpenQueue([#])
- tis.private.plan: Stack([findout(?X.goal(X))])
+ tis.private.plan: Stack([do(go_to_next), findout(?X.goal(X))])
?                          ++++++++++++++++
- tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
+ tis.shared.goals: stackset([perform(go_to_next), resolve_user(?X.goal(X)), perform(top)])
?                             +++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next')}
-- END TIS changes --
2017-10-24 17:32:51,504 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 17:32:51,504 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:32:51,507 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: downdateISSUES3
-- BEGIN TIS changes --
- tis.shared.goals: stackset([perform(go_to_next), resolve_user(?X.goal(X)), perform(top)])
?                                                  --------------------------
+ tis.shared.goals: stackset([perform(go_to_next), perform(top)])
-- END TIS changes --
2017-10-24 17:32:51,507 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 17:32:51,507 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:51,510 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: findActionPlan
-- BEGIN TIS changes --
- tis.private.plan: Stack([do(go_to_next), findout(?X.goal(X))])
+ tis.private.plan: Stack([dev_perform(go_to_next, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
-- END TIS changes --
2017-10-24 17:32:51,510 - session_2017-10-24T17_32_29_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 17:32:51,510 - session_2017-10-24T17_32_29_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 17:32:51,510 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:32:51,510 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_action
2017-10-24 17:32:51,510 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:32:51,510 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:accommodate
2017-10-24 17:32:51,510 - session_2017-10-24T17_32_29_0 - INFO - breaking out of accommodate
2017-10-24 17:32:51,510 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:32:51,510 - session_2017-10-24T17_32_29_0 - INFO - END integrate_moves
2017-10-24 17:32:51,511 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:32:51,513 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: exec_dev_perform
-- BEGIN TIS changes --
- tis.device_outputs: Stack([])
+ tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.bel: {}
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
+ tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
- tis.private.plan: Stack([dev_perform(go_to_next, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
+ tis.private.plan: Stack([])
-- END TIS changes --
2017-10-24 17:32:51,513 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:51,513 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:32:51,514 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:51,514 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 17:32:51,514 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:32:51,514 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:32:51,514 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:51,514 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:32:51,514 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 17:32:51,514 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, go to next, sender=DmeModule, reason=None)
2017-10-24 17:32:51,515 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 17:32:51,515 - session_2017-10-24T17_32_29_0 - INFO - running ISU module: select
2017-10-24 17:32:51,516 - session_2017-10-24T17_32_29_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f9b40820090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9b40143790>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508859171.48
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next')])
tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(go_to_next), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next')}
tis.shared.pm: {ICMMove(icm:per*pos:"next", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:32:51,516 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 17:32:51,520 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#])
- tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
+ tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
- tis.private.tmp.sys.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                                      ^^^^^^^^^^   ---  ^^^^^
+ tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
?                                      ^  ++++   ^^^^^^^^
- tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  -------------------
+ tis.private.tmp.sys.plan: Stack([])
-- END TIS changes --
2017-10-24 17:32:51,520 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_icm
2017-10-24 17:32:51,523 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
?                                 --------------------------------
+ tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(go_to_next, [], True, None))])
-- END TIS changes --
2017-10-24 17:32:51,523 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_move
2017-10-24 17:32:51,525 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: selectReport
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))])
- tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(go_to_next, [], True, None))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 17:32:51,525 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_icm
2017-10-24 17:32:51,525 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_move
2017-10-24 17:32:51,526 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 17:32:51,528 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:32:51,528 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 17:32:51,528 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:set_timeout
2017-10-24 17:32:51,531 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-24 17:32:51,532 - session_2017-10-24T17_32_29_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')])
2017-10-24 17:32:51,532 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None))
2017-10-24 17:32:51,532 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, go to next, sender=DmeModule, reason=None))
2017-10-24 17:32:51,532 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, go to next, sender=DmeModule, reason=None)
2017-10-24 17:32:51,532 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": "go to next", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 17:32:51,533 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:51,533 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 17:32:51,533 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 17:32:51,533 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 17:32:51,534 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:51,535 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)))
2017-10-24 17:32:51,535 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None))
2017-10-24 17:32:51,535 - session_2017-10-24T17_32_29_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 17:32:51,536 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:51,536 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:51,537 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:51,538 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-24 17:32:51,539 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 17:32:51,539 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-24 17:32:51,539 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')
2017-10-24 17:32:51,539 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:acc*pos)
2017-10-24 17:32:51,539 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Move ICMMove(icm:acc*pos) generated as ''
2017-10-24 17:32:51,540 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Generating utterance part from move report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')
2017-10-24 17:32:51,540 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Move report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp') generated as u'Next'
2017-10-24 17:32:51,540 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Next], sender=GenerateModule, reason=None)
2017-10-24 17:32:51,542 - session_2017-10-24T17_32_29_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:51,543 - session_2017-10-24T17_32_29_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Next}, sender=IndependentGuiBackend, reason=None)
2017-10-24 17:32:51,544 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:51,544 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 17:32:51,544 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')])
2017-10-24 17:32:51,544 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-24 17:32:51,544 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 17:32:51,544 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-24 17:32:51,545 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')
2017-10-24 17:32:51,545 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f9b400bfea8>, <tdm.tdm_gui_protocol.Popup instance at 0x7f9b400bfb90>]
2017-10-24 17:32:51,545 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f9b400bfea8>, <tdm.tdm_gui_protocol.Popup instance at 0x7f9b400bfb90>], sender=GuiBackend, reason=None)
2017-10-24 17:32:51,545 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend posted event
2017-10-24 17:32:51,546 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Next], sender=GenerateModule, reason=None))
2017-10-24 17:32:51,546 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Next], sender=GenerateModule, reason=None)
2017-10-24 17:32:51,546 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "Next"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 17:32:51,546 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:51,546 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Next}, sender=IndependentGuiBackend, reason=None))
2017-10-24 17:32:51,547 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Next}, sender=IndependentGuiBackend, reason=None)
2017-10-24 17:32:51,547 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Next"}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-24 17:32:51,548 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:51,548 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f9b400bfea8>, <tdm.tdm_gui_protocol.Popup instance at 0x7f9b400bfb90>], sender=GuiBackend, reason=None))
2017-10-24 17:32:51,548 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f9b400bfea8>, <tdm.tdm_gui_protocol.Popup instance at 0x7f9b400bfb90>], sender=GuiBackend, reason=None)
2017-10-24 17:32:51,548 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.DeviceResult": {"action": "go_to_next", "result": true, "arguments": {}, "failure_reason": null}}, {"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Next"}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 17:32:51,549 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:51,549 - session_2017-10-24T17_32_29_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 17:32:51,559 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend received event {"content": ["", "Next"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 17:32:51,559 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 17:32:51,559 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, Next], sender=TextOutputComponent, reason=None))
2017-10-24 17:32:51,560 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, Next], sender=TextOutputComponent, reason=None)
2017-10-24 17:32:51,560 - session_2017-10-24T17_32_29_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 17:32:51,560 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, Next], sender=TurnManager, reason=None)
2017-10-24 17:32:51,561 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, Next], sender=TurnManager, reason=None)
2017-10-24 17:32:51,561 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, Next], sender=TurnManager, reason=None)
2017-10-24 17:32:51,561 - session_2017-10-24T17_32_29_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, Next], sender=TurnManager, reason=None))
2017-10-24 17:32:51,562 - session_2017-10-24T17_32_29_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f9b40820090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9b40143790>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508859171.56
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, Next], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(go_to_next), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next')}
tis.shared.pm: {ICMMove(icm:per*pos:"next", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:32:51,562 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:filterReadings
2017-10-24 17:32:51,562 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 17:32:51,563 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 17:32:51,567 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next')}
?            ^^
- tis.shared.pm: {ICMMove(icm:per*pos:"next", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 17:32:51,567 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 17:32:51,568 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 17:32:51,570 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
- tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
+ tis.device_outputs: Stack([])
-- END TIS changes --
2017-10-24 17:32:51,570 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 17:32:51,570 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 17:32:51,570 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 17:32:51,570 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 17:32:51,571 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 17:32:51,571 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 17:32:51,571 - session_2017-10-24T17_32_29_0 - INFO - BEGIN integrate_moves
2017-10-24 17:32:51,571 - session_2017-10-24T17_32_29_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 17:32:51,571 - session_2017-10-24T17_32_29_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 17:32:51,571 - session_2017-10-24T17_32_29_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 17:32:51,571 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrate
2017-10-24 17:32:51,575 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 17:32:51,575 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 17:32:51,575 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:32:51,575 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 17:32:51,575 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:51,576 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrate
2017-10-24 17:32:51,578 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: integrateReport
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.com: {}
+ tis.shared.com: {device_activity_terminated(go_to_next)}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 17:32:51,578 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 17:32:51,578 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:32:51,582 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: downdatePerformOrHandle
-- BEGIN TIS changes --
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([jumpto(resolve(?X.say_step(X)))])
- tis.shared.goals: stackset([perform(go_to_next), perform(top)])
?                                     ---------------------
+ tis.shared.goals: stackset([perform(top)])
- tis.shared.previous_goal: None
?                           ^
+ tis.shared.previous_goal: perform(go_to_next)
?                           ^^^^ +++++++++  +++
-- END TIS changes --
2017-10-24 17:32:51,582 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 17:32:51,582 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:51,582 - session_2017-10-24T17_32_29_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 17:32:51,582 - session_2017-10-24T17_32_29_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 17:32:51,582 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:32:51,582 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_action
2017-10-24 17:32:51,582 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:32:51,582 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:accommodate
2017-10-24 17:32:51,582 - session_2017-10-24T17_32_29_0 - INFO - breaking out of accommodate
2017-10-24 17:32:51,582 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:32:51,583 - session_2017-10-24T17_32_29_0 - INFO - END integrate_moves
2017-10-24 17:32:51,583 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:32:51,586 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: exec_jumpto
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.plan: Stack([jumpto(resolve(?X.say_step(X)))])
+ tis.private.plan: Stack([device_query(?X.say_step(X)), findout(?X.done(X)), forget(done)])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                             +++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 17:32:51,586 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:51,586 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:32:51,589 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: exec_dev_query
-- BEGIN TIS changes --
- tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
+ tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
- tis.private.plan: Stack([device_query(?X.say_step(X)), findout(?X.done(X)), forget(done)])
?                          ------------------------------
+ tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
-- END TIS changes --
2017-10-24 17:32:51,589 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:51,589 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:32:51,590 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:51,590 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 17:32:51,590 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:32:51,590 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:32:51,591 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:51,591 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:32:51,591 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 17:32:51,594 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-24 17:32:51,594 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.}], sender=DmeModule, reason=None)
2017-10-24 17:32:51,594 - session_2017-10-24T17_32_29_0 - INFO - running ISU module: select
2017-10-24 17:32:51,595 - session_2017-10-24T17_32_29_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f9b40820090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9b40143790>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508859171.56
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, Next], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next')}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:32:51,595 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 17:32:51,600 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
- tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
- tis.private.tmp.sys.com: {}
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
+ tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
- tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
?                                       ------ ^^^^^^^^^^
+ tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                                      ++++++++++++++++++  ^^
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), forget(done)])
-- END TIS changes --
2017-10-24 17:32:51,601 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_action
2017-10-24 17:32:51,604 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.done(X))])
?                                                                  +++++++++++++++++++++
-- END TIS changes --
2017-10-24 17:32:51,604 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_icm
2017-10-24 17:32:51,607 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
?                                       +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.done(X))])
?                                   ---------------------------------
+ tis.private.agenda: OpenQueue([#, findout(?X.done(X))])
-- END TIS changes --
2017-10-24 17:32:51,607 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_move
2017-10-24 17:32:51,610 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))])
?                                                              +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.done(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 17:32:51,610 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_icm
2017-10-24 17:32:51,610 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_move
2017-10-24 17:32:51,610 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 17:32:51,612 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:32:51,612 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 17:32:51,613 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:set_timeout
2017-10-24 17:32:51,615 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-24 17:32:51,616 - session_2017-10-24T17_32_29_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')])
2017-10-24 17:32:51,616 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [, Next], sender=TurnManager, reason=None))
2017-10-24 17:32:51,616 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.}], sender=DmeModule, reason=None))
2017-10-24 17:32:51,616 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.}], sender=DmeModule, reason=None)
2017-10-24 17:32:51,616 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": "Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes."}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 17:32:51,617 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:51,617 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [, Next], sender=TurnManager, reason=None)))
2017-10-24 17:32:51,618 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [, Next], sender=TurnManager, reason=None))
2017-10-24 17:32:51,618 - session_2017-10-24T17_32_29_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 17:32:51,618 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:51,619 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:51,620 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), forget(done)]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:51,620 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")})
2017-10-24 17:32:51,620 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 17:32:51,621 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.done(X)), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")})
2017-10-24 17:32:51,621 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.done(X)), ddd_name=u'recipehelp')
2017-10-24 17:32:51,621 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:loadplan)
2017-10-24 17:32:51,621 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Move ICMMove(icm:loadplan) generated as ''
2017-10-24 17:32:51,621 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.done(X)), ddd_name=u'recipehelp')
2017-10-24 17:32:51,622 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Move Move(ask(?X.done(X)), ddd_name=u'recipehelp') generated as u'Are you done?'
2017-10-24 17:32:51,622 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Are you done?], sender=GenerateModule, reason=None)
2017-10-24 17:32:51,624 - session_2017-10-24T17_32_29_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), forget(done)]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:51,626 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), forget(done)]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:51,626 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 17:32:51,626 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')])
2017-10-24 17:32:51,626 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")})
2017-10-24 17:32:51,627 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 17:32:51,627 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.done(X)), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")})
2017-10-24 17:32:51,628 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.done(X)), ddd_name=u'recipehelp')
2017-10-24 17:32:51,629 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f9b401499e0>]
2017-10-24 17:32:51,629 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f9b401499e0>], sender=GuiBackend, reason=None)
2017-10-24 17:32:51,629 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend posted event
2017-10-24 17:32:51,629 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Are you done?], sender=GenerateModule, reason=None))
2017-10-24 17:32:51,629 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Are you done?], sender=GenerateModule, reason=None)
2017-10-24 17:32:51,629 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "Are you done?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 17:32:51,630 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:51,630 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f9b401499e0>], sender=GuiBackend, reason=None))
2017-10-24 17:32:51,630 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f9b401499e0>], sender=GuiBackend, reason=None)
2017-10-24 17:32:51,630 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 17:32:51,631 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:51,631 - session_2017-10-24T17_32_29_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 17:32:51,695 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend received event {"content": ["", "Are you done?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 17:32:51,696 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 17:32:51,696 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, Are you done?], sender=TextOutputComponent, reason=None))
2017-10-24 17:32:51,696 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, Are you done?], sender=TextOutputComponent, reason=None)
2017-10-24 17:32:51,696 - session_2017-10-24T17_32_29_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 17:32:51,696 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, Are you done?], sender=TurnManager, reason=None)
2017-10-24 17:32:51,696 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, Are you done?], sender=TurnManager, reason=None)
2017-10-24 17:32:51,696 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, Are you done?], sender=TurnManager, reason=None)
2017-10-24 17:32:51,697 - session_2017-10-24T17_32_29_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, Are you done?], sender=TurnManager, reason=None))
2017-10-24 17:32:51,698 - session_2017-10-24T17_32_29_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f9b40820090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9b40143790>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508859171.7
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, Are you done?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next')}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:32:51,699 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:filterReadings
2017-10-24 17:32:51,699 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 17:32:51,699 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 17:32:51,706 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next')}
-- END TIS changes --
2017-10-24 17:32:51,706 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 17:32:51,706 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 17:32:51,708 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:32:51,709 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 17:32:51,709 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 17:32:51,709 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 17:32:51,709 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 17:32:51,709 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 17:32:51,709 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 17:32:51,709 - session_2017-10-24T17_32_29_0 - INFO - BEGIN integrate_moves
2017-10-24 17:32:51,709 - session_2017-10-24T17_32_29_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 17:32:51,709 - session_2017-10-24T17_32_29_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 17:32:51,709 - session_2017-10-24T17_32_29_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 17:32:51,709 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrate
2017-10-24 17:32:51,713 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 17:32:51,713 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 17:32:51,713 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:32:51,713 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 17:32:51,713 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:51,713 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrate
2017-10-24 17:32:51,718 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.done(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-24 17:32:51,718 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 17:32:51,718 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:32:51,718 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 17:32:51,718 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:51,718 - session_2017-10-24T17_32_29_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 17:32:51,719 - session_2017-10-24T17_32_29_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 17:32:51,719 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:32:51,719 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_action
2017-10-24 17:32:51,719 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:32:51,719 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:accommodate
2017-10-24 17:32:51,719 - session_2017-10-24T17_32_29_0 - INFO - breaking out of accommodate
2017-10-24 17:32:51,719 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:32:51,719 - session_2017-10-24T17_32_29_0 - INFO - END integrate_moves
2017-10-24 17:32:51,719 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:32:51,720 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:51,720 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 17:32:51,720 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:32:51,720 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:32:51,721 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:51,721 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:32:51,721 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 17:32:51,723 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: True
?                      ^^^
+ tis.timeout.enabled: False
?                      ^^^^
-- END TIS changes --
2017-10-24 17:32:51,723 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.}], sender=DmeModule, reason=None)
2017-10-24 17:32:51,724 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 17:32:51,724 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.}], sender=DmeModule, reason=None))
2017-10-24 17:32:51,724 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.}], sender=DmeModule, reason=None)
2017-10-24 17:32:51,724 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": "Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes."}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 17:32:51,724 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:51,725 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 17:32:51,725 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 17:32:51,726 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 17:32:51,726 - session_2017-10-24T17_32_29_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 17:32:55,505 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "yes"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 17:32:55,505 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 17:32:55,506 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: yes}], sender=TextInputComponent, reason=None))
2017-10-24 17:32:55,506 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: yes}], sender=TextInputComponent, reason=None)
2017-10-24 17:32:55,506 - session_2017-10-24T17_32_29_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: yes}], sender=TextInputComponent, reason=None)
2017-10-24 17:32:55,506 - session_2017-10-24T17_32_29_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "yes"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 17:32:55,506 - session_2017-10-24T17_32_29_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 17:32:55,507 - session_2017-10-24T17_32_29_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 17:32:55,507 - session_2017-10-24T17_32_29_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])} for DDD 'recipehelp'
2017-10-24 17:32:55,508 - session_2017-10-24T17_32_29_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}
2017-10-24 17:32:55,508 - session_2017-10-24T17_32_29_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=InterpretModule, reason=None)
2017-10-24 17:32:55,508 - session_2017-10-24T17_32_29_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Yes": {}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "yes", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "yes"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "yes", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.CustomSort": {"_ontology_name": "RecipehelpOntology", "_dynamic": false, "_name": "Boolean"}}, "value": "True"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "yes", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 17:32:55,508 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: yes}], sender=TextInputComponent, reason=None)
2017-10-24 17:32:55,509 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=InterpretModule, reason=None))
2017-10-24 17:32:55,509 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=InterpretModule, reason=None)
2017-10-24 17:32:55,509 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 17:32:55,509 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 17:32:55,509 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-24 17:32:55,510 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:55,510 - session_2017-10-24T17_32_29_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-24 17:32:55,510 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
2017-10-24 17:32:55,511 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
2017-10-24 17:32:55,511 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
2017-10-24 17:32:55,512 - session_2017-10-24T17_32_29_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None))
2017-10-24 17:32:55,513 - session_2017-10-24T17_32_29_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f9b40820090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9b40143790>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508859175.51
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: yes
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([?X.done(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:32:55,513 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:filterReadings
2017-10-24 17:32:55,518 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                          ^^^^^                                                                                                              ^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ --------------------------------------------------------------------------
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                          ^^^^                                                                                                              ^^^^^^^^^^^^^^ ^^^
- tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}
?                                                                                                                                                                                         ^^^^^                                                                                                              -------------------------------------------------------------------------------------------------------------------------------------------
+ tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}
?                                                                                                                                                                                         ^^^^
-- END TIS changes --
2017-10-24 17:32:55,518 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:filterReadings
2017-10-24 17:32:55,522 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                                                                                                  ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                                                                                                  ^
- tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}
?                                                                                                                                                                                                                                                                 ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'yes'), #])}
?                                                                                                                                                                                                                                                                 ^
-- END TIS changes --
2017-10-24 17:32:55,527 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: uprankQUDResolving
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                                                                                                  ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                                                                                                  ^^
- tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'yes'), #])}
?                                                                                                                                                                                                                                                                 ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])}
?                                                                                                                                                                                                                                                                 ^^
-- END TIS changes --
2017-10-24 17:32:55,528 - session_2017-10-24T17_32_29_0 - INFO - hypotheses reranked: OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #]) upranked to position 1 from position 1, replacing OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])
2017-10-24 17:32:55,528 - session_2017-10-24T17_32_29_0 - INFO - Could not log rerank
2017-10-24 17:32:55,528 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 17:32:55,532 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')])
- tis.score: 1.0
?              ^
+ tis.score: 1.44
?              ^^
-- END TIS changes --
2017-10-24 17:32:55,532 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 17:32:55,538 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 17:32:55,538 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 17:32:55,538 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 17:32:55,541 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:32:55,541 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 17:32:55,541 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 17:32:55,547 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.bel: {}
- tis.private.tmp.usr.com: {}
+ tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
+ tis.private.tmp.usr.com: {device_activity_terminated(go_to_next)}
- tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                                                      ^  ^
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
?                                                      ^ ++++++++++++++++++++ ^^^^^^
- tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
?                                             ^ ^^
+ tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
?                                             ^ ^^    ++++++++++++++
- tis.private.tmp.usr.qud: stackset([])
+ tis.private.tmp.usr.qud: stackset([?X.done(X)])
?                                    ++++++++++
-- END TIS changes --
2017-10-24 17:32:55,547 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 17:32:55,547 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 17:32:55,548 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 17:32:55,548 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 17:32:55,548 - session_2017-10-24T17_32_29_0 - INFO - BEGIN integrate_moves
2017-10-24 17:32:55,548 - session_2017-10-24T17_32_29_0 - INFO - init_shift: OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])
2017-10-24 17:32:55,548 - session_2017-10-24T17_32_29_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 17:32:55,548 - session_2017-10-24T17_32_29_0 - INFO - init_shift: OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])
2017-10-24 17:32:55,549 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrate
2017-10-24 17:32:55,554 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: integrateUsrAnswer
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.nim: OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])
+ tis.private.nim: OpenQueue([#])
- tis.recent_commitments: {}
+ tis.recent_commitments: {done(True)}
?                          ++++++++++
- tis.shared.com: {device_activity_terminated(go_to_next)}
+ tis.shared.com: {device_activity_terminated(go_to_next), done(True)}
?                                                        ++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')}
-- END TIS changes --
2017-10-24 17:32:55,554 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 17:32:55,554 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:32:55,559 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {device_activity_terminated(go_to_next), done(True)}
+ tis.shared.com: {device_activity_terminated(go_to_next), done(True), resolved(?X.done(X))}
?                                                                    ++++++++++++++++++++++
- tis.shared.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
?                             --------------------------
+ tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
-- END TIS changes --
2017-10-24 17:32:55,559 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 17:32:55,564 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: removeFindout
-- BEGIN TIS changes --
- tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
?                           ---------------------
+ tis.private.plan: Stack([forget(done)])
-- END TIS changes --
2017-10-24 17:32:55,564 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:55,564 - session_2017-10-24T17_32_29_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 17:32:55,564 - session_2017-10-24T17_32_29_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 17:32:55,565 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:32:55,565 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_action
2017-10-24 17:32:55,565 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:32:55,565 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:accommodate
2017-10-24 17:32:55,565 - session_2017-10-24T17_32_29_0 - INFO - breaking out of accommodate
2017-10-24 17:32:55,566 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:32:55,566 - session_2017-10-24T17_32_29_0 - INFO - END integrate_moves
2017-10-24 17:32:55,566 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:32:55,569 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: exec_forget
-- BEGIN TIS changes --
- tis.private.plan: Stack([forget(done)])
?                          ------------
+ tis.private.plan: Stack([])
- tis.shared.com: {device_activity_terminated(go_to_next), done(True), resolved(?X.done(X))}
?                                                        ----------------------------------
+ tis.shared.com: {device_activity_terminated(go_to_next)}
-- END TIS changes --
2017-10-24 17:32:55,569 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:55,569 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:32:55,570 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:55,570 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 17:32:55,573 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.done(X)])
?                           ----------
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 17:32:55,573 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:32:55,573 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:32:55,573 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:55,573 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:32:55,574 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 17:32:55,574 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(COMMITMENTS_UPDATE, done(True), sender=DmeModule, reason=None)
2017-10-24 17:32:55,574 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, yes, sender=DmeModule, reason=None)
2017-10-24 17:32:55,574 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.}], sender=DmeModule, reason=None)
2017-10-24 17:32:55,574 - session_2017-10-24T17_32_29_0 - INFO - running ISU module: select
2017-10-24 17:32:55,575 - session_2017-10-24T17_32_29_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f9b40820090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9b40143790>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508859175.51
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')])
tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
tis.private.tmp.usr.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: yes
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:32:55,575 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 17:32:55,580 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
?                                                                ^ ^^^^^^
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
?                                                                ^^^^^ ^
- tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), forget(done)])
+ tis.private.tmp.sys.plan: Stack([])
-- END TIS changes --
2017-10-24 17:32:55,581 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_action
2017-10-24 17:32:55,583 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: selectRespond
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
?                                                                 +++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 17:32:55,583 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_icm
2017-10-24 17:32:55,587 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
?                                   --------------------------------
+ tis.private.agenda: OpenQueue([#, respond(?X.say_step(X))])
-- END TIS changes --
2017-10-24 17:32:55,587 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_move
2017-10-24 17:32:55,590 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: selectAnswer
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")))])
- tis.private.agenda: OpenQueue([#, respond(?X.say_step(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 17:32:55,590 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_icm
2017-10-24 17:32:55,590 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_move
2017-10-24 17:32:55,590 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 17:32:55,592 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:32:55,592 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 17:32:55,593 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:set_timeout
2017-10-24 17:32:55,595 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-24 17:32:55,596 - session_2017-10-24T17_32_29_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp')])
2017-10-24 17:32:55,596 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None))
2017-10-24 17:32:55,596 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(COMMITMENTS_UPDATE, done(True), sender=DmeModule, reason=None))
2017-10-24 17:32:55,596 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(COMMITMENTS_UPDATE, done(True), sender=DmeModule, reason=None)
2017-10-24 17:32:55,596 - session_2017-10-24T17_32_29_0 - DEBUG - DeviceManager handles Event(COMMITMENTS_UPDATE, done(True), sender=DmeModule, reason=None)
2017-10-24 17:32:55,597 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, yes, sender=DmeModule, reason=None))
2017-10-24 17:32:55,597 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, yes, sender=DmeModule, reason=None)
2017-10-24 17:32:55,597 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": "yes", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 17:32:55,598 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:55,598 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.}], sender=DmeModule, reason=None))
2017-10-24 17:32:55,598 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.}], sender=DmeModule, reason=None)
2017-10-24 17:32:55,598 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": "Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes."}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 17:32:55,599 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:55,600 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)))
2017-10-24 17:32:55,600 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None))
2017-10-24 17:32:55,600 - session_2017-10-24T17_32_29_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 17:32:55,601 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:55,601 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:55,602 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:55,602 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")})
2017-10-24 17:32:55,602 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp')
2017-10-24 17:32:55,603 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Generating utterance part from move Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp')
2017-10-24 17:32:55,603 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Move Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp') generated as u'Ok Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes..'
2017-10-24 17:32:55,604 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes..], sender=GenerateModule, reason=None)
2017-10-24 17:32:55,605 - session_2017-10-24T17_32_29_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:55,606 - session_2017-10-24T17_32_29_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Ok Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes..}, sender=IndependentGuiBackend, reason=None)
2017-10-24 17:32:55,607 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:55,607 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 17:32:55,607 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp')])
2017-10-24 17:32:55,608 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")})
2017-10-24 17:32:55,608 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp')
2017-10-24 17:32:55,609 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.Popup instance at 0x7f9b400f5cf8>]
2017-10-24 17:32:55,609 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f9b400f5cf8>], sender=GuiBackend, reason=None)
2017-10-24 17:32:55,609 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend posted event
2017-10-24 17:32:55,609 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes..], sender=GenerateModule, reason=None))
2017-10-24 17:32:55,609 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes..], sender=GenerateModule, reason=None)
2017-10-24 17:32:55,609 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Ok Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.."], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 17:32:55,610 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:55,610 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Ok Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes..}, sender=IndependentGuiBackend, reason=None))
2017-10-24 17:32:55,610 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Ok Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes..}, sender=IndependentGuiBackend, reason=None)
2017-10-24 17:32:55,611 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Ok Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.."}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-24 17:32:55,611 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:55,612 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f9b400f5cf8>], sender=GuiBackend, reason=None))
2017-10-24 17:32:55,612 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f9b400f5cf8>], sender=GuiBackend, reason=None)
2017-10-24 17:32:55,612 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Ok Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.."}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 17:32:55,613 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:55,613 - session_2017-10-24T17_32_29_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 17:32:55,635 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend received event {"content": ["Ok Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.."], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 17:32:55,635 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 17:32:55,635 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Ok Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes..], sender=TextOutputComponent, reason=None))
2017-10-24 17:32:55,635 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Ok Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes..], sender=TextOutputComponent, reason=None)
2017-10-24 17:32:55,635 - session_2017-10-24T17_32_29_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 17:32:55,635 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Ok Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes..], sender=TurnManager, reason=None)
2017-10-24 17:32:55,635 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Ok Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes..], sender=TurnManager, reason=None)
2017-10-24 17:32:55,635 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Ok Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes..], sender=TurnManager, reason=None)
2017-10-24 17:32:55,636 - session_2017-10-24T17_32_29_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Ok Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes..], sender=TurnManager, reason=None))
2017-10-24 17:32:55,637 - session_2017-10-24T17_32_29_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f9b40820090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9b40143790>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508859175.64
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Ok Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes..], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
tis.private.tmp.usr.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: yes
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:32:55,637 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:filterReadings
2017-10-24 17:32:55,637 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 17:32:55,637 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 17:32:55,643 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')}
?            ^^
- tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 17:32:55,643 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 17:32:55,643 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 17:32:55,646 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:32:55,646 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 17:32:55,646 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 17:32:55,646 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 17:32:55,646 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 17:32:55,646 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 17:32:55,646 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 17:32:55,646 - session_2017-10-24T17_32_29_0 - INFO - BEGIN integrate_moves
2017-10-24 17:32:55,646 - session_2017-10-24T17_32_29_0 - INFO - init_shift: OpenQueue([Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 17:32:55,646 - session_2017-10-24T17_32_29_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 17:32:55,647 - session_2017-10-24T17_32_29_0 - INFO - init_shift: OpenQueue([Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 17:32:55,647 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrate
2017-10-24 17:32:55,650 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: integrateSysAnswer
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.com: {device_activity_terminated(go_to_next)}
+ tis.shared.com: {device_activity_terminated(go_to_next), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 17:32:55,650 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 17:32:55,650 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:32:55,655 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {device_activity_terminated(go_to_next), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
+ tis.shared.com: {device_activity_terminated(go_to_next), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes."), resolved(?X.say_step(X))}
?                                                                                                                                                                                                                                                                                 ++++++++++++++++++++++++++
- tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                             -------------------------
+ tis.shared.goals: stackset([perform(top)])
-- END TIS changes --
2017-10-24 17:32:55,655 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 17:32:55,655 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:55,655 - session_2017-10-24T17_32_29_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 17:32:55,655 - session_2017-10-24T17_32_29_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 17:32:55,655 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:32:55,656 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_action
2017-10-24 17:32:55,656 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:32:55,656 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:accommodate
2017-10-24 17:32:55,656 - session_2017-10-24T17_32_29_0 - INFO - breaking out of accommodate
2017-10-24 17:32:55,656 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:32:55,656 - session_2017-10-24T17_32_29_0 - INFO - END integrate_moves
2017-10-24 17:32:55,656 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:32:55,656 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:55,656 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 17:32:55,656 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:32:55,657 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:32:55,657 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:55,657 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:32:55,657 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 17:32:55,660 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-24 17:32:55,660 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.}], sender=DmeModule, reason=None)
2017-10-24 17:32:55,660 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Ok Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes..], latest_moves: OpenQueue([#, Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 17:32:55,660 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.}], sender=DmeModule, reason=None))
2017-10-24 17:32:55,660 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.}], sender=DmeModule, reason=None)
2017-10-24 17:32:55,660 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": "Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes."}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 17:32:55,661 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:55,661 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Ok Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes..], latest_moves: OpenQueue([#, Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None))
2017-10-24 17:32:55,662 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Ok Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes..], latest_moves: OpenQueue([#, Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 17:32:55,662 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Ok Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes..], latest_moves: OpenQueue([#, Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 17:32:55,663 - session_2017-10-24T17_32_29_0 - INFO - starting TIMEOUT timer: <tdm.maharani.scheduler.DelayedCall instance at 0x7f9b40111fc8>:1.0
2017-10-24 17:32:55,663 - session_2017-10-24T17_32_29_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 17:32:56,663 - session_2017-10-24T17_32_29_0 - DEBUG - Timeout fired
2017-10-24 17:32:56,663 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager posts Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 17:32:56,664 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 17:32:56,664 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule handles Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 17:32:56,664 - session_2017-10-24T17_32_29_0 - INFO - running ISU module: update (Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 17:32:56,665 - session_2017-10-24T17_32_29_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f9b40820090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9b40143790>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508859176.66
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
tis.private.tmp.usr.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: yes
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {device_activity_terminated(go_to_next), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes."), resolved(?X.say_step(X))}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:32:56,665 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:filterReadings
2017-10-24 17:32:56,665 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 17:32:56,668 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-24 17:32:56,668 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 17:32:56,672 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')}
-- END TIS changes --
2017-10-24 17:32:56,672 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 17:32:56,672 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 17:32:56,675 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:32:56,675 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 17:32:56,675 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 17:32:56,675 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 17:32:56,676 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 17:32:56,676 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 17:32:56,676 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 17:32:56,676 - session_2017-10-24T17_32_29_0 - INFO - BEGIN integrate_moves
2017-10-24 17:32:56,676 - session_2017-10-24T17_32_29_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 17:32:56,676 - session_2017-10-24T17_32_29_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 17:32:56,676 - session_2017-10-24T17_32_29_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 17:32:56,676 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrate
2017-10-24 17:32:56,676 - session_2017-10-24T17_32_29_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 17:32:56,676 - session_2017-10-24T17_32_29_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 17:32:56,676 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:32:56,676 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_action
2017-10-24 17:32:56,677 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:32:56,677 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:accommodate
2017-10-24 17:32:56,677 - session_2017-10-24T17_32_29_0 - INFO - breaking out of accommodate
2017-10-24 17:32:56,677 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:32:56,677 - session_2017-10-24T17_32_29_0 - INFO - END integrate_moves
2017-10-24 17:32:56,677 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:32:56,680 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: recoverPerformPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 17:32:56,680 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:56,680 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:32:56,683 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
+ tis.private.bel: {}
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
- tis.shared.com: {device_activity_terminated(go_to_next), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes."), resolved(?X.say_step(X))}
+ tis.shared.com: {}
-- END TIS changes --
2017-10-24 17:32:56,683 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:56,683 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:32:56,684 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:56,684 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 17:32:56,684 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:32:56,684 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:32:56,684 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:56,684 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:32:56,685 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 17:32:56,685 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 17:32:56,685 - session_2017-10-24T17_32_29_0 - INFO - running ISU module: select
2017-10-24 17:32:56,686 - session_2017-10-24T17_32_29_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f9b40820090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9b40143790>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508859176.66
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
tis.private.tmp.usr.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: yes
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:32:56,686 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 17:32:56,691 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
?                                                                 ^^^  ^
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
?                                                                +++ ^^^^ +++ ^^^^^^^
- tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
- tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
+ tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.com: {}
- tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                                      -------------------------
+ tis.private.tmp.sys.goals: stackset([perform(top)])
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-24 17:32:56,691 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_action
2017-10-24 17:32:56,694 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
?                                                                              +++++++++++++++++++++
-- END TIS changes --
2017-10-24 17:32:56,694 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_icm
2017-10-24 17:32:56,696 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 17:32:56,696 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_move
2017-10-24 17:32:56,699 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
?                                                                          +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 17:32:56,699 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_icm
2017-10-24 17:32:56,699 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_move
2017-10-24 17:32:56,699 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 17:32:56,701 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:32:56,701 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 17:32:56,702 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:set_timeout
2017-10-24 17:32:56,704 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-24 17:32:56,704 - session_2017-10-24T17_32_29_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 17:32:56,704 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 17:32:58,823 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "next"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 17:32:58,824 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 17:32:58,824 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: next}], sender=TextInputComponent, reason=None))
2017-10-24 17:32:58,824 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: next}], sender=TextInputComponent, reason=None)
2017-10-24 17:32:58,824 - session_2017-10-24T17_32_29_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: next}], sender=TextInputComponent, reason=None)
2017-10-24 17:32:58,824 - session_2017-10-24T17_32_29_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "next"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 17:32:58,824 - session_2017-10-24T17_32_29_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 17:32:58,825 - session_2017-10-24T17_32_29_0 - DEBUG - ExactInterpreter: Found no valid exact interpretations, returning an empty result.
2017-10-24 17:32:58,825 - session_2017-10-24T17_32_29_0 - DEBUG - Result from 'ExactInterpreter': []
2017-10-24 17:32:58,825 - session_2017-10-24T17_32_29_0 - DEBUG - Starting 'RobustInterpreter'
2017-10-24 17:32:58,825 - session_2017-10-24T17_32_29_0 - DEBUG - DddInterpreter.interpret_partially: timeout=1.99912595749
2017-10-24 17:32:58,827 - session_2017-10-24T17_32_29_0 - DEBUG - robust grammatical interpretations: []
2017-10-24 17:32:58,828 - session_2017-10-24T17_32_29_0 - DEBUG - _remove_literals(): Got no valid interpretations of partial utterances
2017-10-24 17:32:58,828 - session_2017-10-24T17_32_29_0 - DEBUG - RobustInterpreter: Partial interpretation failed.
2017-10-24 17:32:58,828 - session_2017-10-24T17_32_29_0 - DEBUG - RobustInterpreter: use_word_list_correction disabled, skipping interpretation with word correction
2017-10-24 17:32:58,828 - session_2017-10-24T17_32_29_0 - DEBUG - RobustInterpreter: Found no robust interpretations, returning an empty result.
2017-10-24 17:32:58,828 - session_2017-10-24T17_32_29_0 - DEBUG - Result from 'RobustInterpreter': []
2017-10-24 17:32:58,828 - session_2017-10-24T17_32_29_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {}, sender=InterpretModule, reason=None)
2017-10-24 17:32:58,829 - session_2017-10-24T17_32_29_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 17:32:58,829 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: next}], sender=TextInputComponent, reason=None)
2017-10-24 17:32:58,829 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 17:32:58,829 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 17:32:58,829 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 17:32:58,830 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:58,830 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None)))
2017-10-24 17:32:58,830 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 17:32:58,831 - session_2017-10-24T17_32_29_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 17:32:58,831 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:58,831 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:58,832 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:58,832 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-24 17:32:58,832 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-24 17:32:58,832 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 17:32:58,832 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 17:32:58,833 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:reraise:perform(top))
2017-10-24 17:32:58,833 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Move ICMMove(icm:reraise:perform(top)) generated as u'Returning to the start view.'
2017-10-24 17:32:58,833 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 17:32:58,834 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Move Move(ask(?X.goal(X)), ddd_name=u'recipehelp') generated as u'What would you like to do?'
2017-10-24 17:32:58,834 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 17:32:58,835 - session_2017-10-24T17_32_29_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:58,836 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:58,836 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 17:32:58,836 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 17:32:58,836 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-24 17:32:58,837 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-24 17:32:58,837 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 17:32:58,837 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 17:32:58,837 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f9b400ee248>]
2017-10-24 17:32:58,837 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f9b400ee248>], sender=GuiBackend, reason=None)
2017-10-24 17:32:58,838 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend posted event
2017-10-24 17:32:58,838 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {}, sender=InterpretModule, reason=None))
2017-10-24 17:32:58,838 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {}, sender=InterpretModule, reason=None)
2017-10-24 17:32:58,839 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager posts Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-24 17:32:58,839 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-24 17:32:58,839 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_SPEAKING"}
2017-10-24 17:32:58,839 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:58,839 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None))
2017-10-24 17:32:58,840 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 17:32:58,840 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 17:32:58,841 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:58,841 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f9b400ee248>], sender=GuiBackend, reason=None))
2017-10-24 17:32:58,842 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f9b400ee248>], sender=GuiBackend, reason=None)
2017-10-24 17:32:58,842 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 17:32:58,843 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:58,844 - session_2017-10-24T17_32_29_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 17:32:58,846 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend received event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 17:32:58,846 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 17:32:58,847 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None))
2017-10-24 17:32:58,847 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None)
2017-10-24 17:32:58,847 - session_2017-10-24T17_32_29_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 17:32:58,847 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 17:32:58,847 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 17:32:58,847 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 17:32:58,848 - session_2017-10-24T17_32_29_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None))
2017-10-24 17:32:58,849 - session_2017-10-24T17_32_29_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f9b40820090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9b40143790>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508859178.85
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
tis.private.tmp.usr.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: next
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:32:58,849 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:filterReadings
2017-10-24 17:32:58,849 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 17:32:58,849 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 17:32:58,854 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: False
?                   ^^^^
+ tis.passive_mode: True
?                   ^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
- tis.shared.pm: {Move(answer(say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
+ tis.shared.pm: {}
-- END TIS changes --
2017-10-24 17:32:58,854 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 17:32:58,854 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 17:32:58,856 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:32:58,857 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 17:32:58,857 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 17:32:58,857 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 17:32:58,857 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 17:32:58,857 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 17:32:58,857 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 17:32:58,857 - session_2017-10-24T17_32_29_0 - INFO - BEGIN integrate_moves
2017-10-24 17:32:58,857 - session_2017-10-24T17_32_29_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 17:32:58,857 - session_2017-10-24T17_32_29_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 17:32:58,857 - session_2017-10-24T17_32_29_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 17:32:58,858 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrate
2017-10-24 17:32:58,862 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 17:32:58,862 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 17:32:58,862 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:32:58,862 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 17:32:58,862 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:58,862 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrate
2017-10-24 17:32:58,865 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.goal(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-24 17:32:58,865 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 17:32:58,866 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:32:58,866 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 17:32:58,866 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:58,866 - session_2017-10-24T17_32_29_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 17:32:58,866 - session_2017-10-24T17_32_29_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 17:32:58,866 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:32:58,866 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_action
2017-10-24 17:32:58,866 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:32:58,866 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:accommodate
2017-10-24 17:32:58,866 - session_2017-10-24T17_32_29_0 - INFO - breaking out of accommodate
2017-10-24 17:32:58,867 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:32:58,867 - session_2017-10-24T17_32_29_0 - INFO - END integrate_moves
2017-10-24 17:32:58,867 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:32:58,867 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:58,867 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 17:32:58,867 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:32:58,867 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:32:58,868 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:58,868 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:32:58,868 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 17:32:58,871 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: True
?                      ^^^
+ tis.timeout.enabled: False
?                      ^^^^
-- END TIS changes --
2017-10-24 17:32:58,871 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 17:32:58,871 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 17:32:58,871 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 17:32:58,871 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 17:32:58,871 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 17:32:58,872 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:58,872 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 17:32:58,872 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 17:32:58,872 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 17:32:58,873 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {}, sender=TurnManager, reason=None)
2017-10-24 17:32:58,873 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {}, sender=TurnManager, reason=None)
2017-10-24 17:32:58,873 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {}, sender=TurnManager, reason=None)
2017-10-24 17:32:58,873 - session_2017-10-24T17_32_29_0 - INFO - running ISU module: update (Event(INTERPRETATION, {}, sender=TurnManager, reason=None))
2017-10-24 17:32:58,875 - session_2017-10-24T17_32_29_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f9b40820090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9b40143790>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508859178.87
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: True
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
tis.private.tmp.usr.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: next
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([?X.goal(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:32:58,875 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:filterReadings
2017-10-24 17:32:58,875 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 17:32:58,877 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-24 17:32:58,877 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 17:32:58,883 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-24 17:32:58,883 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 17:32:58,883 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 17:32:58,885 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:32:58,885 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 17:32:58,886 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 17:32:58,886 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 17:32:58,886 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 17:32:58,886 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 17:32:58,886 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 17:32:58,886 - session_2017-10-24T17_32_29_0 - INFO - BEGIN integrate_moves
2017-10-24 17:32:58,886 - session_2017-10-24T17_32_29_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 17:32:58,886 - session_2017-10-24T17_32_29_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 17:32:58,886 - session_2017-10-24T17_32_29_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 17:32:58,886 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrate
2017-10-24 17:32:58,887 - session_2017-10-24T17_32_29_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 17:32:58,887 - session_2017-10-24T17_32_29_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 17:32:58,887 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:32:58,887 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_action
2017-10-24 17:32:58,888 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:32:58,888 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:accommodate
2017-10-24 17:32:58,888 - session_2017-10-24T17_32_29_0 - INFO - breaking out of accommodate
2017-10-24 17:32:58,888 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:32:58,889 - session_2017-10-24T17_32_29_0 - INFO - END integrate_moves
2017-10-24 17:32:58,889 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:32:58,889 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:58,889 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 17:32:58,892 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.goal(X)])
?                           ----------
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 17:32:58,892 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:32:58,892 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:32:58,893 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:58,893 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:32:58,893 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 17:32:58,893 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 17:32:58,893 - session_2017-10-24T17_32_29_0 - INFO - running ISU module: select
2017-10-24 17:32:58,894 - session_2017-10-24T17_32_29_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f9b40820090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9b40143790>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508859178.87
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: True
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
tis.private.tmp.usr.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: next
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:32:58,894 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 17:32:58,898 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
+ tis.private.tmp.sys.agenda: OpenQueue([#])
- tis.private.tmp.sys.goals: stackset([perform(top)])
+ tis.private.tmp.sys.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                                      ++++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 17:32:58,898 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_icm
2017-10-24 17:32:58,900 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: selectIcmSemNeg
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:per*pos:"next"), ICMMove(icm:sem*neg)])
-- END TIS changes --
2017-10-24 17:32:58,901 - session_2017-10-24T17_32_29_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:per*pos:"next"), ICMMove(icm:sem*neg)])
2017-10-24 17:32:58,901 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:"next"), ICMMove(icm:sem*neg)]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:"next"), ICMMove(icm:sem*neg)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {}, sender=TurnManager, reason=None))
2017-10-24 17:32:58,901 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 17:32:58,901 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 17:32:58,901 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 17:32:58,902 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:58,902 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:"next"), ICMMove(icm:sem*neg)]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:"next"), ICMMove(icm:sem*neg)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {}, sender=TurnManager, reason=None)))
2017-10-24 17:32:58,902 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:"next"), ICMMove(icm:sem*neg)]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:"next"), ICMMove(icm:sem*neg)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {}, sender=TurnManager, reason=None))
2017-10-24 17:32:58,902 - session_2017-10-24T17_32_29_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 17:32:58,903 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:"next"), ICMMove(icm:sem*neg)]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:"next"), ICMMove(icm:sem*neg)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:58,903 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:"next"), ICMMove(icm:sem*neg)]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:"next"), ICMMove(icm:sem*neg)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:58,904 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:"next"), ICMMove(icm:sem*neg)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:"next"), ICMMove(icm:sem*neg)]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:58,904 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:per*pos:"next"), facts={})
2017-10-24 17:32:58,904 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:per*pos:"next")
2017-10-24 17:32:58,904 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:sem*neg), facts={})
2017-10-24 17:32:58,904 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:sem*neg)
2017-10-24 17:32:58,904 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:per*pos:"next")
2017-10-24 17:32:58,905 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Move ICMMove(icm:per*pos:"next") generated as u'I heard you say next.'
2017-10-24 17:32:58,905 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:sem*neg)
2017-10-24 17:32:58,905 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Move ICMMove(icm:sem*neg) generated as u"I don't understand."
2017-10-24 17:32:58,905 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [I heard you say next., I don't understand.], sender=GenerateModule, reason=None)
2017-10-24 17:32:58,906 - session_2017-10-24T17_32_29_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:"next"), ICMMove(icm:sem*neg)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:"next"), ICMMove(icm:sem*neg)]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:58,907 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:per*pos:"next"), ICMMove(icm:sem*neg)]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:per*pos:"next"), ICMMove(icm:sem*neg)]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:32:58,907 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 17:32:58,907 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:per*pos:"next"), ICMMove(icm:sem*neg)])
2017-10-24 17:32:58,907 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:per*pos:"next"), facts={})
2017-10-24 17:32:58,908 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:per*pos:"next")
2017-10-24 17:32:58,908 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:sem*neg), facts={})
2017-10-24 17:32:58,908 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:sem*neg)
2017-10-24 17:32:58,908 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend generated message []
2017-10-24 17:32:58,908 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 17:32:58,908 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend posted event
2017-10-24 17:32:58,908 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [I heard you say next., I don't understand.], sender=GenerateModule, reason=None))
2017-10-24 17:32:58,908 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [I heard you say next., I don't understand.], sender=GenerateModule, reason=None)
2017-10-24 17:32:58,909 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": ["I heard you say next.", "I don't understand."], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 17:32:58,910 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:58,910 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-24 17:32:58,910 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 17:32:58,910 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 17:32:58,910 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:58,911 - session_2017-10-24T17_32_29_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 17:32:58,928 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend received event {"content": ["I heard you say next.", "I don't understand."], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 17:32:58,928 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 17:32:58,928 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [I heard you say next., I don't understand.], sender=TextOutputComponent, reason=None))
2017-10-24 17:32:58,928 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [I heard you say next., I don't understand.], sender=TextOutputComponent, reason=None)
2017-10-24 17:32:58,928 - session_2017-10-24T17_32_29_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 17:32:58,928 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [I heard you say next., I don't understand.], sender=TurnManager, reason=None)
2017-10-24 17:32:58,928 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [I heard you say next., I don't understand.], sender=TurnManager, reason=None)
2017-10-24 17:32:58,929 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [I heard you say next., I don't understand.], sender=TurnManager, reason=None)
2017-10-24 17:32:58,929 - session_2017-10-24T17_32_29_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [I heard you say next., I don't understand.], sender=TurnManager, reason=None))
2017-10-24 17:32:58,930 - session_2017-10-24T17_32_29_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f9b40820090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9b40143790>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508859178.93
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [I heard you say next., I don't understand.], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"next", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:per*pos:"next"), ICMMove(icm:sem*neg)])
tis.next_utterance.plan_item: None
tis.passive_mode: True
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
tis.private.tmp.usr.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: next
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:32:58,930 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:filterReadings
2017-10-24 17:32:58,930 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 17:32:58,930 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 17:32:58,934 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:per*pos:"next", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
- tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
+ tis.shared.pm: {}
-- END TIS changes --
2017-10-24 17:32:58,934 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 17:32:58,934 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 17:32:58,936 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:32:58,936 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 17:32:58,937 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 17:32:58,937 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 17:32:58,937 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 17:32:58,937 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 17:32:58,937 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 17:32:58,937 - session_2017-10-24T17_32_29_0 - INFO - BEGIN integrate_moves
2017-10-24 17:32:58,937 - session_2017-10-24T17_32_29_0 - INFO - init_shift: OpenQueue([ICMMove(icm:per*pos:"next", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), #])
2017-10-24 17:32:58,937 - session_2017-10-24T17_32_29_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 17:32:58,937 - session_2017-10-24T17_32_29_0 - INFO - init_shift: OpenQueue([ICMMove(icm:per*pos:"next", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), #])
2017-10-24 17:32:58,937 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrate
2017-10-24 17:32:58,941 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:per*pos:"next", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0), #])
+ tis.private.nim: OpenQueue([ICMMove(icm:sem*neg, speaker=SYS, score=1.0), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"next", speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 17:32:58,941 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 17:32:58,941 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:32:58,941 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 17:32:58,941 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:58,942 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrate
2017-10-24 17:32:58,944 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:sem*neg, speaker=SYS, score=1.0), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"next", speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"next", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)}
?                                                                              ++++++++++++++++++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 17:32:58,944 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 17:32:58,945 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:32:58,945 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 17:32:58,945 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:58,945 - session_2017-10-24T17_32_29_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 17:32:58,945 - session_2017-10-24T17_32_29_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 17:32:58,945 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:32:58,945 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_action
2017-10-24 17:32:58,945 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:32:58,945 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:accommodate
2017-10-24 17:32:58,945 - session_2017-10-24T17_32_29_0 - INFO - breaking out of accommodate
2017-10-24 17:32:58,946 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:32:58,946 - session_2017-10-24T17_32_29_0 - INFO - END integrate_moves
2017-10-24 17:32:58,946 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:32:58,946 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:58,946 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 17:32:58,946 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:32:58,946 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:32:58,947 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:32:58,947 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:32:58,947 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 17:32:58,949 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:32:58,949 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 17:32:58,950 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [I heard you say next., I don't understand.], latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"next", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)])}, None), sender=DmeModule, reason=None)
2017-10-24 17:32:58,950 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 17:32:58,950 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 17:32:58,950 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 17:32:58,950 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:32:58,950 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [I heard you say next., I don't understand.], latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"next", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)])}, None), sender=DmeModule, reason=None))
2017-10-24 17:32:58,951 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [I heard you say next., I don't understand.], latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"next", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)])}, None), sender=DmeModule, reason=None)
2017-10-24 17:32:58,951 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [I heard you say next., I don't understand.], latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"next", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)])}, None), sender=DmeModule, reason=None)
2017-10-24 17:32:58,951 - session_2017-10-24T17_32_29_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 17:33:02,096 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "go to next"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 17:33:02,096 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 17:33:02,096 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None))
2017-10-24 17:33:02,096 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None)
2017-10-24 17:33:02,096 - session_2017-10-24T17_32_29_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None)
2017-10-24 17:33:02,096 - session_2017-10-24T17_32_29_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "go to next"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 17:33:02,096 - session_2017-10-24T17_32_29_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 17:33:02,097 - session_2017-10-24T17_32_29_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 17:33:02,097 - session_2017-10-24T17_32_29_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])} for DDD 'recipehelp'
2017-10-24 17:33:02,098 - session_2017-10-24T17_32_29_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
2017-10-24 17:33:02,098 - session_2017-10-24T17_32_29_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=InterpretModule, reason=None)
2017-10-24 17:33:02,098 - session_2017-10-24T17_32_29_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "go to next"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to next", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.RequestMove": {"_type": "request", "_ddd_name": "recipehelp", "_content": {"6e33aa3d9d132b93a4a4a6e9b2d00468.Action": {"_ontology_name": "RecipehelpOntology", "value": "go_to_next"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "go to next", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 17:33:02,098 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: go to next}], sender=TextInputComponent, reason=None)
2017-10-24 17:33:02,098 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=InterpretModule, reason=None))
2017-10-24 17:33:02,099 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=InterpretModule, reason=None)
2017-10-24 17:33:02,099 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 17:33:02,099 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 17:33:02,099 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-24 17:33:02,099 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:33:02,099 - session_2017-10-24T17_32_29_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-24 17:33:02,100 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
2017-10-24 17:33:02,100 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
2017-10-24 17:33:02,101 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
2017-10-24 17:33:02,101 - session_2017-10-24T17_32_29_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None))
2017-10-24 17:33:02,102 - session_2017-10-24T17_32_29_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f9b40820090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9b40143790>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508859182.1
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"next", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)])
tis.latest_moves_amb: {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:per*pos:"next"), ICMMove(icm:sem*neg)])
tis.next_utterance.plan_item: None
tis.passive_mode: True
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
tis.private.tmp.usr.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"next", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)}
tis.shared.pm: {}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:33:02,102 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:filterReadings
2017-10-24 17:33:02,106 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(answer("go to next"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #]), OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
-- END TIS changes --
2017-10-24 17:33:02,106 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:filterReadings
2017-10-24 17:33:02,106 - session_2017-10-24T17_32_29_0 - INFO - hypotheses reranking had no effect
2017-10-24 17:33:02,106 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 17:33:02,109 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:per*pos:"next", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)])
+ tis.latest_moves: OpenQueue([#, Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next')])
-- END TIS changes --
2017-10-24 17:33:02,109 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 17:33:02,113 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: True
?                   ^^^
+ tis.passive_mode: False
?                   ^^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:per*pos:"next", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:per*pos:"next", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-24 17:33:02,114 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 17:33:02,114 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 17:33:02,121 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:33:02,121 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 17:33:02,121 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 17:33:02,127 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step two: Make the ragu. Heat the olive oil in a frying pan and fry the celery, carrots and onion for approximately 15 minutes. Add the beef and pork. Pour in red wine and stir well. Cook for 45 minutes.")}
- tis.private.tmp.usr.com: {device_activity_terminated(go_to_next)}
+ tis.private.tmp.usr.bel: {}
+ tis.private.tmp.usr.com: {}
- tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
?                                                      ^ ^^^^^^^^^^^^ --------------
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                                                      ^ ^
- tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
?                                             ^ ^^    --------------
+ tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
?                                             ^ ^^
- tis.private.tmp.usr.qud: stackset([?X.done(X)])
?                                    ----------
+ tis.private.tmp.usr.qud: stackset([])
-- END TIS changes --
2017-10-24 17:33:02,127 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 17:33:02,127 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 17:33:02,127 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 17:33:02,128 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 17:33:02,128 - session_2017-10-24T17_32_29_0 - INFO - BEGIN integrate_moves
2017-10-24 17:33:02,128 - session_2017-10-24T17_32_29_0 - INFO - init_shift: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])
2017-10-24 17:33:02,128 - session_2017-10-24T17_32_29_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 17:33:02,128 - session_2017-10-24T17_32_29_0 - INFO - init_shift: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])
2017-10-24 17:33:02,128 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrate
2017-10-24 17:33:02,132 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: integrateUsrRequest
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.nim: OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])
+ tis.private.nim: OpenQueue([#])
- tis.private.plan: Stack([findout(?X.goal(X))])
+ tis.private.plan: Stack([do(go_to_next), findout(?X.goal(X))])
?                          ++++++++++++++++
- tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
+ tis.shared.goals: stackset([perform(go_to_next), resolve_user(?X.goal(X)), perform(top)])
?                             +++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next')}
-- END TIS changes --
2017-10-24 17:33:02,132 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 17:33:02,132 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:33:02,136 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: downdateISSUES3
-- BEGIN TIS changes --
- tis.shared.goals: stackset([perform(go_to_next), resolve_user(?X.goal(X)), perform(top)])
?                                                  --------------------------
+ tis.shared.goals: stackset([perform(go_to_next), perform(top)])
-- END TIS changes --
2017-10-24 17:33:02,136 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 17:33:02,137 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:33:02,140 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: findActionPlan
-- BEGIN TIS changes --
- tis.private.plan: Stack([do(go_to_next), findout(?X.goal(X))])
+ tis.private.plan: Stack([dev_perform(go_to_next, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
-- END TIS changes --
2017-10-24 17:33:02,141 - session_2017-10-24T17_32_29_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 17:33:02,141 - session_2017-10-24T17_32_29_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 17:33:02,141 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:33:02,141 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_action
2017-10-24 17:33:02,142 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:33:02,142 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:accommodate
2017-10-24 17:33:02,142 - session_2017-10-24T17_32_29_0 - INFO - breaking out of accommodate
2017-10-24 17:33:02,142 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:33:02,142 - session_2017-10-24T17_32_29_0 - INFO - END integrate_moves
2017-10-24 17:33:02,142 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:33:02,146 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: exec_dev_perform
-- BEGIN TIS changes --
- tis.device_outputs: Stack([])
+ tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.bel: {}
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
+ tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
- tis.private.plan: Stack([dev_perform(go_to_next, RecipehelpDevice, {preconfirm=None, postconfirm=True})])
+ tis.private.plan: Stack([])
-- END TIS changes --
2017-10-24 17:33:02,146 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:33:02,146 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:33:02,146 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:33:02,146 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 17:33:02,147 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:33:02,147 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:33:02,147 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:33:02,147 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:33:02,147 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 17:33:02,147 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, go to next, sender=DmeModule, reason=None)
2017-10-24 17:33:02,148 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 17:33:02,148 - session_2017-10-24T17_32_29_0 - INFO - running ISU module: select
2017-10-24 17:33:02,149 - session_2017-10-24T17_32_29_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f9b40820090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9b40143790>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508859182.1
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next')])
tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(go_to_next), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next')}
tis.shared.pm: {ICMMove(icm:per*pos:"next", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:33:02,149 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 17:33:02,153 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#])
- tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
+ tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
- tis.private.tmp.sys.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                                      ^^^^^^^^^^   ---  ^^^^^
+ tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
?                                      ^  ++++   ^^^^^^^^
- tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  -------------------
+ tis.private.tmp.sys.plan: Stack([])
-- END TIS changes --
2017-10-24 17:33:02,154 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_icm
2017-10-24 17:33:02,157 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
?                                 --------------------------------
+ tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(go_to_next, [], True, None))])
-- END TIS changes --
2017-10-24 17:33:02,157 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_move
2017-10-24 17:33:02,160 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: selectReport
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))])
- tis.private.agenda: OpenQueue([#, device_report(DeviceResultProposition(go_to_next, [], True, None))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 17:33:02,160 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_icm
2017-10-24 17:33:02,160 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_move
2017-10-24 17:33:02,160 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 17:33:02,163 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:33:02,163 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 17:33:02,163 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:set_timeout
2017-10-24 17:33:02,165 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-24 17:33:02,166 - session_2017-10-24T17_32_29_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')])
2017-10-24 17:33:02,166 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None))
2017-10-24 17:33:02,167 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, go to next, sender=DmeModule, reason=None))
2017-10-24 17:33:02,167 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, go to next, sender=DmeModule, reason=None)
2017-10-24 17:33:02,167 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": "go to next", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 17:33:02,168 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:33:02,169 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 17:33:02,170 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 17:33:02,170 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 17:33:02,171 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:33:02,171 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None)))
2017-10-24 17:33:02,172 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}, sender=TurnManager, reason=None))
2017-10-24 17:33:02,172 - session_2017-10-24T17_32_29_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 17:33:02,172 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:33:02,172 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), top_perform_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:33:02,173 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:33:02,174 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-24 17:33:02,174 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 17:33:02,174 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-24 17:33:02,174 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')
2017-10-24 17:33:02,174 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:acc*pos)
2017-10-24 17:33:02,175 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Move ICMMove(icm:acc*pos) generated as ''
2017-10-24 17:33:02,175 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Generating utterance part from move report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')
2017-10-24 17:33:02,176 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Move report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp') generated as u'Next'
2017-10-24 17:33:02,176 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Next], sender=GenerateModule, reason=None)
2017-10-24 17:33:02,177 - session_2017-10-24T17_32_29_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:33:02,179 - session_2017-10-24T17_32_29_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Next}, sender=IndependentGuiBackend, reason=None)
2017-10-24 17:33:02,180 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(go_to_next), device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(go_to_next), moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:33:02,180 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 17:33:02,181 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')])
2017-10-24 17:33:02,181 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-24 17:33:02,181 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 17:33:02,181 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)})
2017-10-24 17:33:02,182 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp')
2017-10-24 17:33:02,183 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f9b40150758>, <tdm.tdm_gui_protocol.Popup instance at 0x7f9b40150488>]
2017-10-24 17:33:02,184 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f9b40150758>, <tdm.tdm_gui_protocol.Popup instance at 0x7f9b40150488>], sender=GuiBackend, reason=None)
2017-10-24 17:33:02,184 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend posted event
2017-10-24 17:33:02,184 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Next], sender=GenerateModule, reason=None))
2017-10-24 17:33:02,185 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Next], sender=GenerateModule, reason=None)
2017-10-24 17:33:02,185 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "Next"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 17:33:02,185 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:33:02,186 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Next}, sender=IndependentGuiBackend, reason=None))
2017-10-24 17:33:02,186 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Next}, sender=IndependentGuiBackend, reason=None)
2017-10-24 17:33:02,187 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Next"}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-24 17:33:02,187 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:33:02,188 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f9b40150758>, <tdm.tdm_gui_protocol.Popup instance at 0x7f9b40150488>], sender=GuiBackend, reason=None))
2017-10-24 17:33:02,188 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.DeviceResult instance at 0x7f9b40150758>, <tdm.tdm_gui_protocol.Popup instance at 0x7f9b40150488>], sender=GuiBackend, reason=None)
2017-10-24 17:33:02,188 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.DeviceResult": {"action": "go_to_next", "result": true, "arguments": {}, "failure_reason": null}}, {"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Next"}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 17:33:02,189 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:33:02,189 - session_2017-10-24T17_32_29_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 17:33:02,193 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend received event {"content": ["", "Next"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 17:33:02,194 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 17:33:02,194 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, Next], sender=TextOutputComponent, reason=None))
2017-10-24 17:33:02,194 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, Next], sender=TextOutputComponent, reason=None)
2017-10-24 17:33:02,194 - session_2017-10-24T17_32_29_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 17:33:02,194 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, Next], sender=TurnManager, reason=None)
2017-10-24 17:33:02,195 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, Next], sender=TurnManager, reason=None)
2017-10-24 17:33:02,195 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, Next], sender=TurnManager, reason=None)
2017-10-24 17:33:02,195 - session_2017-10-24T17_32_29_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, Next], sender=TurnManager, reason=None))
2017-10-24 17:33:02,196 - session_2017-10-24T17_32_29_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f9b40820090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9b40143790>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508859182.2
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, Next], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), report(DeviceResultProposition(go_to_next, [], True, None))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(go_to_next), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next')}
tis.shared.pm: {ICMMove(icm:per*pos:"next", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:33:02,196 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:filterReadings
2017-10-24 17:33:02,197 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 17:33:02,197 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 17:33:02,202 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next')}
?            ^^
- tis.shared.pm: {ICMMove(icm:per*pos:"next", speaker=SYS, score=1.0), ICMMove(icm:sem*neg, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 17:33:02,203 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 17:33:02,203 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 17:33:02,206 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
- tis.device_outputs: Stack([DeviceResultProposition(go_to_next, [], True, None)])
+ tis.device_outputs: Stack([])
-- END TIS changes --
2017-10-24 17:33:02,206 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 17:33:02,206 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 17:33:02,206 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 17:33:02,206 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 17:33:02,206 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 17:33:02,206 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 17:33:02,206 - session_2017-10-24T17_32_29_0 - INFO - BEGIN integrate_moves
2017-10-24 17:33:02,206 - session_2017-10-24T17_32_29_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 17:33:02,207 - session_2017-10-24T17_32_29_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 17:33:02,207 - session_2017-10-24T17_32_29_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 17:33:02,207 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrate
2017-10-24 17:33:02,211 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 17:33:02,211 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 17:33:02,211 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:33:02,211 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 17:33:02,211 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:33:02,211 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrate
2017-10-24 17:33:02,214 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: integrateReport
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.com: {}
+ tis.shared.com: {device_activity_terminated(go_to_next)}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 17:33:02,214 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 17:33:02,214 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:33:02,217 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: downdatePerformOrHandle
-- BEGIN TIS changes --
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([jumpto(resolve(?X.say_step(X)))])
- tis.shared.goals: stackset([perform(go_to_next), perform(top)])
?                                     ---------------------
+ tis.shared.goals: stackset([perform(top)])
-- END TIS changes --
2017-10-24 17:33:02,217 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 17:33:02,217 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:33:02,217 - session_2017-10-24T17_32_29_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 17:33:02,217 - session_2017-10-24T17_32_29_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 17:33:02,217 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:33:02,217 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_action
2017-10-24 17:33:02,217 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:33:02,217 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:accommodate
2017-10-24 17:33:02,218 - session_2017-10-24T17_32_29_0 - INFO - breaking out of accommodate
2017-10-24 17:33:02,218 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:33:02,218 - session_2017-10-24T17_32_29_0 - INFO - END integrate_moves
2017-10-24 17:33:02,218 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:33:02,221 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: exec_jumpto
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.plan: Stack([jumpto(resolve(?X.say_step(X)))])
+ tis.private.plan: Stack([device_query(?X.say_step(X)), findout(?X.done(X)), forget(done)])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                             +++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 17:33:02,221 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:33:02,221 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:33:02,224 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: exec_dev_query
-- BEGIN TIS changes --
- tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
+ tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}
- tis.private.plan: Stack([device_query(?X.say_step(X)), findout(?X.done(X)), forget(done)])
?                          ------------------------------
+ tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
-- END TIS changes --
2017-10-24 17:33:02,225 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:33:02,225 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:33:02,225 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:33:02,225 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 17:33:02,225 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:33:02,226 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:33:02,226 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:33:02,226 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:33:02,226 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 17:33:02,229 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-24 17:33:02,229 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.}], sender=DmeModule, reason=None)
2017-10-24 17:33:02,229 - session_2017-10-24T17_32_29_0 - INFO - running ISU module: select
2017-10-24 17:33:02,230 - session_2017-10-24T17_32_29_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f9b40820090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9b40143790>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508859182.2
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, Next], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next')}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:33:02,230 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 17:33:02,235 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), device_report(DeviceResultProposition(go_to_next, [], True, None))])
- tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None)}
- tis.private.tmp.sys.com: {}
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}
+ tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
- tis.private.tmp.sys.goals: stackset([perform(go_to_next), perform(top)])
?                                       ------ ^^^^^^^^^^
+ tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                                      ++++++++++++++++++  ^^
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), forget(done)])
-- END TIS changes --
2017-10-24 17:33:02,235 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_action
2017-10-24 17:33:02,238 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.done(X))])
?                                                                  +++++++++++++++++++++
-- END TIS changes --
2017-10-24 17:33:02,238 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_icm
2017-10-24 17:33:02,241 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
?                                       +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.done(X))])
?                                   ---------------------------------
+ tis.private.agenda: OpenQueue([#, findout(?X.done(X))])
-- END TIS changes --
2017-10-24 17:33:02,242 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_move
2017-10-24 17:33:02,245 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))])
?                                                              +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.done(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 17:33:02,245 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_icm
2017-10-24 17:33:02,245 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_move
2017-10-24 17:33:02,245 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 17:33:02,247 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:33:02,248 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 17:33:02,248 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:set_timeout
2017-10-24 17:33:02,250 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-24 17:33:02,251 - session_2017-10-24T17_32_29_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')])
2017-10-24 17:33:02,251 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [, Next], sender=TurnManager, reason=None))
2017-10-24 17:33:02,251 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.}], sender=DmeModule, reason=None))
2017-10-24 17:33:02,251 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.}], sender=DmeModule, reason=None)
2017-10-24 17:33:02,251 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": "Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper."}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 17:33:02,252 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:33:02,252 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [, Next], sender=TurnManager, reason=None)))
2017-10-24 17:33:02,253 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(SYSTEM_MOVES, [, Next], sender=TurnManager, reason=None))
2017-10-24 17:33:02,253 - session_2017-10-24T17_32_29_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 17:33:02,254 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:33:02,254 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X)), forget(done)]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:33:02,256 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), forget(done)]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:33:02,256 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")})
2017-10-24 17:33:02,256 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 17:33:02,256 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.done(X)), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")})
2017-10-24 17:33:02,256 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.done(X)), ddd_name=u'recipehelp')
2017-10-24 17:33:02,256 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:loadplan)
2017-10-24 17:33:02,257 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Move ICMMove(icm:loadplan) generated as ''
2017-10-24 17:33:02,257 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.done(X)), ddd_name=u'recipehelp')
2017-10-24 17:33:02,257 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Move Move(ask(?X.done(X)), ddd_name=u'recipehelp') generated as u'Are you done?'
2017-10-24 17:33:02,257 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Are you done?], sender=GenerateModule, reason=None)
2017-10-24 17:33:02,259 - session_2017-10-24T17_32_29_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), forget(done)]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:33:02,261 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X)), forget(done)]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:33:02,261 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 17:33:02,261 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')])
2017-10-24 17:33:02,262 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")})
2017-10-24 17:33:02,262 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 17:33:02,262 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.done(X)), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")})
2017-10-24 17:33:02,262 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.done(X)), ddd_name=u'recipehelp')
2017-10-24 17:33:02,263 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f9b40150290>]
2017-10-24 17:33:02,263 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f9b40150290>], sender=GuiBackend, reason=None)
2017-10-24 17:33:02,263 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend posted event
2017-10-24 17:33:02,264 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Are you done?], sender=GenerateModule, reason=None))
2017-10-24 17:33:02,264 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, Are you done?], sender=GenerateModule, reason=None)
2017-10-24 17:33:02,264 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "Are you done?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 17:33:02,265 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:33:02,265 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f9b40150290>], sender=GuiBackend, reason=None))
2017-10-24 17:33:02,265 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f9b40150290>], sender=GuiBackend, reason=None)
2017-10-24 17:33:02,265 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 17:33:02,266 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:33:02,266 - session_2017-10-24T17_32_29_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 17:33:02,299 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend received event {"content": ["", "Are you done?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 17:33:02,299 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 17:33:02,300 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, Are you done?], sender=TextOutputComponent, reason=None))
2017-10-24 17:33:02,300 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, Are you done?], sender=TextOutputComponent, reason=None)
2017-10-24 17:33:02,300 - session_2017-10-24T17_32_29_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 17:33:02,300 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, Are you done?], sender=TurnManager, reason=None)
2017-10-24 17:33:02,300 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, Are you done?], sender=TurnManager, reason=None)
2017-10-24 17:33:02,300 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, Are you done?], sender=TurnManager, reason=None)
2017-10-24 17:33:02,301 - session_2017-10-24T17_32_29_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, Are you done?], sender=TurnManager, reason=None))
2017-10-24 17:33:02,302 - session_2017-10-24T17_32_29_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f9b40820090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9b40143790>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508859182.3
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, Are you done?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: go to next
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next')}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:33:02,302 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:filterReadings
2017-10-24 17:33:02,302 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 17:33:02,302 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 17:33:02,307 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(request(go_to_next), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'go to next')}
-- END TIS changes --
2017-10-24 17:33:02,307 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 17:33:02,307 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 17:33:02,309 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:33:02,310 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 17:33:02,310 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 17:33:02,310 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 17:33:02,310 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 17:33:02,310 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 17:33:02,310 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 17:33:02,310 - session_2017-10-24T17_32_29_0 - INFO - BEGIN integrate_moves
2017-10-24 17:33:02,310 - session_2017-10-24T17_32_29_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 17:33:02,310 - session_2017-10-24T17_32_29_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 17:33:02,310 - session_2017-10-24T17_32_29_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 17:33:02,310 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrate
2017-10-24 17:33:02,314 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 17:33:02,314 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 17:33:02,314 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:33:02,314 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 17:33:02,315 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:33:02,315 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrate
2017-10-24 17:33:02,319 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.done(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-24 17:33:02,319 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 17:33:02,319 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:33:02,319 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 17:33:02,320 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:33:02,320 - session_2017-10-24T17_32_29_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 17:33:02,320 - session_2017-10-24T17_32_29_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 17:33:02,320 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:33:02,320 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_action
2017-10-24 17:33:02,320 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:33:02,320 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:accommodate
2017-10-24 17:33:02,320 - session_2017-10-24T17_32_29_0 - INFO - breaking out of accommodate
2017-10-24 17:33:02,320 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:33:02,320 - session_2017-10-24T17_32_29_0 - INFO - END integrate_moves
2017-10-24 17:33:02,320 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:33:02,321 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:33:02,321 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 17:33:02,321 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:33:02,321 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:33:02,322 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:33:02,322 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:33:02,322 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 17:33:02,324 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: True
?                      ^^^
+ tis.timeout.enabled: False
?                      ^^^^
-- END TIS changes --
2017-10-24 17:33:02,325 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.}], sender=DmeModule, reason=None)
2017-10-24 17:33:02,325 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 17:33:02,325 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.}], sender=DmeModule, reason=None))
2017-10-24 17:33:02,325 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.}], sender=DmeModule, reason=None)
2017-10-24 17:33:02,325 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": "Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper."}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 17:33:02,326 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:33:02,326 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 17:33:02,326 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 17:33:02,327 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 17:33:02,327 - session_2017-10-24T17_32_29_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 17:33:03,499 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "no"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 17:33:03,499 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 17:33:03,500 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: no}], sender=TextInputComponent, reason=None))
2017-10-24 17:33:03,500 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: no}], sender=TextInputComponent, reason=None)
2017-10-24 17:33:03,500 - session_2017-10-24T17_32_29_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: no}], sender=TextInputComponent, reason=None)
2017-10-24 17:33:03,500 - session_2017-10-24T17_32_29_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "no"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 17:33:03,500 - session_2017-10-24T17_32_29_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 17:33:03,504 - session_2017-10-24T17_32_29_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 17:33:03,504 - session_2017-10-24T17_32_29_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])} for DDD 'recipehelp'
2017-10-24 17:33:03,504 - session_2017-10-24T17_32_29_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}
2017-10-24 17:33:03,504 - session_2017-10-24T17_32_29_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=InterpretModule, reason=None)
2017-10-24 17:33:03,505 - session_2017-10-24T17_32_29_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.No": {}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "no", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "no"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "no", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.CustomSort": {"_ontology_name": "RecipehelpOntology", "_dynamic": false, "_name": "Boolean"}}, "value": "False"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "no", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 17:33:03,505 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: no}], sender=TextInputComponent, reason=None)
2017-10-24 17:33:03,505 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=InterpretModule, reason=None))
2017-10-24 17:33:03,505 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=InterpretModule, reason=None)
2017-10-24 17:33:03,505 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 17:33:03,505 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 17:33:03,505 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-24 17:33:03,506 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:33:03,506 - session_2017-10-24T17_32_29_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-24 17:33:03,506 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
2017-10-24 17:33:03,507 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
2017-10-24 17:33:03,507 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
2017-10-24 17:33:03,508 - session_2017-10-24T17_32_29_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None))
2017-10-24 17:33:03,509 - session_2017-10-24T17_32_29_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f9b40820090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9b40143790>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508859183.51
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.done(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: no
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([?X.done(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:33:03,509 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:filterReadings
2017-10-24 17:33:03,514 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                        ^^^^                                                                                                             ^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ -------------------------------------------------------------------------
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                        ^^^^^                                                                                                             ^^^^^^^^^^^^^^ ^^^
- tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}
?                                                                                                                                                                                       ^^^^                                                                                                             -------------------------------------------------------------------------------------------------------------------------------------------
+ tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}
?                                                                                                                                                                                       ^^^^^
-- END TIS changes --
2017-10-24 17:33:03,514 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:filterReadings
2017-10-24 17:33:03,519 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                                                                                                 ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                                                                                                 ^
- tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}
?                                                                                                                                                                                                                                                                ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'no'), #])}
?                                                                                                                                                                                                                                                                ^
-- END TIS changes --
2017-10-24 17:33:03,523 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: uprankQUDResolving
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                                                                                                 ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                                                                                                 ^^
- tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'no'), #])}
?                                                                                                                                                                                                                                                                ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])}
?                                                                                                                                                                                                                                                                ^^
-- END TIS changes --
2017-10-24 17:33:03,524 - session_2017-10-24T17_32_29_0 - INFO - hypotheses reranked: OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #]) upranked to position 1 from position 1, replacing OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])
2017-10-24 17:33:03,524 - session_2017-10-24T17_32_29_0 - INFO - Could not log rerank
2017-10-24 17:33:03,524 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 17:33:03,528 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')])
- tis.score: 1.0
?              ^
+ tis.score: 1.44
?              ^^
-- END TIS changes --
2017-10-24 17:33:03,528 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 17:33:03,533 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), report(DeviceResultProposition(go_to_next, [], True, None), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 17:33:03,533 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 17:33:03,534 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 17:33:03,536 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:33:03,536 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 17:33:03,536 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 17:33:03,543 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.bel: {}
- tis.private.tmp.usr.com: {}
+ tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}
+ tis.private.tmp.usr.com: {device_activity_terminated(go_to_next)}
- tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                                                      ^  ^
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
?                                                      ^ ++++++++++++++++++++ ^^^^^^
- tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
?                                             ^ ^^
+ tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
?                                             ^ ^^    ++++++++++++++
- tis.private.tmp.usr.qud: stackset([])
+ tis.private.tmp.usr.qud: stackset([?X.done(X)])
?                                    ++++++++++
-- END TIS changes --
2017-10-24 17:33:03,543 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 17:33:03,543 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 17:33:03,543 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 17:33:03,543 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 17:33:03,543 - session_2017-10-24T17_32_29_0 - INFO - BEGIN integrate_moves
2017-10-24 17:33:03,543 - session_2017-10-24T17_32_29_0 - INFO - init_shift: OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])
2017-10-24 17:33:03,543 - session_2017-10-24T17_32_29_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 17:33:03,544 - session_2017-10-24T17_32_29_0 - INFO - init_shift: OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])
2017-10-24 17:33:03,544 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrate
2017-10-24 17:33:03,548 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: integrateUsrAnswer
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.nim: OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])
+ tis.private.nim: OpenQueue([#])
- tis.recent_commitments: {}
+ tis.recent_commitments: {done(False)}
?                          +++++++++++
- tis.shared.com: {device_activity_terminated(go_to_next)}
+ tis.shared.com: {device_activity_terminated(go_to_next), done(False)}
?                                                        +++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')}
-- END TIS changes --
2017-10-24 17:33:03,548 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 17:33:03,548 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:33:03,552 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {device_activity_terminated(go_to_next), done(False)}
+ tis.shared.com: {device_activity_terminated(go_to_next), done(False), resolved(?X.done(X))}
?                                                                     ++++++++++++++++++++++
- tis.shared.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
?                             --------------------------
+ tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
-- END TIS changes --
2017-10-24 17:33:03,553 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 17:33:03,556 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: removeFindout
-- BEGIN TIS changes --
- tis.private.plan: Stack([findout(?X.done(X)), forget(done)])
?                           ---------------------
+ tis.private.plan: Stack([forget(done)])
-- END TIS changes --
2017-10-24 17:33:03,556 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:33:03,557 - session_2017-10-24T17_32_29_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 17:33:03,557 - session_2017-10-24T17_32_29_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 17:33:03,557 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:33:03,557 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_action
2017-10-24 17:33:03,558 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:33:03,558 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:accommodate
2017-10-24 17:33:03,558 - session_2017-10-24T17_32_29_0 - INFO - breaking out of accommodate
2017-10-24 17:33:03,558 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:33:03,558 - session_2017-10-24T17_32_29_0 - INFO - END integrate_moves
2017-10-24 17:33:03,558 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:33:03,562 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: exec_forget
-- BEGIN TIS changes --
- tis.private.plan: Stack([forget(done)])
?                          ------------
+ tis.private.plan: Stack([])
- tis.shared.com: {device_activity_terminated(go_to_next), done(False), resolved(?X.done(X))}
?                                                        -----------------------------------
+ tis.shared.com: {device_activity_terminated(go_to_next)}
-- END TIS changes --
2017-10-24 17:33:03,562 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:33:03,563 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:33:03,563 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:33:03,563 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 17:33:03,566 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.done(X)])
?                           ----------
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 17:33:03,566 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:33:03,567 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:33:03,567 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:33:03,567 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:33:03,567 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 17:33:03,567 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(COMMITMENTS_UPDATE, done(False), sender=DmeModule, reason=None)
2017-10-24 17:33:03,567 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, no, sender=DmeModule, reason=None)
2017-10-24 17:33:03,568 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.}], sender=DmeModule, reason=None)
2017-10-24 17:33:03,568 - session_2017-10-24T17_32_29_0 - INFO - running ISU module: select
2017-10-24 17:33:03,569 - session_2017-10-24T17_32_29_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f9b40820090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9b40143790>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508859183.51
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')])
tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}
tis.private.tmp.usr.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: no
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:33:03,569 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 17:33:03,572 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
?                                                                ^ ^^^^^^
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
?                                                                ^^^^^ ^
- tis.private.tmp.sys.plan: Stack([findout(?X.done(X)), forget(done)])
+ tis.private.tmp.sys.plan: Stack([])
-- END TIS changes --
2017-10-24 17:33:03,573 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_action
2017-10-24 17:33:03,575 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: selectRespond
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
?                                                                 +++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 17:33:03,576 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_icm
2017-10-24 17:33:03,579 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
?                                   --------------------------------
+ tis.private.agenda: OpenQueue([#, respond(?X.say_step(X))])
-- END TIS changes --
2017-10-24 17:33:03,579 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_move
2017-10-24 17:33:03,582 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: selectAnswer
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")))])
- tis.private.agenda: OpenQueue([#, respond(?X.say_step(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 17:33:03,582 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_icm
2017-10-24 17:33:03,582 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_move
2017-10-24 17:33:03,583 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 17:33:03,585 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:33:03,585 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 17:33:03,585 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:set_timeout
2017-10-24 17:33:03,588 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-24 17:33:03,588 - session_2017-10-24T17_32_29_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp')])
2017-10-24 17:33:03,588 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None))
2017-10-24 17:33:03,589 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(COMMITMENTS_UPDATE, done(False), sender=DmeModule, reason=None))
2017-10-24 17:33:03,589 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(COMMITMENTS_UPDATE, done(False), sender=DmeModule, reason=None)
2017-10-24 17:33:03,589 - session_2017-10-24T17_32_29_0 - DEBUG - DeviceManager handles Event(COMMITMENTS_UPDATE, done(False), sender=DmeModule, reason=None)
2017-10-24 17:33:03,589 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, no, sender=DmeModule, reason=None))
2017-10-24 17:33:03,589 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, no, sender=DmeModule, reason=None)
2017-10-24 17:33:03,589 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": "no", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 17:33:03,590 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:33:03,590 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.}], sender=DmeModule, reason=None))
2017-10-24 17:33:03,590 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.}], sender=DmeModule, reason=None)
2017-10-24 17:33:03,591 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": "Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper."}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 17:33:03,591 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:33:03,592 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)))
2017-10-24 17:33:03,592 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None))
2017-10-24 17:33:03,593 - session_2017-10-24T17_32_29_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 17:33:03,593 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:33:03,593 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp')]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:33:03,595 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:33:03,595 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")})
2017-10-24 17:33:03,595 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp')
2017-10-24 17:33:03,595 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Generating utterance part from move Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp')
2017-10-24 17:33:03,597 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule: Move Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp') generated as u'Ok Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper..'
2017-10-24 17:33:03,597 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper..], sender=GenerateModule, reason=None)
2017-10-24 17:33:03,598 - session_2017-10-24T17_32_29_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:33:03,599 - session_2017-10-24T17_32_29_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Ok Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper..}, sender=IndependentGuiBackend, reason=None)
2017-10-24 17:33:03,601 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp')]), com: {device_activity_terminated(go_to_next)}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:33:03,601 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 17:33:03,602 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp')])
2017-10-24 17:33:03,602 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp'), facts={device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")})
2017-10-24 17:33:03,602 - session_2017-10-24T17_32_29_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp')
2017-10-24 17:33:03,603 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.Popup instance at 0x7f9b400eeab8>]
2017-10-24 17:33:03,604 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f9b400eeab8>], sender=GuiBackend, reason=None)
2017-10-24 17:33:03,604 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend posted event
2017-10-24 17:33:03,604 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper..], sender=GenerateModule, reason=None))
2017-10-24 17:33:03,604 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper..], sender=GenerateModule, reason=None)
2017-10-24 17:33:03,604 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Ok Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.."], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 17:33:03,605 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:33:03,605 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Ok Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper..}, sender=IndependentGuiBackend, reason=None))
2017-10-24 17:33:03,605 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Ok Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper..}, sender=IndependentGuiBackend, reason=None)
2017-10-24 17:33:03,606 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Ok Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.."}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-24 17:33:03,607 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:33:03,607 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f9b400eeab8>], sender=GuiBackend, reason=None))
2017-10-24 17:33:03,608 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f9b400eeab8>], sender=GuiBackend, reason=None)
2017-10-24 17:33:03,609 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Ok Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.."}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 17:33:03,610 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:33:03,611 - session_2017-10-24T17_32_29_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 17:33:03,612 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend received event {"content": ["Ok Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.."], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 17:33:03,612 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 17:33:03,613 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Ok Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper..], sender=TextOutputComponent, reason=None))
2017-10-24 17:33:03,613 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Ok Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper..], sender=TextOutputComponent, reason=None)
2017-10-24 17:33:03,613 - session_2017-10-24T17_32_29_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 17:33:03,614 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Ok Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper..], sender=TurnManager, reason=None)
2017-10-24 17:33:03,614 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Ok Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper..], sender=TurnManager, reason=None)
2017-10-24 17:33:03,614 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Ok Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper..], sender=TurnManager, reason=None)
2017-10-24 17:33:03,615 - session_2017-10-24T17_32_29_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Ok Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper..], sender=TurnManager, reason=None))
2017-10-24 17:33:03,616 - session_2017-10-24T17_32_29_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f9b40820090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9b40143790>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508859183.61
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Ok Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper..], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}
tis.private.tmp.usr.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: no
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {device_activity_terminated(go_to_next)}
tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:33:03,616 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:filterReadings
2017-10-24 17:33:03,616 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 17:33:03,616 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 17:33:03,623 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')}
?            ^^
- tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 17:33:03,623 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 17:33:03,623 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 17:33:03,625 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:33:03,625 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 17:33:03,626 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 17:33:03,626 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 17:33:03,626 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 17:33:03,626 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 17:33:03,626 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 17:33:03,626 - session_2017-10-24T17_32_29_0 - INFO - BEGIN integrate_moves
2017-10-24 17:33:03,626 - session_2017-10-24T17_32_29_0 - INFO - init_shift: OpenQueue([Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 17:33:03,626 - session_2017-10-24T17_32_29_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 17:33:03,626 - session_2017-10-24T17_32_29_0 - INFO - init_shift: OpenQueue([Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 17:33:03,626 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrate
2017-10-24 17:33:03,629 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: integrateSysAnswer
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.com: {device_activity_terminated(go_to_next)}
+ tis.shared.com: {device_activity_terminated(go_to_next), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 17:33:03,630 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 17:33:03,630 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:33:03,633 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {device_activity_terminated(go_to_next), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}
+ tis.shared.com: {device_activity_terminated(go_to_next), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper."), resolved(?X.say_step(X))}
?                                                                                                                                                                                          ++++++++++++++++++++++++++
- tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                             -------------------------
+ tis.shared.goals: stackset([perform(top)])
-- END TIS changes --
2017-10-24 17:33:03,633 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 17:33:03,633 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:33:03,634 - session_2017-10-24T17_32_29_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 17:33:03,634 - session_2017-10-24T17_32_29_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 17:33:03,634 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:33:03,634 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_action
2017-10-24 17:33:03,634 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:33:03,634 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:accommodate
2017-10-24 17:33:03,634 - session_2017-10-24T17_32_29_0 - INFO - breaking out of accommodate
2017-10-24 17:33:03,634 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:33:03,635 - session_2017-10-24T17_32_29_0 - INFO - END integrate_moves
2017-10-24 17:33:03,635 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:33:03,635 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:33:03,635 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 17:33:03,635 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:33:03,635 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:33:03,635 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:33:03,636 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:33:03,636 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 17:33:03,638 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-24 17:33:03,638 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.}], sender=DmeModule, reason=None)
2017-10-24 17:33:03,639 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Ok Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper..], latest_moves: OpenQueue([#, Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 17:33:03,639 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.}], sender=DmeModule, reason=None))
2017-10-24 17:33:03,639 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value: Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.}], sender=DmeModule, reason=None)
2017-10-24 17:33:03,639 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": "Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper."}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 17:33:03,639 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:33:03,640 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Ok Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper..], latest_moves: OpenQueue([#, Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None))
2017-10-24 17:33:03,640 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Ok Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper..], latest_moves: OpenQueue([#, Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 17:33:03,640 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Ok Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper..], latest_moves: OpenQueue([#, Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 17:33:03,641 - session_2017-10-24T17_32_29_0 - INFO - starting TIMEOUT timer: <tdm.maharani.scheduler.DelayedCall instance at 0x7f9b400eefc8>:1.0
2017-10-24 17:33:03,641 - session_2017-10-24T17_32_29_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 17:33:04,641 - session_2017-10-24T17_32_29_0 - DEBUG - Timeout fired
2017-10-24 17:33:04,641 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager posts Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 17:33:04,641 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 17:33:04,641 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule handles Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 17:33:04,641 - session_2017-10-24T17_32_29_0 - INFO - running ISU module: update (Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 17:33:04,643 - session_2017-10-24T17_32_29_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f9b40820090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9b40143790>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508859184.64
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}
tis.private.tmp.usr.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: no
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {device_activity_terminated(go_to_next), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper."), resolved(?X.say_step(X))}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:33:04,643 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:filterReadings
2017-10-24 17:33:04,643 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 17:33:04,646 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-24 17:33:04,646 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 17:33:04,650 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')}
-- END TIS changes --
2017-10-24 17:33:04,650 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 17:33:04,650 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 17:33:04,652 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:33:04,653 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 17:33:04,653 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 17:33:04,653 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 17:33:04,653 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 17:33:04,653 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 17:33:04,653 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 17:33:04,654 - session_2017-10-24T17_32_29_0 - INFO - BEGIN integrate_moves
2017-10-24 17:33:04,654 - session_2017-10-24T17_32_29_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 17:33:04,654 - session_2017-10-24T17_32_29_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 17:33:04,654 - session_2017-10-24T17_32_29_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 17:33:04,654 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:integrate
2017-10-24 17:33:04,654 - session_2017-10-24T17_32_29_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 17:33:04,654 - session_2017-10-24T17_32_29_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 17:33:04,655 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:33:04,655 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_action
2017-10-24 17:33:04,655 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:33:04,655 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:accommodate
2017-10-24 17:33:04,655 - session_2017-10-24T17_32_29_0 - INFO - breaking out of accommodate
2017-10-24 17:33:04,655 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_reject
2017-10-24 17:33:04,655 - session_2017-10-24T17_32_29_0 - INFO - END integrate_moves
2017-10-24 17:33:04,655 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:33:04,658 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: recoverPerformPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 17:33:04,658 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:33:04,659 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:33:04,661 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}
+ tis.private.bel: {}
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
- tis.shared.com: {device_activity_terminated(go_to_next), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper."), resolved(?X.say_step(X))}
+ tis.shared.com: {}
-- END TIS changes --
2017-10-24 17:33:04,661 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:33:04,661 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:33:04,662 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:33:04,662 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 17:33:04,662 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 17:33:04,662 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:exec_plan
2017-10-24 17:33:04,662 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:load_plan
2017-10-24 17:33:04,663 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 17:33:04,663 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 17:33:04,663 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 17:33:04,663 - session_2017-10-24T17_32_29_0 - INFO - running ISU module: select
2017-10-24 17:33:04,664 - session_2017-10-24T17_32_29_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f9b40820090>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9b40143790>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508859184.64
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}
tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}
tis.private.tmp.usr.com: {device_activity_terminated(go_to_next)}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X)), forget(done)])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: no
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: perform(go_to_next)
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 17:33:04,664 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 17:33:04,669 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
?                                                                 ^^^  ^
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
?                                                                +++ ^^^^ +++ ^^^^^^^
- tis.private.tmp.sys.bel: {device_activity_terminated(go_to_next), DeviceResultProposition(go_to_next, [], True, None), say_step("Step three: add the tomatoes and stock. Cook slowly for two hours. Season with salt and freshly ground black pepper.")}
- tis.private.tmp.sys.com: {device_activity_terminated(go_to_next)}
+ tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.com: {}
- tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                                      -------------------------
+ tis.private.tmp.sys.goals: stackset([perform(top)])
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-24 17:33:04,669 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_action
2017-10-24 17:33:04,672 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
?                                                                              +++++++++++++++++++++
-- END TIS changes --
2017-10-24 17:33:04,672 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_icm
2017-10-24 17:33:04,675 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 17:33:04,675 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_move
2017-10-24 17:33:04,678 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
?                                                                          +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 17:33:04,678 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_icm
2017-10-24 17:33:04,678 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:select_move
2017-10-24 17:33:04,678 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 17:33:04,680 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 17:33:04,680 - session_2017-10-24T17_32_29_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 17:33:04,680 - session_2017-10-24T17_32_29_0 - DEBUG - rulegroup:set_timeout
2017-10-24 17:33:04,683 - session_2017-10-24T17_32_29_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-24 17:33:04,683 - session_2017-10-24T17_32_29_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 17:33:04,683 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 17:33:19,017 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 17:33:19,017 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(STOP, None, sender=Backend, reason=None))
2017-10-24 17:33:19,017 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(STOP, None, sender=Backend, reason=None)
2017-10-24 17:33:19,017 - session_2017-10-24T17_32_29_0 - DEBUG - InterpretModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 17:33:19,018 - session_2017-10-24T17_32_29_0 - DEBUG - InterpretModule posts Event(STOPPED, None, sender=InterpretModule, reason=None)
2017-10-24 17:33:19,018 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 17:33:19,018 - session_2017-10-24T17_32_29_0 - DEBUG - DmeModule posts Event(STOPPED, None, sender=DmeModule, reason=None)
2017-10-24 17:33:19,019 - session_2017-10-24T17_32_29_0 - DEBUG - DeviceManager handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 17:33:19,019 - session_2017-10-24T17_32_29_0 - DEBUG - DeviceManager posts Event(STOPPED, None, sender=DeviceManager, reason=None)
2017-10-24 17:33:19,019 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 17:33:19,019 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule posts Event(STOPPED, None, sender=GenerateModule, reason=None)
2017-10-24 17:33:19,019 - session_2017-10-24T17_32_29_0 - DEBUG - IndependentGuiBackend handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 17:33:19,019 - session_2017-10-24T17_32_29_0 - DEBUG - IndependentGuiBackend posts Event(STOPPED, None, sender=IndependentGuiBackend, reason=None)
2017-10-24 17:33:19,020 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 17:33:19,020 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend posts Event(STOPPED, None, sender=GuiBackend, reason=None)
2017-10-24 17:33:19,020 - session_2017-10-24T17_32_29_0 - DEBUG - CogloadModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 17:33:19,020 - session_2017-10-24T17_32_29_0 - DEBUG - CogloadModule posts Event(STOPPED, None, sender=CogloadModule, reason=None)
2017-10-24 17:33:19,020 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 17:33:19,020 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 17:33:19,020 - session_2017-10-24T17_32_29_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 17:33:19,021 - session_2017-10-24T17_32_29_0 - DEBUG - Sent.
2017-10-24 17:33:19,021 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None)))
2017-10-24 17:33:19,021 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 17:33:19,021 - session_2017-10-24T17_32_29_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 17:33:19,022 - session_2017-10-24T17_32_29_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:33:19,022 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:33:19,023 - session_2017-10-24T17_32_29_0 - DEBUG - GenerateModule ignores Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:33:19,024 - session_2017-10-24T17_32_29_0 - DEBUG - IndependentGuiBackend ignores Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:33:19,025 - session_2017-10-24T17_32_29_0 - DEBUG - GuiBackend ignores Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: perform(go_to_next), current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 17:33:19,025 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=InterpretModule, reason=None))
2017-10-24 17:33:19,025 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=InterpretModule, reason=None)
2017-10-24 17:33:19,025 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=DmeModule, reason=None))
2017-10-24 17:33:19,025 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=DmeModule, reason=None)
2017-10-24 17:33:19,025 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=DeviceManager, reason=None))
2017-10-24 17:33:19,026 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=DeviceManager, reason=None)
2017-10-24 17:33:19,026 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=GenerateModule, reason=None))
2017-10-24 17:33:19,026 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=GenerateModule, reason=None)
2017-10-24 17:33:19,026 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=IndependentGuiBackend, reason=None))
2017-10-24 17:33:19,026 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=IndependentGuiBackend, reason=None)
2017-10-24 17:33:19,026 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=GuiBackend, reason=None))
2017-10-24 17:33:19,026 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=GuiBackend, reason=None)
2017-10-24 17:33:19,026 - session_2017-10-24T17_32_29_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=CogloadModule, reason=None))
2017-10-24 17:33:19,026 - session_2017-10-24T17_32_29_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=CogloadModule, reason=None)
