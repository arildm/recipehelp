2017-10-24 12:35:55,354 - session_2017-10-24T12_35_55_0 - DEBUG - Backend()
2017-10-24 12:35:55,355 - session_2017-10-24T12_35_55_0 - DEBUG - Backend.initialize()
2017-10-24 12:35:55,387 - session_2017-10-24T12_35_55_0 - DEBUG - Backend.add_module(DmeModule, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f9214043fd0>>, False])
2017-10-24 12:35:55,387 - session_2017-10-24T12_35_55_0 - DEBUG - Backend.add_module(GenerateModule, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f9214043fd0>>, 'eng'])
2017-10-24 12:35:55,387 - session_2017-10-24T12_35_55_0 - DEBUG - Backend.add_module(DeviceManager, args=[])
2017-10-24 12:35:55,388 - session_2017-10-24T12_35_55_0 - DEBUG - Backend.add_module(CogloadModule, args=[])
2017-10-24 12:35:55,388 - session_2017-10-24T12_35_55_0 - INFO - TurnManager.enter_state(IDLE, __init__) (previous state was None)
2017-10-24 12:35:55,388 - session_2017-10-24T12_35_55_0 - DEBUG - Backend.add_module(GuiBackend, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f9214043fd0>>, True, 'disabled'])
2017-10-24 12:35:55,389 - session_2017-10-24T12_35_55_0 - DEBUG - Backend.add_module(IndependentGuiBackend, args=[<bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f9214043fd0>>])
2017-10-24 12:35:55,389 - session_2017-10-24T12_35_55_0 - DEBUG - Backend.add_module(InterpretModule, args=[<bound method Backend.get_device_manager of <tdm.backend.Backend object at 0x7f9214043fd0>>, <bound method Backend.get_tis of <tdm.backend.Backend object at 0x7f9214043fd0>>, 'eng', False, True])
2017-10-24 12:35:55,389 - session_2017-10-24T12_35_55_0 - DEBUG - Backend initialized
2017-10-24 12:35:55,389 - session_2017-10-24T12_35_55_0 - DEBUG - Backend started in directory '/home/gusmatssar/recipedialogue/tdm'
2017-10-24 12:35:55,389 - session_2017-10-24T12_35_55_0 - DEBUG - Backend uses TDM version '5.0.0'
2017-10-24 12:35:55,389 - session_2017-10-24T12_35_55_0 - DEBUG - Backend uses backend config {u'active_ddd': u'recipehelp', u'ddds': [u'recipehelp'], u'asr': u'none', u'use_recognition_profile': False, u'use_word_list_correction': False, u'supported_languages': [u'eng'], u'repeat_questions': False}
2017-10-24 12:35:55,389 - session_2017-10-24T12_35_55_0 - DEBUG - Backend uses language 'eng'
2017-10-24 12:35:55,389 - session_2017-10-24T12_35_55_0 - DEBUG - running module InterpretModule
2017-10-24 12:35:55,389 - session_2017-10-24T12_35_55_0 - DEBUG - running module DmeModule
2017-10-24 12:35:55,391 - session_2017-10-24T12_35_55_0 - DEBUG - running module DeviceManager
2017-10-24 12:35:55,391 - session_2017-10-24T12_35_55_0 - DEBUG - running module GenerateModule
2017-10-24 12:35:55,391 - session_2017-10-24T12_35_55_0 - DEBUG - running module IndependentGuiBackend
2017-10-24 12:35:55,391 - session_2017-10-24T12_35_55_0 - DEBUG - running module GuiBackend
2017-10-24 12:35:55,391 - session_2017-10-24T12_35_55_0 - DEBUG - running module CogloadModule
2017-10-24 12:35:55,392 - session_2017-10-24T12_35_55_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 12:35:55,393 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 12:35:55,393 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(REGISTER_BACKEND, None, sender=Backend, reason=None))
2017-10-24 12:35:55,393 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(REGISTER_BACKEND, None, sender=Backend, reason=None)
2017-10-24 12:35:55,394 - session_2017-10-24T12_35_55_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "Backend", "_reason": null, "event_type": "REGISTER_BACKEND"}
2017-10-24 12:35:55,394 - session_2017-10-24T12_35_55_0 - DEBUG - Sent.
2017-10-24 12:35:55,394 - session_2017-10-24T12_35_55_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 12:35:55,425 - session_2017-10-24T12_35_55_0 - DEBUG - Backend communication: Backend received event {"content": null, "_sender": "Frontend", "_reason": null, "event_type": "FRONTEND_READY"}
2017-10-24 12:35:55,425 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 12:35:55,426 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(FRONTEND_READY, None, sender=Frontend, reason=None))
2017-10-24 12:35:55,427 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(FRONTEND_READY, None, sender=Frontend, reason=None)
2017-10-24 12:35:55,427 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(BACKEND_READY, None, sender=Backend, reason=None))
2017-10-24 12:35:55,427 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(BACKEND_READY, None, sender=Backend, reason=None)
2017-10-24 12:35:55,427 - session_2017-10-24T12_35_55_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "Backend", "_reason": null, "event_type": "BACKEND_READY"}
2017-10-24 12:35:55,428 - session_2017-10-24T12_35_55_0 - DEBUG - Sent.
2017-10-24 12:35:55,428 - session_2017-10-24T12_35_55_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 12:35:55,433 - session_2017-10-24T12_35_55_0 - DEBUG - Backend communication: Backend received event {"content": null, "_sender": "Frontend", "_reason": null, "event_type": "START"}
2017-10-24 12:35:55,434 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 12:35:55,434 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(START, None, sender=Frontend, reason=None))
2017-10-24 12:35:55,434 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(START, None, sender=Frontend, reason=None)
2017-10-24 12:35:55,434 - session_2017-10-24T12_35_55_0 - DEBUG - InterpretModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 12:35:55,434 - session_2017-10-24T12_35_55_0 - DEBUG - DmeModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 12:35:55,435 - session_2017-10-24T12_35_55_0 - DEBUG - DmeModule posts Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-24 12:35:55,435 - session_2017-10-24T12_35_55_0 - INFO - running ISU module: update (Event(START, None, sender=Frontend, reason=None))
2017-10-24 12:35:55,436 - session_2017-10-24T12_35_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f921380d050>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9211929890>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508841355.44
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(START, None, sender=Frontend, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: None
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([do(top)])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: None
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:35:55,436 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:35:55,437 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 12:35:55,437 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 12:35:55,439 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:35:55,439 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 12:35:55,439 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 12:35:55,441 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:35:55,441 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 12:35:55,441 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 12:35:55,441 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 12:35:55,442 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 12:35:55,442 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 12:35:55,442 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 12:35:55,442 - session_2017-10-24T12_35_55_0 - INFO - BEGIN integrate_moves
2017-10-24 12:35:55,442 - session_2017-10-24T12_35_55_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 12:35:55,442 - session_2017-10-24T12_35_55_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 12:35:55,442 - session_2017-10-24T12_35_55_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 12:35:55,442 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:integrate
2017-10-24 12:35:55,442 - session_2017-10-24T12_35_55_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 12:35:55,442 - session_2017-10-24T12_35_55_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 12:35:55,442 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:35:55,443 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_action
2017-10-24 12:35:55,443 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:35:55,443 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:accommodate
2017-10-24 12:35:55,443 - session_2017-10-24T12_35_55_0 - INFO - breaking out of accommodate
2017-10-24 12:35:55,443 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:35:55,443 - session_2017-10-24T12_35_55_0 - INFO - END integrate_moves
2017-10-24 12:35:55,443 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:35:55,443 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:35:55,446 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: findActionPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.plan: Stack([do(top)])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 12:35:55,446 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:35:55,448 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 12:35:55,448 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:35:55,448 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:35:55,448 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:35:55,449 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 12:35:55,449 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:35:55,449 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:35:55,449 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:35:55,450 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:35:55,450 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 12:35:55,450 - session_2017-10-24T12_35_55_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:35:55,450 - session_2017-10-24T12_35_55_0 - INFO - running ISU module: select
2017-10-24 12:35:55,451 - session_2017-10-24T12_35_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f921380d050>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9211929890>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508841355.44
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(START, None, sender=Frontend, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: None
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: None
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:35:55,451 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 12:35:55,455 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
- tis.private.tmp.sys.goals: stackset([])
+ tis.private.tmp.sys.goals: stackset([perform(top)])
?                                      ++++++++++++
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-24 12:35:55,455 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_action
2017-10-24 12:35:55,457 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.goal(X))])
?                                                                  +++++++++++++++++++++
-- END TIS changes --
2017-10-24 12:35:55,457 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_icm
2017-10-24 12:35:55,460 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
?                                       +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.goal(X))])
?                                   ---------------------------------
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 12:35:55,460 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_move
2017-10-24 12:35:55,463 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
?                                                              +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 12:35:55,463 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_icm
2017-10-24 12:35:55,463 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_move
2017-10-24 12:35:55,463 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 12:35:55,466 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:35:55,466 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 12:35:55,466 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:set_timeout
2017-10-24 12:35:55,468 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: None
?                       ^^^^
+ tis.timeout.duration: 5.0
?                       ^^^
-- END TIS changes --
2017-10-24 12:35:55,468 - session_2017-10-24T12_35_55_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 12:35:55,469 - session_2017-10-24T12_35_55_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None))
2017-10-24 12:35:55,469 - session_2017-10-24T12_35_55_0 - DEBUG - DeviceManager handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 12:35:55,469 - session_2017-10-24T12_35_55_0 - DEBUG - GenerateModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 12:35:55,469 - session_2017-10-24T12_35_55_0 - DEBUG - IndependentGuiBackend handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 12:35:55,469 - session_2017-10-24T12_35_55_0 - DEBUG - GuiBackend handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 12:35:55,469 - session_2017-10-24T12_35_55_0 - DEBUG - CogloadModule handles Event(START, None, sender=Frontend, reason=None)
2017-10-24 12:35:55,469 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None))
2017-10-24 12:35:55,469 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-24 12:35:55,470 - session_2017-10-24T12_35_55_0 - DEBUG - IndependentGuiBackend handles Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-24 12:35:55,470 - session_2017-10-24T12_35_55_0 - DEBUG - GuiBackend handles Event(SET_DDD, {ddd_name: recipehelp, language_code: eng}, sender=DmeModule, reason=None)
2017-10-24 12:35:55,470 - session_2017-10-24T12_35_55_0 - DEBUG - Backend communication: Backend is sending event {"content": {"ddd_name": "recipehelp", "language_code": "eng"}, "_sender": "DmeModule", "_reason": null, "event_type": "SET_DDD"}
2017-10-24 12:35:55,470 - session_2017-10-24T12_35_55_0 - DEBUG - Sent.
2017-10-24 12:35:55,470 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 12:35:55,470 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:35:55,471 - session_2017-10-24T12_35_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 12:35:55,472 - session_2017-10-24T12_35_55_0 - DEBUG - Sent.
2017-10-24 12:35:55,472 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None)))
2017-10-24 12:35:55,472 - session_2017-10-24T12_35_55_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(START, None, sender=Frontend, reason=None))
2017-10-24 12:35:55,473 - session_2017-10-24T12_35_55_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 12:35:55,473 - session_2017-10-24T12_35_55_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:35:55,473 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:35:55,474 - session_2017-10-24T12_35_55_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:35:55,474 - session_2017-10-24T12_35_55_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-24 12:35:55,474 - session_2017-10-24T12_35_55_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 12:35:55,474 - session_2017-10-24T12_35_55_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 12:35:55,474 - session_2017-10-24T12_35_55_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 12:35:55,474 - session_2017-10-24T12_35_55_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:loadplan)
2017-10-24 12:35:55,475 - session_2017-10-24T12_35_55_0 - DEBUG - GenerateModule: Move ICMMove(icm:loadplan) generated as ''
2017-10-24 12:35:55,475 - session_2017-10-24T12_35_55_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 12:35:55,476 - session_2017-10-24T12_35_55_0 - DEBUG - GenerateModule: Move Move(ask(?X.goal(X)), ddd_name=u'recipehelp') generated as u'What would you like to do?'
2017-10-24 12:35:55,476 - session_2017-10-24T12_35_55_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 12:35:55,477 - session_2017-10-24T12_35_55_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:35:55,478 - session_2017-10-24T12_35_55_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:35:55,478 - session_2017-10-24T12_35_55_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 12:35:55,478 - session_2017-10-24T12_35_55_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 12:35:55,478 - session_2017-10-24T12_35_55_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={})
2017-10-24 12:35:55,479 - session_2017-10-24T12_35_55_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 12:35:55,479 - session_2017-10-24T12_35_55_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 12:35:55,479 - session_2017-10-24T12_35_55_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 12:35:55,479 - session_2017-10-24T12_35_55_0 - DEBUG - GuiBackend generated message []
2017-10-24 12:35:55,479 - session_2017-10-24T12_35_55_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 12:35:55,479 - session_2017-10-24T12_35_55_0 - DEBUG - GuiBackend posted event
2017-10-24 12:35:55,480 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None))
2017-10-24 12:35:55,480 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 12:35:55,480 - session_2017-10-24T12_35_55_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "What would you like to do?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 12:35:55,480 - session_2017-10-24T12_35_55_0 - DEBUG - Sent.
2017-10-24 12:35:55,480 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-24 12:35:55,481 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 12:35:55,481 - session_2017-10-24T12_35_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 12:35:55,481 - session_2017-10-24T12_35_55_0 - DEBUG - Sent.
2017-10-24 12:35:55,481 - session_2017-10-24T12_35_55_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 12:35:55,514 - session_2017-10-24T12_35_55_0 - DEBUG - Backend communication: Backend received event {"content": ["", "What would you like to do?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 12:35:55,515 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 12:35:55,515 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, What would you like to do?], sender=TextOutputComponent, reason=None))
2017-10-24 12:35:55,515 - session_2017-10-24T12_35_55_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, What would you like to do?], sender=TextOutputComponent, reason=None)
2017-10-24 12:35:55,515 - session_2017-10-24T12_35_55_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 12:35:55,516 - session_2017-10-24T12_35_55_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 12:35:55,516 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 12:35:55,516 - session_2017-10-24T12_35_55_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 12:35:55,516 - session_2017-10-24T12_35_55_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None))
2017-10-24 12:35:55,519 - session_2017-10-24T12_35_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f921380d050>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9211929890>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508841355.52
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, What would you like to do?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: None
tis.repeat_questions: False
tis.score: 0.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: None
tis.shared.lu.turn_cont: {}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:35:55,519 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:35:55,519 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 12:35:55,520 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 12:35:55,522 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: None
?                        ^^^^
+ tis.shared.lu.speaker: SYS
?                        ^^^
-- END TIS changes --
2017-10-24 12:35:55,522 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 12:35:55,522 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 12:35:55,524 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:35:55,525 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 12:35:55,525 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 12:35:55,525 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 12:35:55,525 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 12:35:55,525 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 12:35:55,525 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 12:35:55,525 - session_2017-10-24T12_35_55_0 - INFO - BEGIN integrate_moves
2017-10-24 12:35:55,525 - session_2017-10-24T12_35_55_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 12:35:55,525 - session_2017-10-24T12_35_55_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 12:35:55,525 - session_2017-10-24T12_35_55_0 - INFO - init_shift: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 12:35:55,525 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:integrate
2017-10-24 12:35:55,529 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 12:35:55,529 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 12:35:55,530 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:35:55,530 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 12:35:55,530 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:35:55,530 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:integrate
2017-10-24 12:35:55,533 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.goal(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-24 12:35:55,533 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 12:35:55,533 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:35:55,533 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 12:35:55,533 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:35:55,533 - session_2017-10-24T12_35_55_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 12:35:55,533 - session_2017-10-24T12_35_55_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 12:35:55,533 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:35:55,533 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_action
2017-10-24 12:35:55,534 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:35:55,534 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:accommodate
2017-10-24 12:35:55,534 - session_2017-10-24T12_35_55_0 - INFO - breaking out of accommodate
2017-10-24 12:35:55,534 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:35:55,534 - session_2017-10-24T12_35_55_0 - INFO - END integrate_moves
2017-10-24 12:35:55,534 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:35:55,535 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:35:55,535 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 12:35:55,535 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:35:55,535 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:35:55,535 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:35:55,535 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:35:55,535 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 12:35:55,537 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:35:55,537 - session_2017-10-24T12_35_55_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:35:55,538 - session_2017-10-24T12_35_55_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 12:35:55,538 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 12:35:55,539 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:35:55,539 - session_2017-10-24T12_35_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 12:35:55,539 - session_2017-10-24T12_35_55_0 - DEBUG - Sent.
2017-10-24 12:35:55,539 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 12:35:55,539 - session_2017-10-24T12_35_55_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 12:35:55,540 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 12:35:55,540 - session_2017-10-24T12_35_55_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 12:35:59,654 - session_2017-10-24T12_35_55_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "tell me what to do"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 12:35:59,654 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 12:35:59,654 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None))
2017-10-24 12:35:59,655 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None)
2017-10-24 12:35:59,655 - session_2017-10-24T12_35_55_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None)
2017-10-24 12:35:59,655 - session_2017-10-24T12_35_55_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "tell me what to do"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 12:35:59,655 - session_2017-10-24T12_35_55_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 12:35:59,660 - session_2017-10-24T12_35_55_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 12:35:59,661 - session_2017-10-24T12_35_55_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])} for DDD 'recipehelp'
2017-10-24 12:35:59,661 - session_2017-10-24T12_35_55_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
2017-10-24 12:35:59,661 - session_2017-10-24T12_35_55_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=InterpretModule, reason=None)
2017-10-24 12:35:59,661 - session_2017-10-24T12_35_55_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AskMove": {"_type": "ask", "_ddd_name": "recipehelp", "_content": {"445f2b7f7189027ce75dac332c96dde0.WhQuestion": {"_type": "WHQ", "_content": {"24b0f339529d53d987534676834bafa7.LambdaAbstractedPredicateProposition": {"_ontology_name": "RecipehelpOntology", "predicate": {"59344e6b24703bf8b6d12bbc60ef78f6.Predicate": {"sort": {"29469b87e7e7f813b80409572cadd835.BuiltinSort": {"_dynamic": false, "_name": "string"}}, "name": "say_step", "grammar_category": null, "_ontology_name": "RecipehelpOntology", "_multiple_instances": false, "feature_of_name": null}}}}}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "tell me what to do", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "tell me what to do"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "tell me what to do", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 12:35:59,662 - session_2017-10-24T12_35_55_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None)
2017-10-24 12:35:59,662 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=InterpretModule, reason=None))
2017-10-24 12:35:59,662 - session_2017-10-24T12_35_55_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=InterpretModule, reason=None)
2017-10-24 12:35:59,662 - session_2017-10-24T12_35_55_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 12:35:59,662 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 12:35:59,662 - session_2017-10-24T12_35_55_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-24 12:35:59,663 - session_2017-10-24T12_35_55_0 - DEBUG - Sent.
2017-10-24 12:35:59,663 - session_2017-10-24T12_35_55_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-24 12:35:59,663 - session_2017-10-24T12_35_55_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
2017-10-24 12:35:59,664 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
2017-10-24 12:35:59,664 - session_2017-10-24T12_35_55_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
2017-10-24 12:35:59,664 - session_2017-10-24T12_35_55_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None))
2017-10-24 12:35:59,666 - session_2017-10-24T12_35_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f921380d050>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9211929890>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508841359.66
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:loadplan), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([])
tis.private.tmp.usr.plan: Stack([])
tis.private.tmp.usr.qud: stackset([])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.goal(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:35:59,666 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:35:59,669 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
-- END TIS changes --
2017-10-24 12:35:59,669 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:35:59,673 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                               ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                               ^
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
?                                                                                                                              ^
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}
?                                                                                                                              ^
-- END TIS changes --
2017-10-24 12:35:59,674 - session_2017-10-24T12_35_55_0 - INFO - hypotheses reranking had no effect
2017-10-24 12:35:59,674 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 12:35:59,679 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')])
- tis.score: 1.0
?              ^
+ tis.score: 1.2
?              ^
-- END TIS changes --
2017-10-24 12:35:59,679 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 12:35:59,685 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-24 12:35:59,685 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 12:35:59,685 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 12:35:59,688 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:35:59,688 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 12:35:59,688 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 12:35:59,692 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.goals: stackset([])
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
- tis.private.tmp.usr.plan: Stack([])
+ tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
- tis.private.tmp.usr.qud: stackset([])
+ tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                    ++++++++++
-- END TIS changes --
2017-10-24 12:35:59,692 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 12:35:59,692 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 12:35:59,692 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 12:35:59,692 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 12:35:59,693 - session_2017-10-24T12_35_55_0 - INFO - BEGIN integrate_moves
2017-10-24 12:35:59,693 - session_2017-10-24T12_35_55_0 - INFO - init_shift: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])
2017-10-24 12:35:59,693 - session_2017-10-24T12_35_55_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 12:35:59,694 - session_2017-10-24T12_35_55_0 - INFO - init_shift: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])
2017-10-24 12:35:59,694 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:integrate
2017-10-24 12:35:59,697 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: integrateUsrAsk
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
- tis.private.nim: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
+ tis.shared.goals: stackset([resolve(?X.say_step(X)), resolve_user(?X.goal(X)), perform(top)])
?                             +++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
- tis.shared.qud: stackset([?X.goal(X)])
+ tis.shared.qud: stackset([?X.say_step(X), ?X.goal(X)])
?                              ++++++++++++++++
-- END TIS changes --
2017-10-24 12:35:59,697 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 12:35:59,697 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:35:59,700 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: downdateISSUES2
-- BEGIN TIS changes --
- tis.shared.goals: stackset([resolve(?X.say_step(X)), resolve_user(?X.goal(X)), perform(top)])
?                                                      --------------------------
+ tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
-- END TIS changes --
2017-10-24 12:35:59,701 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 12:35:59,701 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:35:59,704 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: findIssuePlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
?                                                                   - ^ ^ ---------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^ ^^
- tis.private.plan: Stack([findout(?X.goal(X))])
+ tis.private.plan: Stack([device_query(?X.say_step(X)), findout(?X.done(X))])
-- END TIS changes --
2017-10-24 12:35:59,704 - session_2017-10-24T12_35_55_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 12:35:59,704 - session_2017-10-24T12_35_55_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 12:35:59,704 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:35:59,704 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_action
2017-10-24 12:35:59,705 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:35:59,705 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:accommodate
2017-10-24 12:35:59,705 - session_2017-10-24T12_35_55_0 - INFO - breaking out of accommodate
2017-10-24 12:35:59,705 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:35:59,705 - session_2017-10-24T12_35_55_0 - INFO - END integrate_moves
2017-10-24 12:35:59,705 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:35:59,708 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: exec_dev_query
-- BEGIN TIS changes --
- tis.private.bel: {}
+ tis.private.bel: {say_step(" Step one: Chop onions and garlic.")}
- tis.private.plan: Stack([device_query(?X.say_step(X)), findout(?X.done(X))])
?                          ------------------------------
+ tis.private.plan: Stack([findout(?X.done(X))])
-- END TIS changes --
2017-10-24 12:35:59,708 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:35:59,708 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:35:59,709 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:35:59,709 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 12:35:59,711 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.say_step(X), ?X.goal(X)])
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 12:35:59,711 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:35:59,711 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:35:59,712 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:35:59,712 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:35:59,712 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 12:35:59,712 - session_2017-10-24T12_35_55_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, tell me what to do, sender=DmeModule, reason=None)
2017-10-24 12:35:59,712 - session_2017-10-24T12_35_55_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None)
2017-10-24 12:35:59,712 - session_2017-10-24T12_35_55_0 - INFO - running ISU module: select
2017-10-24 12:35:59,713 - session_2017-10-24T12_35_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f921380d050>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9211929890>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508841359.66
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {say_step(" Step one: Chop onions and garlic.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:35:59,713 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 12:35:59,719 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan))])
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                ++++++++++++++++++++++++++++++++
- tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.bel: {say_step(" Step one: Chop onions and garlic.")}
- tis.private.tmp.sys.goals: stackset([perform(top)])
+ tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                                      +++++++++++++++++++++++++
- tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                             ^ ^^
+ tis.private.tmp.sys.plan: Stack([findout(?X.done(X))])
?                                             ^ ^^
-- END TIS changes --
2017-10-24 12:35:59,719 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_action
2017-10-24 12:35:59,722 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), findout(?X.done(X))])
?                                                                                                  +++++++++++++++++++++
-- END TIS changes --
2017-10-24 12:35:59,722 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_icm
2017-10-24 12:35:59,725 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), findout(?X.done(X))])
?                                 --------------------------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.done(X))])
-- END TIS changes --
2017-10-24 12:35:59,725 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_move
2017-10-24 12:35:59,725 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_icm
2017-10-24 12:35:59,728 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
?                                                             +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.done(X))])
?                                   ---------------------------------
+ tis.private.agenda: OpenQueue([#, findout(?X.done(X))])
-- END TIS changes --
2017-10-24 12:35:59,729 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_move
2017-10-24 12:35:59,732 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))])
?                                                                                    +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.done(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 12:35:59,732 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_icm
2017-10-24 12:35:59,732 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_move
2017-10-24 12:35:59,732 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 12:35:59,734 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:35:59,734 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 12:35:59,735 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:set_timeout
2017-10-24 12:35:59,737 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:35:59,737 - session_2017-10-24T12_35_55_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')])
2017-10-24 12:35:59,737 - session_2017-10-24T12_35_55_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {say_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None))
2017-10-24 12:35:59,738 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, tell me what to do, sender=DmeModule, reason=None))
2017-10-24 12:35:59,738 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, tell me what to do, sender=DmeModule, reason=None)
2017-10-24 12:35:59,738 - session_2017-10-24T12_35_55_0 - DEBUG - Backend communication: Backend is sending event {"content": "tell me what to do", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 12:35:59,739 - session_2017-10-24T12_35_55_0 - DEBUG - Sent.
2017-10-24 12:35:59,739 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None))
2017-10-24 12:35:59,739 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None)
2017-10-24 12:35:59,740 - session_2017-10-24T12_35_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": " Step one: Chop onions and garlic."}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 12:35:59,740 - session_2017-10-24T12_35_55_0 - DEBUG - Sent.
2017-10-24 12:35:59,741 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {say_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)))
2017-10-24 12:35:59,741 - session_2017-10-24T12_35_55_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {say_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None))
2017-10-24 12:35:59,741 - session_2017-10-24T12_35_55_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 12:35:59,741 - session_2017-10-24T12_35_55_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {say_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:35:59,742 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {say_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:35:59,744 - session_2017-10-24T12_35_55_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X))]), bel: {say_step(" Step one: Chop onions and garlic.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:35:59,744 - session_2017-10-24T12_35_55_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={say_step(" Step one: Chop onions and garlic.")})
2017-10-24 12:35:59,744 - session_2017-10-24T12_35_55_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 12:35:59,744 - session_2017-10-24T12_35_55_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={say_step(" Step one: Chop onions and garlic.")})
2017-10-24 12:35:59,744 - session_2017-10-24T12_35_55_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 12:35:59,744 - session_2017-10-24T12_35_55_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.done(X)), ddd_name=u'recipehelp'), facts={say_step(" Step one: Chop onions and garlic.")})
2017-10-24 12:35:59,744 - session_2017-10-24T12_35_55_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.done(X)), ddd_name=u'recipehelp')
2017-10-24 12:35:59,744 - session_2017-10-24T12_35_55_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:acc*pos)
2017-10-24 12:35:59,745 - session_2017-10-24T12_35_55_0 - DEBUG - GenerateModule: Move ICMMove(icm:acc*pos) generated as ''
2017-10-24 12:35:59,745 - session_2017-10-24T12_35_55_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:loadplan)
2017-10-24 12:35:59,745 - session_2017-10-24T12_35_55_0 - DEBUG - GenerateModule: Move ICMMove(icm:loadplan) generated as ''
2017-10-24 12:35:59,745 - session_2017-10-24T12_35_55_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.done(X)), ddd_name=u'recipehelp')
2017-10-24 12:35:59,746 - session_2017-10-24T12_35_55_0 - DEBUG - GenerateModule: Move Move(ask(?X.done(X)), ddd_name=u'recipehelp') generated as u'Are you done?'
2017-10-24 12:35:59,746 - session_2017-10-24T12_35_55_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Are you done?], sender=GenerateModule, reason=None)
2017-10-24 12:35:59,747 - session_2017-10-24T12_35_55_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X))]), bel: {say_step(" Step one: Chop onions and garlic.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:35:59,749 - session_2017-10-24T12_35_55_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X))]), bel: {say_step(" Step one: Chop onions and garlic.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:35:59,749 - session_2017-10-24T12_35_55_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 12:35:59,750 - session_2017-10-24T12_35_55_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')])
2017-10-24 12:35:59,750 - session_2017-10-24T12_35_55_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={say_step(" Step one: Chop onions and garlic.")})
2017-10-24 12:35:59,750 - session_2017-10-24T12_35_55_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 12:35:59,750 - session_2017-10-24T12_35_55_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={say_step(" Step one: Chop onions and garlic.")})
2017-10-24 12:35:59,750 - session_2017-10-24T12_35_55_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 12:35:59,750 - session_2017-10-24T12_35_55_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.done(X)), ddd_name=u'recipehelp'), facts={say_step(" Step one: Chop onions and garlic.")})
2017-10-24 12:35:59,750 - session_2017-10-24T12_35_55_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.done(X)), ddd_name=u'recipehelp')
2017-10-24 12:35:59,751 - session_2017-10-24T12_35_55_0 - DEBUG - GuiBackend generated message []
2017-10-24 12:35:59,751 - session_2017-10-24T12_35_55_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 12:35:59,751 - session_2017-10-24T12_35_55_0 - DEBUG - GuiBackend posted event
2017-10-24 12:35:59,752 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Are you done?], sender=GenerateModule, reason=None))
2017-10-24 12:35:59,753 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Are you done?], sender=GenerateModule, reason=None)
2017-10-24 12:35:59,754 - session_2017-10-24T12_35_55_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "", "Are you done?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 12:35:59,755 - session_2017-10-24T12_35_55_0 - DEBUG - Sent.
2017-10-24 12:35:59,755 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-24 12:35:59,755 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 12:35:59,756 - session_2017-10-24T12_35_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 12:35:59,757 - session_2017-10-24T12_35_55_0 - DEBUG - Sent.
2017-10-24 12:35:59,757 - session_2017-10-24T12_35_55_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 12:35:59,758 - session_2017-10-24T12_35_55_0 - DEBUG - Backend communication: Backend received event {"content": ["", "", "Are you done?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 12:35:59,759 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 12:35:59,759 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, , Are you done?], sender=TextOutputComponent, reason=None))
2017-10-24 12:35:59,759 - session_2017-10-24T12_35_55_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, , Are you done?], sender=TextOutputComponent, reason=None)
2017-10-24 12:35:59,760 - session_2017-10-24T12_35_55_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 12:35:59,760 - session_2017-10-24T12_35_55_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, , Are you done?], sender=TurnManager, reason=None)
2017-10-24 12:35:59,760 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, , Are you done?], sender=TurnManager, reason=None)
2017-10-24 12:35:59,760 - session_2017-10-24T12_35_55_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, , Are you done?], sender=TurnManager, reason=None)
2017-10-24 12:35:59,761 - session_2017-10-24T12_35_55_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, , Are you done?], sender=TurnManager, reason=None))
2017-10-24 12:35:59,762 - session_2017-10-24T12_35_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f921380d050>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9211929890>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508841359.76
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, , Are you done?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {say_step(" Step one: Chop onions and garlic.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {say_step(" Step one: Chop onions and garlic.")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:35:59,762 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:35:59,762 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 12:35:59,762 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 12:35:59,770 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
?            ^^
- tis.shared.pm: {ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 12:35:59,770 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 12:35:59,770 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 12:35:59,772 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:35:59,772 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 12:35:59,772 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 12:35:59,772 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 12:35:59,773 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 12:35:59,773 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 12:35:59,773 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 12:35:59,773 - session_2017-10-24T12_35_55_0 - INFO - BEGIN integrate_moves
2017-10-24 12:35:59,773 - session_2017-10-24T12_35_55_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 12:35:59,773 - session_2017-10-24T12_35_55_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 12:35:59,773 - session_2017-10-24T12_35_55_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 12:35:59,774 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:integrate
2017-10-24 12:35:59,778 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 12:35:59,778 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 12:35:59,778 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:35:59,778 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 12:35:59,778 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:35:59,778 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:integrate
2017-10-24 12:35:59,782 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
?                                                                       +++++++++++++++++++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 12:35:59,783 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 12:35:59,783 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:35:59,783 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 12:35:59,783 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:35:59,783 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:integrate
2017-10-24 12:35:59,787 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.done(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-24 12:35:59,787 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 12:35:59,787 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:35:59,787 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 12:35:59,787 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:35:59,787 - session_2017-10-24T12_35_55_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 12:35:59,787 - session_2017-10-24T12_35_55_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 12:35:59,787 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:35:59,788 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_action
2017-10-24 12:35:59,788 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:35:59,788 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:accommodate
2017-10-24 12:35:59,788 - session_2017-10-24T12_35_55_0 - INFO - breaking out of accommodate
2017-10-24 12:35:59,788 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:35:59,788 - session_2017-10-24T12_35_55_0 - INFO - END integrate_moves
2017-10-24 12:35:59,788 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:35:59,788 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:35:59,788 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 12:35:59,789 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:35:59,789 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:35:59,789 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:35:59,789 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:35:59,789 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 12:35:59,792 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:35:59,792 - session_2017-10-24T12_35_55_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None)
2017-10-24 12:35:59,792 - session_2017-10-24T12_35_55_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, , Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 12:35:59,792 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None))
2017-10-24 12:35:59,792 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None)
2017-10-24 12:35:59,792 - session_2017-10-24T12_35_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": " Step one: Chop onions and garlic."}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 12:35:59,793 - session_2017-10-24T12_35_55_0 - DEBUG - Sent.
2017-10-24 12:35:59,793 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, , Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 12:35:59,793 - session_2017-10-24T12_35_55_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, , Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 12:35:59,793 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, , Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 12:35:59,795 - session_2017-10-24T12_35_55_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 12:36:11,087 - session_2017-10-24T12_35_55_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "no"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 12:36:11,087 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 12:36:11,088 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: no}], sender=TextInputComponent, reason=None))
2017-10-24 12:36:11,088 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: no}], sender=TextInputComponent, reason=None)
2017-10-24 12:36:11,088 - session_2017-10-24T12_35_55_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: no}], sender=TextInputComponent, reason=None)
2017-10-24 12:36:11,088 - session_2017-10-24T12_35_55_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "no"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 12:36:11,088 - session_2017-10-24T12_35_55_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 12:36:11,091 - session_2017-10-24T12_35_55_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 12:36:11,091 - session_2017-10-24T12_35_55_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])} for DDD 'recipehelp'
2017-10-24 12:36:11,092 - session_2017-10-24T12_35_55_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}
2017-10-24 12:36:11,092 - session_2017-10-24T12_35_55_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=InterpretModule, reason=None)
2017-10-24 12:36:11,092 - session_2017-10-24T12_35_55_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.No": {}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "no", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "no"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "no", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.CustomSort": {"_ontology_name": "RecipehelpOntology", "_dynamic": false, "_name": "Boolean"}}, "value": "False"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "no", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 12:36:11,092 - session_2017-10-24T12_35_55_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: no}], sender=TextInputComponent, reason=None)
2017-10-24 12:36:11,093 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=InterpretModule, reason=None))
2017-10-24 12:36:11,093 - session_2017-10-24T12_35_55_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=InterpretModule, reason=None)
2017-10-24 12:36:11,093 - session_2017-10-24T12_35_55_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 12:36:11,093 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 12:36:11,093 - session_2017-10-24T12_35_55_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-24 12:36:11,093 - session_2017-10-24T12_35_55_0 - DEBUG - Sent.
2017-10-24 12:36:11,094 - session_2017-10-24T12_35_55_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-24 12:36:11,094 - session_2017-10-24T12_35_55_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
2017-10-24 12:36:11,094 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
2017-10-24 12:36:11,095 - session_2017-10-24T12_35_55_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
2017-10-24 12:36:11,095 - session_2017-10-24T12_35_55_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None))
2017-10-24 12:36:11,097 - session_2017-10-24T12_35_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f921380d050>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9211929890>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508841371.1
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {say_step(" Step one: Chop onions and garlic.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {say_step(" Step one: Chop onions and garlic.")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: no
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.done(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:36:11,097 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:36:11,102 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                        ^^^^                                                                                                             ^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ -------------------------------------------------------------------------
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                        ^^^^^                                                                                                             ^^^^^^^^^^^^^^ ^^^
- tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer("no"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}
?                                                                                                                                                                                       ^^^^                                                                                                             -------------------------------------------------------------------------------------------------------------------------------------------
+ tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}
?                                                                                                                                                                                       ^^^^^
-- END TIS changes --
2017-10-24 12:36:11,102 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:36:11,106 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                                                                                                 ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                                                                                                 ^
- tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])}
?                                                                                                                                                                                                                                                                ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'no'), #])}
?                                                                                                                                                                                                                                                                ^
-- END TIS changes --
2017-10-24 12:36:11,110 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: uprankQUDResolving
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                                                                                                 ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                                                                                                 ^^
- tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'no'), #])}
?                                                                                                                                                                                                                                                                ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])}
?                                                                                                                                                                                                                                                                ^^
-- END TIS changes --
2017-10-24 12:36:11,111 - session_2017-10-24T12_35_55_0 - INFO - hypotheses reranked: OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #]) upranked to position 1 from position 1, replacing OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #])
2017-10-24 12:36:11,111 - session_2017-10-24T12_35_55_0 - INFO - Could not log rerank
2017-10-24 12:36:11,112 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 12:36:11,114 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')])
- tis.score: 1.0
?              ^
+ tis.score: 1.44
?              ^^
-- END TIS changes --
2017-10-24 12:36:11,115 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 12:36:11,120 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
-- END TIS changes --
2017-10-24 12:36:11,120 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 12:36:11,121 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 12:36:11,124 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:36:11,124 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 12:36:11,124 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 12:36:11,132 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.bel: {}
+ tis.private.tmp.usr.bel: {say_step(" Step one: Chop onions and garlic.")}
- tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                                                      ^  ^
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
?                                                      ^ ++++++++++++++++++++ ^^^^^^
- tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
?                                             ^ ^^
+ tis.private.tmp.usr.plan: Stack([findout(?X.done(X))])
?                                             ^ ^^
- tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                       ^ ^^
+ tis.private.tmp.usr.qud: stackset([?X.done(X)])
?                                       ^ ^^
-- END TIS changes --
2017-10-24 12:36:11,132 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 12:36:11,132 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 12:36:11,133 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 12:36:11,133 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 12:36:11,133 - session_2017-10-24T12_35_55_0 - INFO - BEGIN integrate_moves
2017-10-24 12:36:11,133 - session_2017-10-24T12_35_55_0 - INFO - init_shift: OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])
2017-10-24 12:36:11,133 - session_2017-10-24T12_35_55_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 12:36:11,133 - session_2017-10-24T12_35_55_0 - INFO - init_shift: OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])
2017-10-24 12:36:11,134 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:integrate
2017-10-24 12:36:11,138 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: integrateUsrAnswer
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.nim: OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])
+ tis.private.nim: OpenQueue([#])
- tis.recent_commitments: {}
+ tis.recent_commitments: {done(False)}
?                          +++++++++++
- tis.shared.com: {}
+ tis.shared.com: {done(False)}
?                  +++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')}
-- END TIS changes --
2017-10-24 12:36:11,138 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 12:36:11,138 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:36:11,142 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {done(False)}
+ tis.shared.com: {done(False), resolved(?X.done(X))}
- tis.shared.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
?                             --------------------------
+ tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
-- END TIS changes --
2017-10-24 12:36:11,142 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 12:36:11,145 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: removeFindout
-- BEGIN TIS changes --
- tis.private.plan: Stack([findout(?X.done(X))])
+ tis.private.plan: Stack([])
-- END TIS changes --
2017-10-24 12:36:11,145 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:36:11,145 - session_2017-10-24T12_35_55_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 12:36:11,145 - session_2017-10-24T12_35_55_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 12:36:11,146 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:36:11,146 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_action
2017-10-24 12:36:11,146 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:36:11,146 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:accommodate
2017-10-24 12:36:11,146 - session_2017-10-24T12_35_55_0 - INFO - breaking out of accommodate
2017-10-24 12:36:11,146 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:36:11,146 - session_2017-10-24T12_35_55_0 - INFO - END integrate_moves
2017-10-24 12:36:11,146 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:36:11,147 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:36:11,147 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 12:36:11,149 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.done(X)])
?                           ----------
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 12:36:11,150 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:36:11,150 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:36:11,150 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:36:11,150 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:36:11,150 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 12:36:11,150 - session_2017-10-24T12_35_55_0 - DEBUG - DmeModule posts Event(COMMITMENTS_UPDATE, done(False), sender=DmeModule, reason=None)
2017-10-24 12:36:11,151 - session_2017-10-24T12_35_55_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, no, sender=DmeModule, reason=None)
2017-10-24 12:36:11,151 - session_2017-10-24T12_35_55_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: done, grammar_entry: None, value: False}, {predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None)
2017-10-24 12:36:11,151 - session_2017-10-24T12_35_55_0 - INFO - running ISU module: select
2017-10-24 12:36:11,152 - session_2017-10-24T12_35_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f921380d050>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9211929890>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508841371.1
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')])
tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.bel: {say_step(" Step one: Chop onions and garlic.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {say_step(" Step one: Chop onions and garlic.")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {say_step(" Step one: Chop onions and garlic.")}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X))])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: no
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {done(False), resolved(?X.done(X))}
tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:36:11,152 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 12:36:11,156 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                         ---------------------------------
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.tmp.sys.com: {}
+ tis.private.tmp.sys.com: {done(False), resolved(?X.done(X))}
- tis.private.tmp.sys.plan: Stack([findout(?X.done(X))])
?                                  -------------------
+ tis.private.tmp.sys.plan: Stack([])
-- END TIS changes --
2017-10-24 12:36:11,156 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_action
2017-10-24 12:36:11,159 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: selectRespond
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
?                                                                 +++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 12:36:11,159 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_icm
2017-10-24 12:36:11,162 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
?                                   --------------------------------
+ tis.private.agenda: OpenQueue([#, respond(?X.say_step(X))])
-- END TIS changes --
2017-10-24 12:36:11,162 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_move
2017-10-24 12:36:11,165 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: selectAnswer
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))])
- tis.private.agenda: OpenQueue([#, respond(?X.say_step(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 12:36:11,165 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_icm
2017-10-24 12:36:11,165 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_move
2017-10-24 12:36:11,165 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 12:36:11,168 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:36:11,168 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 12:36:11,168 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:set_timeout
2017-10-24 12:36:11,171 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-24 12:36:11,172 - session_2017-10-24T12_35_55_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')])
2017-10-24 12:36:11,172 - session_2017-10-24T12_35_55_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), bel: {say_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {done(False), resolved(?X.done(X))}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None))
2017-10-24 12:36:11,172 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(COMMITMENTS_UPDATE, done(False), sender=DmeModule, reason=None))
2017-10-24 12:36:11,172 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(COMMITMENTS_UPDATE, done(False), sender=DmeModule, reason=None)
2017-10-24 12:36:11,172 - session_2017-10-24T12_35_55_0 - DEBUG - DeviceManager handles Event(COMMITMENTS_UPDATE, done(False), sender=DmeModule, reason=None)
2017-10-24 12:36:11,173 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, no, sender=DmeModule, reason=None))
2017-10-24 12:36:11,173 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, no, sender=DmeModule, reason=None)
2017-10-24 12:36:11,173 - session_2017-10-24T12_35_55_0 - DEBUG - Backend communication: Backend is sending event {"content": "no", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 12:36:11,173 - session_2017-10-24T12_35_55_0 - DEBUG - Sent.
2017-10-24 12:36:11,173 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: done, grammar_entry: None, value: False}, {predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None))
2017-10-24 12:36:11,174 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: done, grammar_entry: None, value: False}, {predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None)
2017-10-24 12:36:11,174 - session_2017-10-24T12_35_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "done", "grammar_entry": null, "value": "False"}, {"predicate": "say_step", "grammar_entry": null, "value": " Step one: Chop onions and garlic."}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 12:36:11,175 - session_2017-10-24T12_35_55_0 - DEBUG - Sent.
2017-10-24 12:36:11,175 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), bel: {say_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {done(False), resolved(?X.done(X))}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None)))
2017-10-24 12:36:11,176 - session_2017-10-24T12_35_55_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), bel: {say_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {done(False), resolved(?X.done(X))}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])}, sender=TurnManager, reason=None))
2017-10-24 12:36:11,176 - session_2017-10-24T12_35_55_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 12:36:11,176 - session_2017-10-24T12_35_55_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), bel: {say_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {done(False), resolved(?X.done(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:36:11,176 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), bel: {say_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {done(False), resolved(?X.done(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:36:11,177 - session_2017-10-24T12_35_55_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {say_step(" Step one: Chop onions and garlic.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), com: {done(False), resolved(?X.done(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:36:11,178 - session_2017-10-24T12_35_55_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp'), facts={done(False), resolved(?X.done(X)), say_step(" Step one: Chop onions and garlic.")})
2017-10-24 12:36:11,178 - session_2017-10-24T12_35_55_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')
2017-10-24 12:36:11,178 - session_2017-10-24T12_35_55_0 - DEBUG - GenerateModule: Generating utterance part from move Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')
2017-10-24 12:36:11,178 - session_2017-10-24T12_35_55_0 - DEBUG - GenerateModule: Move Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp') generated as u'Ok  Step one: Chop onions and garlic..'
2017-10-24 12:36:11,179 - session_2017-10-24T12_35_55_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok  Step one: Chop onions and garlic..], sender=GenerateModule, reason=None)
2017-10-24 12:36:11,180 - session_2017-10-24T12_35_55_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {say_step(" Step one: Chop onions and garlic.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), com: {done(False), resolved(?X.done(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:36:11,181 - session_2017-10-24T12_35_55_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Ok  Step one: Chop onions and garlic..}, sender=IndependentGuiBackend, reason=None)
2017-10-24 12:36:11,182 - session_2017-10-24T12_35_55_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {say_step(" Step one: Chop onions and garlic.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), com: {done(False), resolved(?X.done(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:36:11,182 - session_2017-10-24T12_35_55_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 12:36:11,183 - session_2017-10-24T12_35_55_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')])
2017-10-24 12:36:11,183 - session_2017-10-24T12_35_55_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp'), facts={done(False), resolved(?X.done(X)), say_step(" Step one: Chop onions and garlic.")})
2017-10-24 12:36:11,183 - session_2017-10-24T12_35_55_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')
2017-10-24 12:36:11,184 - session_2017-10-24T12_35_55_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.Popup instance at 0x7f92110f2e60>]
2017-10-24 12:36:11,184 - session_2017-10-24T12_35_55_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f92110f2e60>], sender=GuiBackend, reason=None)
2017-10-24 12:36:11,184 - session_2017-10-24T12_35_55_0 - DEBUG - GuiBackend posted event
2017-10-24 12:36:11,184 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok  Step one: Chop onions and garlic..], sender=GenerateModule, reason=None))
2017-10-24 12:36:11,184 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok  Step one: Chop onions and garlic..], sender=GenerateModule, reason=None)
2017-10-24 12:36:11,184 - session_2017-10-24T12_35_55_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Ok  Step one: Chop onions and garlic.."], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 12:36:11,185 - session_2017-10-24T12_35_55_0 - DEBUG - Sent.
2017-10-24 12:36:11,185 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Ok  Step one: Chop onions and garlic..}, sender=IndependentGuiBackend, reason=None))
2017-10-24 12:36:11,185 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Ok  Step one: Chop onions and garlic..}, sender=IndependentGuiBackend, reason=None)
2017-10-24 12:36:11,185 - session_2017-10-24T12_35_55_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Ok  Step one: Chop onions and garlic.."}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-24 12:36:11,187 - session_2017-10-24T12_35_55_0 - DEBUG - Sent.
2017-10-24 12:36:11,187 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f92110f2e60>], sender=GuiBackend, reason=None))
2017-10-24 12:36:11,187 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f92110f2e60>], sender=GuiBackend, reason=None)
2017-10-24 12:36:11,187 - session_2017-10-24T12_35_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Ok  Step one: Chop onions and garlic.."}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 12:36:11,188 - session_2017-10-24T12_35_55_0 - DEBUG - Sent.
2017-10-24 12:36:11,188 - session_2017-10-24T12_35_55_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 12:36:11,207 - session_2017-10-24T12_35_55_0 - DEBUG - Backend communication: Backend received event {"content": ["Ok  Step one: Chop onions and garlic.."], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 12:36:11,208 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 12:36:11,209 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Ok  Step one: Chop onions and garlic..], sender=TextOutputComponent, reason=None))
2017-10-24 12:36:11,209 - session_2017-10-24T12_35_55_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Ok  Step one: Chop onions and garlic..], sender=TextOutputComponent, reason=None)
2017-10-24 12:36:11,209 - session_2017-10-24T12_35_55_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 12:36:11,209 - session_2017-10-24T12_35_55_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Ok  Step one: Chop onions and garlic..], sender=TurnManager, reason=None)
2017-10-24 12:36:11,209 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Ok  Step one: Chop onions and garlic..], sender=TurnManager, reason=None)
2017-10-24 12:36:11,209 - session_2017-10-24T12_35_55_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Ok  Step one: Chop onions and garlic..], sender=TurnManager, reason=None)
2017-10-24 12:36:11,210 - session_2017-10-24T12_35_55_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Ok  Step one: Chop onions and garlic..], sender=TurnManager, reason=None))
2017-10-24 12:36:11,211 - session_2017-10-24T12_35_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f921380d050>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9211929890>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508841371.21
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Ok  Step one: Chop onions and garlic..], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer(no), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'no'), #]), OpenQueue([Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {say_step(" Step one: Chop onions and garlic.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {say_step(" Step one: Chop onions and garlic.")}
tis.private.tmp.sys.com: {done(False), resolved(?X.done(X))}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {say_step(" Step one: Chop onions and garlic.")}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X))])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: no
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {done(False), resolved(?X.done(X))}
tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:36:11,211 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:36:11,211 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 12:36:11,211 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 12:36:11,217 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')}
?            ^^
- tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 12:36:11,217 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 12:36:11,217 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 12:36:11,220 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:36:11,220 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 12:36:11,220 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 12:36:11,220 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 12:36:11,221 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 12:36:11,221 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 12:36:11,221 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 12:36:11,221 - session_2017-10-24T12_35_55_0 - INFO - BEGIN integrate_moves
2017-10-24 12:36:11,221 - session_2017-10-24T12_35_55_0 - INFO - init_shift: OpenQueue([Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 12:36:11,221 - session_2017-10-24T12_35_55_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 12:36:11,221 - session_2017-10-24T12_35_55_0 - INFO - init_shift: OpenQueue([Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 12:36:11,221 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:integrate
2017-10-24 12:36:11,224 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: integrateSysAnswer
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.com: {done(False), resolved(?X.done(X))}
+ tis.shared.com: {done(False), resolved(?X.done(X)), say_step(" Step one: Chop onions and garlic.")}
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 12:36:11,224 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 12:36:11,224 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:36:11,228 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {done(False), resolved(?X.done(X)), say_step(" Step one: Chop onions and garlic.")}
+ tis.shared.com: {done(False), resolved(?X.done(X)), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}
?                                                                                                   ++++++++++++++++++++++++++
- tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                             -------------------------
+ tis.shared.goals: stackset([perform(top)])
-- END TIS changes --
2017-10-24 12:36:11,229 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 12:36:11,229 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:36:11,229 - session_2017-10-24T12_35_55_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 12:36:11,229 - session_2017-10-24T12_35_55_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 12:36:11,229 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:36:11,229 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_action
2017-10-24 12:36:11,229 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:36:11,229 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:accommodate
2017-10-24 12:36:11,229 - session_2017-10-24T12_35_55_0 - INFO - breaking out of accommodate
2017-10-24 12:36:11,229 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:36:11,230 - session_2017-10-24T12_35_55_0 - INFO - END integrate_moves
2017-10-24 12:36:11,230 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:36:11,230 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:36:11,230 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 12:36:11,230 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:36:11,230 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:36:11,231 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:36:11,231 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:36:11,231 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 12:36:11,233 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-24 12:36:11,234 - session_2017-10-24T12_35_55_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: done, grammar_entry: None, value: False}, {predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None)
2017-10-24 12:36:11,234 - session_2017-10-24T12_35_55_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Ok  Step one: Chop onions and garlic..], latest_moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 12:36:11,234 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: done, grammar_entry: None, value: False}, {predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None))
2017-10-24 12:36:11,234 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: done, grammar_entry: None, value: False}, {predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None)
2017-10-24 12:36:11,234 - session_2017-10-24T12_35_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "done", "grammar_entry": null, "value": "False"}, {"predicate": "say_step", "grammar_entry": null, "value": " Step one: Chop onions and garlic."}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 12:36:11,235 - session_2017-10-24T12_35_55_0 - DEBUG - Sent.
2017-10-24 12:36:11,235 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Ok  Step one: Chop onions and garlic..], latest_moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None))
2017-10-24 12:36:11,236 - session_2017-10-24T12_35_55_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Ok  Step one: Chop onions and garlic..], latest_moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 12:36:11,236 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Ok  Step one: Chop onions and garlic..], latest_moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 12:36:11,236 - session_2017-10-24T12_35_55_0 - INFO - starting TIMEOUT timer: <tdm.maharani.scheduler.DelayedCall instance at 0x7f92110f23f8>:1.0
2017-10-24 12:36:11,237 - session_2017-10-24T12_35_55_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 12:36:12,237 - session_2017-10-24T12_35_55_0 - DEBUG - Timeout fired
2017-10-24 12:36:12,237 - session_2017-10-24T12_35_55_0 - DEBUG - TurnManager posts Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 12:36:12,237 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 12:36:12,237 - session_2017-10-24T12_35_55_0 - DEBUG - DmeModule handles Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 12:36:12,237 - session_2017-10-24T12_35_55_0 - INFO - running ISU module: update (Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 12:36:12,238 - session_2017-10-24T12_35_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f921380d050>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9211929890>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508841372.24
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {say_step(" Step one: Chop onions and garlic.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {say_step(" Step one: Chop onions and garlic.")}
tis.private.tmp.sys.com: {done(False), resolved(?X.done(X))}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {say_step(" Step one: Chop onions and garlic.")}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X))])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: no
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {done(False), resolved(?X.done(X)), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:36:12,239 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:36:12,239 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 12:36:12,241 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-24 12:36:12,241 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 12:36:12,245 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(answer(False), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'no')}
-- END TIS changes --
2017-10-24 12:36:12,246 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 12:36:12,246 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 12:36:12,248 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:36:12,249 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 12:36:12,249 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 12:36:12,249 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 12:36:12,249 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 12:36:12,249 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 12:36:12,249 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 12:36:12,249 - session_2017-10-24T12_35_55_0 - INFO - BEGIN integrate_moves
2017-10-24 12:36:12,249 - session_2017-10-24T12_35_55_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 12:36:12,249 - session_2017-10-24T12_35_55_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 12:36:12,249 - session_2017-10-24T12_35_55_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 12:36:12,249 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:integrate
2017-10-24 12:36:12,250 - session_2017-10-24T12_35_55_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 12:36:12,250 - session_2017-10-24T12_35_55_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 12:36:12,250 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:36:12,250 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_action
2017-10-24 12:36:12,250 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:36:12,250 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:accommodate
2017-10-24 12:36:12,250 - session_2017-10-24T12_35_55_0 - INFO - breaking out of accommodate
2017-10-24 12:36:12,250 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:36:12,250 - session_2017-10-24T12_35_55_0 - INFO - END integrate_moves
2017-10-24 12:36:12,250 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:36:12,253 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: recoverPerformPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 12:36:12,254 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:36:12,254 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:36:12,257 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.bel: {say_step(" Step one: Chop onions and garlic.")}
+ tis.private.bel: {}
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
- tis.shared.com: {done(False), resolved(?X.done(X)), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}
+ tis.shared.com: {}
-- END TIS changes --
2017-10-24 12:36:12,257 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:36:12,257 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:36:12,257 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:36:12,258 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 12:36:12,258 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:36:12,258 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:36:12,259 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:36:12,259 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:36:12,259 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 12:36:12,259 - session_2017-10-24T12_35_55_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:36:12,259 - session_2017-10-24T12_35_55_0 - INFO - running ISU module: select
2017-10-24 12:36:12,260 - session_2017-10-24T12_35_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f921380d050>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9211929890>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508841372.24
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {say_step(" Step one: Chop onions and garlic.")}
tis.private.tmp.sys.com: {done(False), resolved(?X.done(X))}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {say_step(" Step one: Chop onions and garlic.")}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X))])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: no
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:36:12,260 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 12:36:12,265 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
?                                                                 ^^^  ^
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
?                                                                +++ ^^^^ +++ ^^^^^^^
- tis.private.tmp.sys.bel: {say_step(" Step one: Chop onions and garlic.")}
- tis.private.tmp.sys.com: {done(False), resolved(?X.done(X))}
+ tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.com: {}
- tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                                      -------------------------
+ tis.private.tmp.sys.goals: stackset([perform(top)])
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-24 12:36:12,265 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_action
2017-10-24 12:36:12,267 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
?                                                                              +++++++++++++++++++++
-- END TIS changes --
2017-10-24 12:36:12,267 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_icm
2017-10-24 12:36:12,270 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 12:36:12,270 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_move
2017-10-24 12:36:12,273 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
?                                                                          +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 12:36:12,273 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_icm
2017-10-24 12:36:12,273 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_move
2017-10-24 12:36:12,273 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 12:36:12,275 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:36:12,275 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 12:36:12,275 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:set_timeout
2017-10-24 12:36:12,278 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-24 12:36:12,278 - session_2017-10-24T12_35_55_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 12:36:12,278 - session_2017-10-24T12_35_55_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 12:36:19,334 - session_2017-10-24T12_35_55_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "tell me what to do"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 12:36:19,335 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 12:36:19,335 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None))
2017-10-24 12:36:19,335 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None)
2017-10-24 12:36:19,335 - session_2017-10-24T12_35_55_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None)
2017-10-24 12:36:19,335 - session_2017-10-24T12_35_55_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "tell me what to do"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 12:36:19,335 - session_2017-10-24T12_35_55_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 12:36:19,336 - session_2017-10-24T12_35_55_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 12:36:19,336 - session_2017-10-24T12_35_55_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])} for DDD 'recipehelp'
2017-10-24 12:36:19,337 - session_2017-10-24T12_35_55_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
2017-10-24 12:36:19,337 - session_2017-10-24T12_35_55_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=InterpretModule, reason=None)
2017-10-24 12:36:19,337 - session_2017-10-24T12_35_55_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AskMove": {"_type": "ask", "_ddd_name": "recipehelp", "_content": {"445f2b7f7189027ce75dac332c96dde0.WhQuestion": {"_type": "WHQ", "_content": {"24b0f339529d53d987534676834bafa7.LambdaAbstractedPredicateProposition": {"_ontology_name": "RecipehelpOntology", "predicate": {"59344e6b24703bf8b6d12bbc60ef78f6.Predicate": {"sort": {"29469b87e7e7f813b80409572cadd835.BuiltinSort": {"_dynamic": false, "_name": "string"}}, "name": "say_step", "grammar_category": null, "_ontology_name": "RecipehelpOntology", "_multiple_instances": false, "feature_of_name": null}}}}}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "tell me what to do", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "tell me what to do"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "tell me what to do", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 12:36:19,337 - session_2017-10-24T12_35_55_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: tell me what to do}], sender=TextInputComponent, reason=None)
2017-10-24 12:36:19,337 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 12:36:19,338 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:36:19,338 - session_2017-10-24T12_35_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 12:36:19,338 - session_2017-10-24T12_35_55_0 - DEBUG - Sent.
2017-10-24 12:36:19,339 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None)))
2017-10-24 12:36:19,339 - session_2017-10-24T12_35_55_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 12:36:19,339 - session_2017-10-24T12_35_55_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 12:36:19,339 - session_2017-10-24T12_35_55_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:36:19,340 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:36:19,340 - session_2017-10-24T12_35_55_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:36:19,341 - session_2017-10-24T12_35_55_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-24 12:36:19,341 - session_2017-10-24T12_35_55_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-24 12:36:19,341 - session_2017-10-24T12_35_55_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 12:36:19,341 - session_2017-10-24T12_35_55_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 12:36:19,341 - session_2017-10-24T12_35_55_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:reraise:perform(top))
2017-10-24 12:36:19,341 - session_2017-10-24T12_35_55_0 - DEBUG - GenerateModule: Move ICMMove(icm:reraise:perform(top)) generated as u'Returning to the start view.'
2017-10-24 12:36:19,342 - session_2017-10-24T12_35_55_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 12:36:19,342 - session_2017-10-24T12_35_55_0 - DEBUG - GenerateModule: Move Move(ask(?X.goal(X)), ddd_name=u'recipehelp') generated as u'What would you like to do?'
2017-10-24 12:36:19,342 - session_2017-10-24T12_35_55_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 12:36:19,343 - session_2017-10-24T12_35_55_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:36:19,344 - session_2017-10-24T12_35_55_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:36:19,345 - session_2017-10-24T12_35_55_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 12:36:19,345 - session_2017-10-24T12_35_55_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 12:36:19,345 - session_2017-10-24T12_35_55_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:reraise:perform(top)), facts={})
2017-10-24 12:36:19,345 - session_2017-10-24T12_35_55_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:reraise:perform(top))
2017-10-24 12:36:19,345 - session_2017-10-24T12_35_55_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.goal(X)), ddd_name=u'recipehelp'), facts={})
2017-10-24 12:36:19,345 - session_2017-10-24T12_35_55_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.goal(X)), ddd_name=u'recipehelp')
2017-10-24 12:36:19,346 - session_2017-10-24T12_35_55_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f9211111710>]
2017-10-24 12:36:19,346 - session_2017-10-24T12_35_55_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f9211111710>], sender=GuiBackend, reason=None)
2017-10-24 12:36:19,346 - session_2017-10-24T12_35_55_0 - DEBUG - GuiBackend posted event
2017-10-24 12:36:19,347 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=InterpretModule, reason=None))
2017-10-24 12:36:19,347 - session_2017-10-24T12_35_55_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=InterpretModule, reason=None)
2017-10-24 12:36:19,347 - session_2017-10-24T12_35_55_0 - DEBUG - TurnManager posts Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-24 12:36:19,347 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_SPEAKING, None, sender=TurnManager, reason=None)
2017-10-24 12:36:19,347 - session_2017-10-24T12_35_55_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_SPEAKING"}
2017-10-24 12:36:19,347 - session_2017-10-24T12_35_55_0 - DEBUG - Sent.
2017-10-24 12:36:19,348 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None))
2017-10-24 12:36:19,348 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Returning to the start view., What would you like to do?], sender=GenerateModule, reason=None)
2017-10-24 12:36:19,348 - session_2017-10-24T12_35_55_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 12:36:19,349 - session_2017-10-24T12_35_55_0 - DEBUG - Sent.
2017-10-24 12:36:19,349 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f9211111710>], sender=GuiBackend, reason=None))
2017-10-24 12:36:19,349 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.ClosePopup instance at 0x7f9211111710>], sender=GuiBackend, reason=None)
2017-10-24 12:36:19,349 - session_2017-10-24T12_35_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.ClosePopup": {}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 12:36:19,350 - session_2017-10-24T12_35_55_0 - DEBUG - Sent.
2017-10-24 12:36:19,350 - session_2017-10-24T12_35_55_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 12:36:19,367 - session_2017-10-24T12_35_55_0 - DEBUG - Backend communication: Backend received event {"content": ["Returning to the start view.", "What would you like to do?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 12:36:19,367 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 12:36:19,368 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None))
2017-10-24 12:36:19,368 - session_2017-10-24T12_35_55_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Returning to the start view., What would you like to do?], sender=TextOutputComponent, reason=None)
2017-10-24 12:36:19,368 - session_2017-10-24T12_35_55_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 12:36:19,368 - session_2017-10-24T12_35_55_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 12:36:19,368 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 12:36:19,368 - session_2017-10-24T12_35_55_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
2017-10-24 12:36:19,369 - session_2017-10-24T12_35_55_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None))
2017-10-24 12:36:19,370 - session_2017-10-24T12_35_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f921380d050>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9211929890>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508841379.37
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Returning to the start view., What would you like to do?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {say_step(" Step one: Chop onions and garlic.")}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X))])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:36:19,370 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:36:19,370 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 12:36:19,370 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 12:36:19,374 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: False
?                   ^^^^
+ tis.passive_mode: True
?                   ^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
- tis.shared.pm: {Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
+ tis.shared.pm: {}
-- END TIS changes --
2017-10-24 12:36:19,374 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 12:36:19,375 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 12:36:19,377 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:36:19,377 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 12:36:19,377 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 12:36:19,377 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 12:36:19,377 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 12:36:19,377 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 12:36:19,378 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 12:36:19,378 - session_2017-10-24T12_35_55_0 - INFO - BEGIN integrate_moves
2017-10-24 12:36:19,378 - session_2017-10-24T12_35_55_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 12:36:19,378 - session_2017-10-24T12_35_55_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 12:36:19,378 - session_2017-10-24T12_35_55_0 - INFO - init_shift: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 12:36:19,378 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:integrate
2017-10-24 12:36:19,382 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 12:36:19,382 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 12:36:19,382 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:36:19,382 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 12:36:19,382 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:36:19,382 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:integrate
2017-10-24 12:36:19,385 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.goal(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-24 12:36:19,386 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 12:36:19,386 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:36:19,386 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 12:36:19,386 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:36:19,386 - session_2017-10-24T12_35_55_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 12:36:19,386 - session_2017-10-24T12_35_55_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 12:36:19,386 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:36:19,386 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_action
2017-10-24 12:36:19,386 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:36:19,387 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:accommodate
2017-10-24 12:36:19,387 - session_2017-10-24T12_35_55_0 - INFO - breaking out of accommodate
2017-10-24 12:36:19,387 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:36:19,387 - session_2017-10-24T12_35_55_0 - INFO - END integrate_moves
2017-10-24 12:36:19,387 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:36:19,387 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:36:19,387 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 12:36:19,387 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:36:19,387 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:36:19,388 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:36:19,388 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:36:19,388 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 12:36:19,390 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: True
?                      ^^^
+ tis.timeout.enabled: False
?                      ^^^^
-- END TIS changes --
2017-10-24 12:36:19,390 - session_2017-10-24T12_35_55_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:36:19,390 - session_2017-10-24T12_35_55_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 12:36:19,391 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 12:36:19,391 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:36:19,391 - session_2017-10-24T12_35_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 12:36:19,391 - session_2017-10-24T12_35_55_0 - DEBUG - Sent.
2017-10-24 12:36:19,391 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 12:36:19,392 - session_2017-10-24T12_35_55_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 12:36:19,392 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Returning to the start view., What would you like to do?], latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 12:36:19,392 - session_2017-10-24T12_35_55_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
2017-10-24 12:36:19,392 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
2017-10-24 12:36:19,393 - session_2017-10-24T12_35_55_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
2017-10-24 12:36:19,393 - session_2017-10-24T12_35_55_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None))
2017-10-24 12:36:19,394 - session_2017-10-24T12_35_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f921380d050>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9211929890>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508841379.39
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: True
tis.private.agenda: OpenQueue([#])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {say_step(" Step one: Chop onions and garlic.")}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X))])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.goal(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:36:19,394 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:36:19,397 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #]), OpenQueue([Move(answer("tell me what to do"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
-- END TIS changes --
2017-10-24 12:36:19,397 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:36:19,401 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                               ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                               ^
- tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'tell me what to do'), #])}
?                                                                                                                              ^
+ tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}
?                                                                                                                              ^
-- END TIS changes --
2017-10-24 12:36:19,402 - session_2017-10-24T12_35_55_0 - INFO - hypotheses reranking had no effect
2017-10-24 12:36:19,402 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 12:36:19,407 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')])
- tis.score: 1.0
?              ^
+ tis.score: 1.2
?              ^
-- END TIS changes --
2017-10-24 12:36:19,408 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 12:36:19,414 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.passive_mode: True
?                   ^^^
+ tis.passive_mode: False
?                   ^^^^
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {}
-- END TIS changes --
2017-10-24 12:36:19,414 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 12:36:19,416 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 12:36:19,418 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:36:19,418 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 12:36:19,419 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 12:36:19,424 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.bel: {say_step(" Step one: Chop onions and garlic.")}
+ tis.private.tmp.usr.bel: {}
- tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
?                                                      ^ ^^^^^^^^^^^^ --------------
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                                                      ^ ^
- tis.private.tmp.usr.plan: Stack([findout(?X.done(X))])
?                                             ^ ^^
+ tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
?                                             ^ ^^
- tis.private.tmp.usr.qud: stackset([?X.done(X)])
?                                       ^ ^^
+ tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                       ^ ^^
-- END TIS changes --
2017-10-24 12:36:19,424 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 12:36:19,424 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 12:36:19,424 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 12:36:19,424 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 12:36:19,424 - session_2017-10-24T12_35_55_0 - INFO - BEGIN integrate_moves
2017-10-24 12:36:19,424 - session_2017-10-24T12_35_55_0 - INFO - init_shift: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])
2017-10-24 12:36:19,424 - session_2017-10-24T12_35_55_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 12:36:19,424 - session_2017-10-24T12_35_55_0 - INFO - init_shift: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])
2017-10-24 12:36:19,425 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:integrate
2017-10-24 12:36:19,429 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: integrateUsrAsk
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
- tis.private.nim: OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
+ tis.shared.goals: stackset([resolve(?X.say_step(X)), resolve_user(?X.goal(X)), perform(top)])
?                             +++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
- tis.shared.qud: stackset([?X.goal(X)])
+ tis.shared.qud: stackset([?X.say_step(X), ?X.goal(X)])
?                              ++++++++++++++++
-- END TIS changes --
2017-10-24 12:36:19,429 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 12:36:19,429 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:36:19,432 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: downdateISSUES2
-- BEGIN TIS changes --
- tis.shared.goals: stackset([resolve(?X.say_step(X)), resolve_user(?X.goal(X)), perform(top)])
?                                                      --------------------------
+ tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
-- END TIS changes --
2017-10-24 12:36:19,432 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 12:36:19,432 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:36:19,436 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: findIssuePlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
?                                                                   - ^ ^ ---------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^ ^^
- tis.private.plan: Stack([findout(?X.goal(X))])
+ tis.private.plan: Stack([device_query(?X.say_step(X)), findout(?X.done(X))])
-- END TIS changes --
2017-10-24 12:36:19,436 - session_2017-10-24T12_35_55_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 12:36:19,436 - session_2017-10-24T12_35_55_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 12:36:19,436 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:36:19,437 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_action
2017-10-24 12:36:19,437 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:36:19,437 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:accommodate
2017-10-24 12:36:19,437 - session_2017-10-24T12_35_55_0 - INFO - breaking out of accommodate
2017-10-24 12:36:19,437 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:36:19,437 - session_2017-10-24T12_35_55_0 - INFO - END integrate_moves
2017-10-24 12:36:19,438 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:36:19,440 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: exec_dev_query
-- BEGIN TIS changes --
- tis.private.bel: {}
+ tis.private.bel: {say_step(" Step one: Chop onions and garlic.")}
- tis.private.plan: Stack([device_query(?X.say_step(X)), findout(?X.done(X))])
?                          ------------------------------
+ tis.private.plan: Stack([findout(?X.done(X))])
-- END TIS changes --
2017-10-24 12:36:19,440 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:36:19,441 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:36:19,441 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:36:19,441 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 12:36:19,443 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.say_step(X), ?X.goal(X)])
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 12:36:19,443 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:36:19,444 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:36:19,444 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:36:19,444 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:36:19,444 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 12:36:19,444 - session_2017-10-24T12_35_55_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, tell me what to do, sender=DmeModule, reason=None)
2017-10-24 12:36:19,445 - session_2017-10-24T12_35_55_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None)
2017-10-24 12:36:19,445 - session_2017-10-24T12_35_55_0 - INFO - running ISU module: select
2017-10-24 12:36:19,446 - session_2017-10-24T12_35_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f921380d050>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9211929890>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508841379.39
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.bel: {say_step(" Step one: Chop onions and garlic.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.tmp.sys.bel: {}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:36:19,446 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 12:36:19,451 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
?                                                                ^ ^^ ^^^^^^^^^  ^  ^
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                ^^^^^^^^^^^ ^ ^^^^  ^^^^ +++++++++++ ^^^
- tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.bel: {say_step(" Step one: Chop onions and garlic.")}
- tis.private.tmp.sys.goals: stackset([perform(top)])
+ tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                                      +++++++++++++++++++++++++
- tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                             ^ ^^
+ tis.private.tmp.sys.plan: Stack([findout(?X.done(X))])
?                                             ^ ^^
-- END TIS changes --
2017-10-24 12:36:19,452 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_action
2017-10-24 12:36:19,455 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), findout(?X.done(X))])
?                                                                                                  +++++++++++++++++++++
-- END TIS changes --
2017-10-24 12:36:19,455 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_icm
2017-10-24 12:36:19,458 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan)), findout(?X.done(X))])
?                                 --------------------------------
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.done(X))])
-- END TIS changes --
2017-10-24 12:36:19,458 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_move
2017-10-24 12:36:19,459 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_icm
2017-10-24 12:36:19,461 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
?                                                             +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:loadplan)), findout(?X.done(X))])
?                                   ---------------------------------
+ tis.private.agenda: OpenQueue([#, findout(?X.done(X))])
-- END TIS changes --
2017-10-24 12:36:19,462 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_move
2017-10-24 12:36:19,465 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan)])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))])
?                                                                                    +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.done(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 12:36:19,465 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_icm
2017-10-24 12:36:19,465 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_move
2017-10-24 12:36:19,465 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 12:36:19,467 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:36:19,467 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 12:36:19,468 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:set_timeout
2017-10-24 12:36:19,470 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:36:19,471 - session_2017-10-24T12_35_55_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')])
2017-10-24 12:36:19,471 - session_2017-10-24T12_35_55_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {say_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None))
2017-10-24 12:36:19,471 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, tell me what to do, sender=DmeModule, reason=None))
2017-10-24 12:36:19,471 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, tell me what to do, sender=DmeModule, reason=None)
2017-10-24 12:36:19,471 - session_2017-10-24T12_35_55_0 - DEBUG - Backend communication: Backend is sending event {"content": "tell me what to do", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 12:36:19,472 - session_2017-10-24T12_35_55_0 - DEBUG - Sent.
2017-10-24 12:36:19,472 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None))
2017-10-24 12:36:19,472 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None)
2017-10-24 12:36:19,472 - session_2017-10-24T12_35_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": " Step one: Chop onions and garlic."}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 12:36:19,473 - session_2017-10-24T12_35_55_0 - DEBUG - Sent.
2017-10-24 12:36:19,474 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {say_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None)))
2017-10-24 12:36:19,474 - session_2017-10-24T12_35_55_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {say_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}, sender=TurnManager, reason=None))
2017-10-24 12:36:19,474 - session_2017-10-24T12_35_55_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 12:36:19,475 - session_2017-10-24T12_35_55_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {say_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:36:19,475 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), bel: {say_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([findout(?X.done(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:36:19,477 - session_2017-10-24T12_35_55_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X))]), bel: {say_step(" Step one: Chop onions and garlic.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:36:19,477 - session_2017-10-24T12_35_55_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={say_step(" Step one: Chop onions and garlic.")})
2017-10-24 12:36:19,477 - session_2017-10-24T12_35_55_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 12:36:19,477 - session_2017-10-24T12_35_55_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={say_step(" Step one: Chop onions and garlic.")})
2017-10-24 12:36:19,477 - session_2017-10-24T12_35_55_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 12:36:19,477 - session_2017-10-24T12_35_55_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.done(X)), ddd_name=u'recipehelp'), facts={say_step(" Step one: Chop onions and garlic.")})
2017-10-24 12:36:19,477 - session_2017-10-24T12_35_55_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.done(X)), ddd_name=u'recipehelp')
2017-10-24 12:36:19,477 - session_2017-10-24T12_35_55_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:acc*pos)
2017-10-24 12:36:19,478 - session_2017-10-24T12_35_55_0 - DEBUG - GenerateModule: Move ICMMove(icm:acc*pos) generated as ''
2017-10-24 12:36:19,478 - session_2017-10-24T12_35_55_0 - DEBUG - GenerateModule: Generating utterance part from move ICMMove(icm:loadplan)
2017-10-24 12:36:19,478 - session_2017-10-24T12_35_55_0 - DEBUG - GenerateModule: Move ICMMove(icm:loadplan) generated as ''
2017-10-24 12:36:19,478 - session_2017-10-24T12_35_55_0 - DEBUG - GenerateModule: Generating utterance part from move Move(ask(?X.done(X)), ddd_name=u'recipehelp')
2017-10-24 12:36:19,479 - session_2017-10-24T12_35_55_0 - DEBUG - GenerateModule: Move Move(ask(?X.done(X)), ddd_name=u'recipehelp') generated as u'Are you done?'
2017-10-24 12:36:19,479 - session_2017-10-24T12_35_55_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Are you done?], sender=GenerateModule, reason=None)
2017-10-24 12:36:19,480 - session_2017-10-24T12_35_55_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X))]), bel: {say_step(" Step one: Chop onions and garlic.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:36:19,482 - session_2017-10-24T12_35_55_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.done(X))]), bel: {say_step(" Step one: Chop onions and garlic.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:36:19,482 - session_2017-10-24T12_35_55_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 12:36:19,482 - session_2017-10-24T12_35_55_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)), ddd_name=u'recipehelp')])
2017-10-24 12:36:19,483 - session_2017-10-24T12_35_55_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:acc*pos), facts={say_step(" Step one: Chop onions and garlic.")})
2017-10-24 12:36:19,483 - session_2017-10-24T12_35_55_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:acc*pos)
2017-10-24 12:36:19,483 - session_2017-10-24T12_35_55_0 - DEBUG - OutputPlanner._plan_move(move=ICMMove(icm:loadplan), facts={say_step(" Step one: Chop onions and garlic.")})
2017-10-24 12:36:19,483 - session_2017-10-24T12_35_55_0 - DEBUG - OutputPlanner._plan_move finished, result is ICMMove(icm:loadplan)
2017-10-24 12:36:19,483 - session_2017-10-24T12_35_55_0 - DEBUG - OutputPlanner._plan_move(move=Move(ask(?X.done(X)), ddd_name=u'recipehelp'), facts={say_step(" Step one: Chop onions and garlic.")})
2017-10-24 12:36:19,483 - session_2017-10-24T12_35_55_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(ask(?X.done(X)), ddd_name=u'recipehelp')
2017-10-24 12:36:19,484 - session_2017-10-24T12_35_55_0 - DEBUG - GuiBackend generated message []
2017-10-24 12:36:19,484 - session_2017-10-24T12_35_55_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 12:36:19,484 - session_2017-10-24T12_35_55_0 - DEBUG - GuiBackend posted event
2017-10-24 12:36:19,484 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Are you done?], sender=GenerateModule, reason=None))
2017-10-24 12:36:19,484 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [, , Are you done?], sender=GenerateModule, reason=None)
2017-10-24 12:36:19,485 - session_2017-10-24T12_35_55_0 - DEBUG - Backend communication: Backend is sending event {"content": ["", "", "Are you done?"], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 12:36:19,485 - session_2017-10-24T12_35_55_0 - DEBUG - Sent.
2017-10-24 12:36:19,485 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None))
2017-10-24 12:36:19,485 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [], sender=GuiBackend, reason=None)
2017-10-24 12:36:19,485 - session_2017-10-24T12_35_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 12:36:19,486 - session_2017-10-24T12_35_55_0 - DEBUG - Sent.
2017-10-24 12:36:19,486 - session_2017-10-24T12_35_55_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 12:36:19,492 - session_2017-10-24T12_35_55_0 - DEBUG - Backend communication: Backend received event {"content": ["", "", "Are you done?"], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 12:36:19,492 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 12:36:19,492 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [, , Are you done?], sender=TextOutputComponent, reason=None))
2017-10-24 12:36:19,492 - session_2017-10-24T12_35_55_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [, , Are you done?], sender=TextOutputComponent, reason=None)
2017-10-24 12:36:19,492 - session_2017-10-24T12_35_55_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 12:36:19,492 - session_2017-10-24T12_35_55_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [, , Are you done?], sender=TurnManager, reason=None)
2017-10-24 12:36:19,492 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [, , Are you done?], sender=TurnManager, reason=None)
2017-10-24 12:36:19,493 - session_2017-10-24T12_35_55_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [, , Are you done?], sender=TurnManager, reason=None)
2017-10-24 12:36:19,493 - session_2017-10-24T12_35_55_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [, , Are you done?], sender=TurnManager, reason=None))
2017-10-24 12:36:19,495 - session_2017-10-24T12_35_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f921380d050>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9211929890>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508841379.49
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [, , Are you done?], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {say_step(" Step one: Chop onions and garlic.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {say_step(" Step one: Chop onions and garlic.")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: tell me what to do
tis.repeat_questions: False
tis.score: 1.2
tis.shared.com: {}
tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:36:19,495 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:36:19,495 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 12:36:19,495 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 12:36:19,501 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
?            ^^
- tis.shared.pm: {ICMMove(icm:reraise:perform(top), speaker=SYS, score=1.0), Move(ask(?X.goal(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 12:36:19,501 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 12:36:19,501 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 12:36:19,504 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:36:19,504 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 12:36:19,504 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 12:36:19,505 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 12:36:19,505 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 12:36:19,505 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 12:36:19,505 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 12:36:19,505 - session_2017-10-24T12_35_55_0 - INFO - BEGIN integrate_moves
2017-10-24 12:36:19,505 - session_2017-10-24T12_35_55_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 12:36:19,505 - session_2017-10-24T12_35_55_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 12:36:19,505 - session_2017-10-24T12_35_55_0 - INFO - init_shift: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 12:36:19,506 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:integrate
2017-10-24 12:36:19,510 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             ----------------------------------------------
+ tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
-- END TIS changes --
2017-10-24 12:36:19,510 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 12:36:19,510 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:36:19,510 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 12:36:19,510 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:36:19,510 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:integrate
2017-10-24 12:36:19,514 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: integrateOtherICM
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
?                             -----------------------------------------------
+ tis.private.nim: OpenQueue([Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
?                                                                       +++++++++++++++++++++++++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 12:36:19,514 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 12:36:19,514 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:36:19,515 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 12:36:19,515 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:36:19,515 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:integrate
2017-10-24 12:36:19,518 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: integrateSysAsk
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
+ tis.shared.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
?                             ++++++++++++++++++++++++++
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0)}
+ tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
- tis.shared.qud: stackset([])
+ tis.shared.qud: stackset([?X.done(X)])
?                           ++++++++++
-- END TIS changes --
2017-10-24 12:36:19,518 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 12:36:19,518 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:36:19,518 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 12:36:19,519 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:36:19,519 - session_2017-10-24T12_35_55_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 12:36:19,519 - session_2017-10-24T12_35_55_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 12:36:19,519 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:36:19,519 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_action
2017-10-24 12:36:19,519 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:36:19,519 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:accommodate
2017-10-24 12:36:19,519 - session_2017-10-24T12_35_55_0 - INFO - breaking out of accommodate
2017-10-24 12:36:19,519 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:36:19,519 - session_2017-10-24T12_35_55_0 - INFO - END integrate_moves
2017-10-24 12:36:19,519 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:36:19,520 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:36:19,520 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 12:36:19,520 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:36:19,520 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:36:19,521 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:36:19,521 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:36:19,521 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 12:36:19,523 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: disableTimeout
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:36:19,523 - session_2017-10-24T12_35_55_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None)
2017-10-24 12:36:19,523 - session_2017-10-24T12_35_55_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [, , Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 12:36:19,523 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None))
2017-10-24 12:36:19,524 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None)
2017-10-24 12:36:19,524 - session_2017-10-24T12_35_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "say_step", "grammar_entry": null, "value": " Step one: Chop onions and garlic."}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 12:36:19,524 - session_2017-10-24T12_35_55_0 - DEBUG - Sent.
2017-10-24 12:36:19,524 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [, , Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None))
2017-10-24 12:36:19,525 - session_2017-10-24T12_35_55_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [, , Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 12:36:19,525 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [, , Are you done?], latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, None), sender=DmeModule, reason=None)
2017-10-24 12:36:19,525 - session_2017-10-24T12_35_55_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 12:36:24,170 - session_2017-10-24T12_35_55_0 - DEBUG - Backend communication: Backend received event {"content": [{"score": 1.0, "utterance": "yes"}], "_sender": "TextInputComponent", "_reason": null, "event_type": "RECOGNITION"}
2017-10-24 12:36:24,171 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 12:36:24,171 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(RECOGNITION, [{score: 1.0, utterance: yes}], sender=TextInputComponent, reason=None))
2017-10-24 12:36:24,171 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(RECOGNITION, [{score: 1.0, utterance: yes}], sender=TextInputComponent, reason=None)
2017-10-24 12:36:24,171 - session_2017-10-24T12_35_55_0 - DEBUG - InterpretModule handles Event(RECOGNITION, [{score: 1.0, utterance: yes}], sender=TextInputComponent, reason=None)
2017-10-24 12:36:24,171 - session_2017-10-24T12_35_55_0 - ANALYTICS - RECOGNITION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": [{"score": 1.0, "utterance": "yes"}], "type": "RECOGNITION", "_sender": "TextInputComponent", "_reason": null}}
2017-10-24 12:36:24,171 - session_2017-10-24T12_35_55_0 - DEBUG - Starting 'ExactInterpreter'
2017-10-24 12:36:24,173 - session_2017-10-24T12_35_55_0 - DEBUG - ExactInterpreter: Got exact non-literal interpretations
2017-10-24 12:36:24,174 - session_2017-10-24T12_35_55_0 - DEBUG - ExactInterpreter: Returning exact interpretations {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])} for DDD 'recipehelp'
2017-10-24 12:36:24,174 - session_2017-10-24T12_35_55_0 - DEBUG - Result from 'ExactInterpreter': {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}
2017-10-24 12:36:24,174 - session_2017-10-24T12_35_55_0 - DEBUG - InterpretModule posts Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=InterpretModule, reason=None)
2017-10-24 12:36:24,174 - session_2017-10-24T12_35_55_0 - ANALYTICS - INTERPRETATION - {"d4e3f6ea14687580669e21d8f8eb326f.Event": {"content": {"08f37221b2c0bde3539cf6828f6374be.Set": {"content": [{"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Yes": {}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "yes", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.StringSort": {"_dynamic": false, "_name": "string"}}, "value": "yes"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "yes", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}, {"08f37221b2c0bde3539cf6828f6374be.OpenQueue": {"_unshifted_content": null, "front_content": [{"ecb0845d22fdab10cf20c1c1dc2b6a0d.AnswerMove": {"_type": "answer", "_ddd_name": "recipehelp", "_content": {"295b14b878e50960c506a133efa5cd94.Individual": {"_ontology_name": "RecipehelpOntology", "sort": {"29469b87e7e7f813b80409572cadd835.CustomSort": {"_ontology_name": "RecipehelpOntology", "_dynamic": false, "_name": "Boolean"}}, "value": "True"}}, "_weighted_score": 1.0, "_score": 1.0, "_utterance": "yes", "_modality": "speech", "_background": null, "_speaker": "USR"}}], "back_content": []}}], "contentclass": null}}, "type": "INTERPRETATION", "_sender": "InterpretModule", "_reason": null}}
2017-10-24 12:36:24,174 - session_2017-10-24T12_35_55_0 - DEBUG - DmeModule handles Event(RECOGNITION, [{score: 1.0, utterance: yes}], sender=TextInputComponent, reason=None)
2017-10-24 12:36:24,175 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=InterpretModule, reason=None))
2017-10-24 12:36:24,175 - session_2017-10-24T12_35_55_0 - DEBUG - TurnManager handles Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=InterpretModule, reason=None)
2017-10-24 12:36:24,175 - session_2017-10-24T12_35_55_0 - DEBUG - TurnManager posts Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 12:36:24,175 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(STOP_LISTENING, None, sender=TurnManager, reason=None)
2017-10-24 12:36:24,175 - session_2017-10-24T12_35_55_0 - DEBUG - Backend communication: Backend is sending event {"content": null, "_sender": "TurnManager", "_reason": null, "event_type": "STOP_LISTENING"}
2017-10-24 12:36:24,176 - session_2017-10-24T12_35_55_0 - DEBUG - Sent.
2017-10-24 12:36:24,176 - session_2017-10-24T12_35_55_0 - INFO - TurnManager.enter_state(IDLE, Not interrupting) (previous state was IDLE)
2017-10-24 12:36:24,176 - session_2017-10-24T12_35_55_0 - DEBUG - TurnManager posts Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
2017-10-24 12:36:24,176 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
2017-10-24 12:36:24,177 - session_2017-10-24T12_35_55_0 - DEBUG - DmeModule handles Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
2017-10-24 12:36:24,177 - session_2017-10-24T12_35_55_0 - INFO - running ISU module: update (Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None))
2017-10-24 12:36:24,179 - session_2017-10-24T12_35_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f921380d050>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9211929890>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508841384.18
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos), ICMMove(icm:loadplan), Move(ask(?X.done(X)))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {say_step(" Step one: Chop onions and garlic.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.done(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {say_step(" Step one: Chop onions and garlic.")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.usr.qud: stackset([?X.goal(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: yes
tis.repeat_questions: False
tis.score: 1.0
tis.shared.com: {}
tis.shared.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
tis.shared.previous_goal: None
tis.shared.qud: stackset([?X.done(X)])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:36:24,179 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:36:24,184 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: exclude_qud_irrelevant_literal_answer_moves
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                          ^^^^^                                                                                                              ^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ --------------------------------------------------------------------------
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                          ^^^^                                                                                                              ^^^^^^^^^^^^^^ ^^^
- tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer("yes"), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}
?                                                                                                                                                                                         ^^^^^                                                                                                              -------------------------------------------------------------------------------------------------------------------------------------------
+ tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}
?                                                                                                                                                                                         ^^^^
-- END TIS changes --
2017-10-24 12:36:24,184 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:36:24,189 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: uprankQUDRelevant
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                                                                                                  ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                                                                                                  ^
- tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])}
?                                                                                                                                                                                                                                                                 ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'yes'), #])}
?                                                                                                                                                                                                                                                                 ^
-- END TIS changes --
2017-10-24 12:36:24,195 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: uprankQUDResolving
-- BEGIN TIS changes --
- tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                                                                                                  ^
+ tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
?                                                                                                                                                                                                                                                                                  ^^
- tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'yes'), #])}
?                                                                                                                                                                                                                                                                 ^
+ tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])}
?                                                                                                                                                                                                                                                                 ^^
-- END TIS changes --
2017-10-24 12:36:24,196 - session_2017-10-24T12_35_55_0 - INFO - hypotheses reranked: OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #]) upranked to position 1 from position 1, replacing OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #])
2017-10-24 12:36:24,196 - session_2017-10-24T12_35_55_0 - INFO - Could not log rerank
2017-10-24 12:36:24,197 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 12:36:24,200 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#, Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')])
- tis.score: 1.0
?              ^
+ tis.score: 1.44
?              ^^
-- END TIS changes --
2017-10-24 12:36:24,201 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 12:36:24,207 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(ask(?X.say_step(X)), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.2, modality=speech, utterance=u'tell me what to do')}
-- END TIS changes --
2017-10-24 12:36:24,207 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 12:36:24,207 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 12:36:24,210 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:36:24,210 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 12:36:24,210 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 12:36:24,216 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: backupSharedUsr
-- BEGIN TIS changes --
- tis.private.tmp.usr.bel: {}
+ tis.private.tmp.usr.bel: {say_step(" Step one: Chop onions and garlic.")}
- tis.private.tmp.usr.goals: stackset([resolve_user(?X.goal(X)), perform(top)])
?                                                      ^  ^
+ tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
?                                                      ^ ++++++++++++++++++++ ^^^^^^
- tis.private.tmp.usr.plan: Stack([findout(?X.goal(X))])
?                                             ^ ^^
+ tis.private.tmp.usr.plan: Stack([findout(?X.done(X))])
?                                             ^ ^^
- tis.private.tmp.usr.qud: stackset([?X.goal(X)])
?                                       ^ ^^
+ tis.private.tmp.usr.qud: stackset([?X.done(X)])
?                                       ^ ^^
-- END TIS changes --
2017-10-24 12:36:24,216 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 12:36:24,216 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 12:36:24,216 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 12:36:24,216 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 12:36:24,216 - session_2017-10-24T12_35_55_0 - INFO - BEGIN integrate_moves
2017-10-24 12:36:24,216 - session_2017-10-24T12_35_55_0 - INFO - init_shift: OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])
2017-10-24 12:36:24,217 - session_2017-10-24T12_35_55_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 12:36:24,217 - session_2017-10-24T12_35_55_0 - INFO - init_shift: OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])
2017-10-24 12:36:24,217 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:integrate
2017-10-24 12:36:24,220 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: integrateUsrAnswer
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.nim: OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])
+ tis.private.nim: OpenQueue([#])
- tis.recent_commitments: {}
+ tis.recent_commitments: {done(True)}
?                          ++++++++++
- tis.shared.com: {}
+ tis.shared.com: {done(True)}
?                  ++++++++++
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')}
-- END TIS changes --
2017-10-24 12:36:24,220 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 12:36:24,220 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:36:24,223 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {done(True)}
+ tis.shared.com: {done(True), resolved(?X.done(X))}
- tis.shared.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
?                             --------------------------
+ tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
-- END TIS changes --
2017-10-24 12:36:24,224 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 12:36:24,226 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: removeFindout
-- BEGIN TIS changes --
- tis.private.plan: Stack([findout(?X.done(X))])
+ tis.private.plan: Stack([])
-- END TIS changes --
2017-10-24 12:36:24,226 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:36:24,227 - session_2017-10-24T12_35_55_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 12:36:24,227 - session_2017-10-24T12_35_55_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 12:36:24,227 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:36:24,227 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_action
2017-10-24 12:36:24,227 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:36:24,227 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:accommodate
2017-10-24 12:36:24,227 - session_2017-10-24T12_35_55_0 - INFO - breaking out of accommodate
2017-10-24 12:36:24,227 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:36:24,227 - session_2017-10-24T12_35_55_0 - INFO - END integrate_moves
2017-10-24 12:36:24,227 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:36:24,228 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:36:24,228 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 12:36:24,230 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: downdateQUD
-- BEGIN TIS changes --
- tis.shared.qud: stackset([?X.done(X)])
?                           ----------
+ tis.shared.qud: stackset([])
-- END TIS changes --
2017-10-24 12:36:24,231 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:36:24,231 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:36:24,231 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:36:24,231 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:36:24,231 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 12:36:24,231 - session_2017-10-24T12_35_55_0 - DEBUG - DmeModule posts Event(COMMITMENTS_UPDATE, done(True), sender=DmeModule, reason=None)
2017-10-24 12:36:24,232 - session_2017-10-24T12_35_55_0 - DEBUG - DmeModule posts Event(SELECTED_RECOGNITION, yes, sender=DmeModule, reason=None)
2017-10-24 12:36:24,232 - session_2017-10-24T12_35_55_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: done, grammar_entry: None, value: True}, {predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None)
2017-10-24 12:36:24,232 - session_2017-10-24T12_35_55_0 - INFO - running ISU module: select
2017-10-24 12:36:24,233 - session_2017-10-24T12_35_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f921380d050>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9211929890>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508841384.18
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')])
tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.bel: {say_step(" Step one: Chop onions and garlic.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
tis.private.tmp.sys.bel: {say_step(" Step one: Chop onions and garlic.")}
tis.private.tmp.sys.com: {}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([findout(?X.done(X))])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {say_step(" Step one: Chop onions and garlic.")}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X))])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: yes
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {done(True), resolved(?X.done(X))}
tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 5.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:36:24,233 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 12:36:24,237 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), emit_icm(ICMMove(icm:loadplan))])
?                                                                         ---------------------------------
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
- tis.private.tmp.sys.com: {}
+ tis.private.tmp.sys.com: {done(True), resolved(?X.done(X))}
- tis.private.tmp.sys.plan: Stack([findout(?X.done(X))])
?                                  -------------------
+ tis.private.tmp.sys.plan: Stack([])
-- END TIS changes --
2017-10-24 12:36:24,237 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_action
2017-10-24 12:36:24,240 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: selectRespond
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
?                                                                 +++++++++++++++++++++++++
-- END TIS changes --
2017-10-24 12:36:24,240 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_icm
2017-10-24 12:36:24,243 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
?                                       ++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos)), respond(?X.say_step(X))])
?                                   --------------------------------
+ tis.private.agenda: OpenQueue([#, respond(?X.say_step(X))])
-- END TIS changes --
2017-10-24 12:36:24,243 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_move
2017-10-24 12:36:24,246 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: selectAnswer
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:acc*pos)])
+ tis.next_utterance.moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))])
- tis.private.agenda: OpenQueue([#, respond(?X.say_step(X))])
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 12:36:24,246 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_icm
2017-10-24 12:36:24,246 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_move
2017-10-24 12:36:24,246 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 12:36:24,248 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:36:24,248 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 12:36:24,249 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:set_timeout
2017-10-24 12:36:24,251 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: setShortTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 5.0
?                       ^
+ tis.timeout.duration: 1.0
?                       ^
-- END TIS changes --
2017-10-24 12:36:24,252 - session_2017-10-24T12_35_55_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')])
2017-10-24 12:36:24,252 - session_2017-10-24T12_35_55_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), bel: {say_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {done(True), resolved(?X.done(X))}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None))
2017-10-24 12:36:24,252 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(COMMITMENTS_UPDATE, done(True), sender=DmeModule, reason=None))
2017-10-24 12:36:24,252 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(COMMITMENTS_UPDATE, done(True), sender=DmeModule, reason=None)
2017-10-24 12:36:24,252 - session_2017-10-24T12_35_55_0 - DEBUG - DeviceManager handles Event(COMMITMENTS_UPDATE, done(True), sender=DmeModule, reason=None)
2017-10-24 12:36:24,252 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(SELECTED_RECOGNITION, yes, sender=DmeModule, reason=None))
2017-10-24 12:36:24,253 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(SELECTED_RECOGNITION, yes, sender=DmeModule, reason=None)
2017-10-24 12:36:24,253 - session_2017-10-24T12_35_55_0 - DEBUG - Backend communication: Backend is sending event {"content": "yes", "_sender": "DmeModule", "_reason": null, "event_type": "SELECTED_RECOGNITION"}
2017-10-24 12:36:24,253 - session_2017-10-24T12_35_55_0 - DEBUG - Sent.
2017-10-24 12:36:24,253 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: done, grammar_entry: None, value: True}, {predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None))
2017-10-24 12:36:24,254 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: done, grammar_entry: None, value: True}, {predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None)
2017-10-24 12:36:24,254 - session_2017-10-24T12_35_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "done", "grammar_entry": null, "value": "True"}, {"predicate": "say_step", "grammar_entry": null, "value": " Step one: Chop onions and garlic."}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 12:36:24,255 - session_2017-10-24T12_35_55_0 - DEBUG - Sent.
2017-10-24 12:36:24,255 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), bel: {say_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {done(True), resolved(?X.done(X))}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None)))
2017-10-24 12:36:24,256 - session_2017-10-24T12_35_55_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), bel: {say_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {done(True), resolved(?X.done(X))}, cogload_strategy: None}, sender=DmeModule, reason=Event(INTERPRETATION, {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])}, sender=TurnManager, reason=None))
2017-10-24 12:36:24,256 - session_2017-10-24T12_35_55_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 12:36:24,256 - session_2017-10-24T12_35_55_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), bel: {say_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {done(True), resolved(?X.done(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:36:24,256 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: resolve(?X.say_step(X)), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), bel: {say_step(" Step one: Chop onions and garlic.")}, facts_being_grounded: [], current_plan: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {done(True), resolved(?X.done(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:36:24,258 - session_2017-10-24T12_35_55_0 - DEBUG - GenerateModule handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {say_step(" Step one: Chop onions and garlic.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), com: {done(True), resolved(?X.done(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:36:24,258 - session_2017-10-24T12_35_55_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp'), facts={done(True), resolved(?X.done(X)), say_step(" Step one: Chop onions and garlic.")})
2017-10-24 12:36:24,258 - session_2017-10-24T12_35_55_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')
2017-10-24 12:36:24,258 - session_2017-10-24T12_35_55_0 - DEBUG - GenerateModule: Generating utterance part from move Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')
2017-10-24 12:36:24,259 - session_2017-10-24T12_35_55_0 - DEBUG - GenerateModule: Move Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp') generated as u'Ok  Step one: Chop onions and garlic..'
2017-10-24 12:36:24,259 - session_2017-10-24T12_35_55_0 - DEBUG - GenerateModule posts Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok  Step one: Chop onions and garlic..], sender=GenerateModule, reason=None)
2017-10-24 12:36:24,260 - session_2017-10-24T12_35_55_0 - DEBUG - IndependentGuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {say_step(" Step one: Chop onions and garlic.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), com: {done(True), resolved(?X.done(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:36:24,261 - session_2017-10-24T12_35_55_0 - DEBUG - IndependentGuiBackend posts Event(GUI.POPUP, {options: [], title: Ok  Step one: Chop onions and garlic..}, sender=IndependentGuiBackend, reason=None)
2017-10-24 12:36:24,262 - session_2017-10-24T12_35_55_0 - DEBUG - GuiBackend handles Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([]), bel: {say_step(" Step one: Chop onions and garlic.")}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: resolve(?X.say_step(X)), moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')]), com: {done(True), resolved(?X.done(X))}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 12:36:24,263 - session_2017-10-24T12_35_55_0 - DEBUG - GuiBackend triggered by SYSTEM_MOVES_SELECTED
2017-10-24 12:36:24,263 - session_2017-10-24T12_35_55_0 - DEBUG - GuiBackend triggered by moves OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')])
2017-10-24 12:36:24,263 - session_2017-10-24T12_35_55_0 - DEBUG - OutputPlanner._plan_move(move=Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp'), facts={done(True), resolved(?X.done(X)), say_step(" Step one: Chop onions and garlic.")})
2017-10-24 12:36:24,263 - session_2017-10-24T12_35_55_0 - DEBUG - OutputPlanner._plan_move finished, result is Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp')
2017-10-24 12:36:24,264 - session_2017-10-24T12_35_55_0 - DEBUG - GuiBackend generated message [<tdm.tdm_gui_protocol.Popup instance at 0x7f92110f9758>]
2017-10-24 12:36:24,264 - session_2017-10-24T12_35_55_0 - DEBUG - GuiBackend posts Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f92110f9758>], sender=GuiBackend, reason=None)
2017-10-24 12:36:24,264 - session_2017-10-24T12_35_55_0 - DEBUG - GuiBackend posted event
2017-10-24 12:36:24,264 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok  Step one: Chop onions and garlic..], sender=GenerateModule, reason=None))
2017-10-24 12:36:24,264 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_UTTERANCE_TO_SPEAK, [Ok  Step one: Chop onions and garlic..], sender=GenerateModule, reason=None)
2017-10-24 12:36:24,265 - session_2017-10-24T12_35_55_0 - DEBUG - Backend communication: Backend is sending event {"content": ["Ok  Step one: Chop onions and garlic.."], "_sender": "GenerateModule", "_reason": null, "event_type": "SYSTEM_UTTERANCE_TO_SPEAK"}
2017-10-24 12:36:24,265 - session_2017-10-24T12_35_55_0 - DEBUG - Sent.
2017-10-24 12:36:24,265 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(GUI.POPUP, {options: [], title: Ok  Step one: Chop onions and garlic..}, sender=IndependentGuiBackend, reason=None))
2017-10-24 12:36:24,266 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(GUI.POPUP, {options: [], title: Ok  Step one: Chop onions and garlic..}, sender=IndependentGuiBackend, reason=None)
2017-10-24 12:36:24,266 - session_2017-10-24T12_35_55_0 - DEBUG - Backend communication: Backend is sending event {"content": {"options": [], "title": "Ok  Step one: Chop onions and garlic.."}, "_sender": "IndependentGuiBackend", "_reason": null, "event_type": "GUI.POPUP"}
2017-10-24 12:36:24,266 - session_2017-10-24T12_35_55_0 - DEBUG - Sent.
2017-10-24 12:36:24,266 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f92110f9758>], sender=GuiBackend, reason=None))
2017-10-24 12:36:24,267 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(MESSAGE_TO_GUI, [<tdm.tdm_gui_protocol.Popup instance at 0x7f92110f9758>], sender=GuiBackend, reason=None)
2017-10-24 12:36:24,267 - session_2017-10-24T12_35_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"29687f5934314b7ff2716cd9f6c1a5c9.Popup": {"elements": [], "title": "Ok  Step one: Chop onions and garlic.."}}], "_sender": "GuiBackend", "_reason": null, "event_type": "MESSAGE_TO_GUI"}
2017-10-24 12:36:24,267 - session_2017-10-24T12_35_55_0 - DEBUG - Sent.
2017-10-24 12:36:24,268 - session_2017-10-24T12_35_55_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 12:36:24,277 - session_2017-10-24T12_35_55_0 - DEBUG - Backend communication: Backend received event {"content": ["Ok  Step one: Chop onions and garlic.."], "_sender": "TextOutputComponent", "_reason": null, "event_type": "SYSTEM_UTTERANCE_REALIZED"}
2017-10-24 12:36:24,277 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 12:36:24,278 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_UTTERANCE_REALIZED, [Ok  Step one: Chop onions and garlic..], sender=TextOutputComponent, reason=None))
2017-10-24 12:36:24,278 - session_2017-10-24T12_35_55_0 - DEBUG - TurnManager handles Event(SYSTEM_UTTERANCE_REALIZED, [Ok  Step one: Chop onions and garlic..], sender=TextOutputComponent, reason=None)
2017-10-24 12:36:24,278 - session_2017-10-24T12_35_55_0 - INFO - TurnManager.enter_state(IDLE, SYS done speaking) (previous state was SYSTEM_TURN)
2017-10-24 12:36:24,278 - session_2017-10-24T12_35_55_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES, [Ok  Step one: Chop onions and garlic..], sender=TurnManager, reason=None)
2017-10-24 12:36:24,278 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES, [Ok  Step one: Chop onions and garlic..], sender=TurnManager, reason=None)
2017-10-24 12:36:24,278 - session_2017-10-24T12_35_55_0 - DEBUG - DmeModule handles Event(SYSTEM_MOVES, [Ok  Step one: Chop onions and garlic..], sender=TurnManager, reason=None)
2017-10-24 12:36:24,279 - session_2017-10-24T12_35_55_0 - INFO - running ISU module: update (Event(SYSTEM_MOVES, [Ok  Step one: Chop onions and garlic..], sender=TurnManager, reason=None))
2017-10-24 12:36:24,280 - session_2017-10-24T12_35_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f921380d050>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9211929890>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508841384.28
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(SYSTEM_MOVES, [Ok  Step one: Chop onions and garlic..], sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {OpenQueue([Move(answer(yes), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.0, modality=speech, utterance=u'yes'), #]), OpenQueue([Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes'), #])}
tis.latest_speaker: SYS
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {say_step(" Step one: Chop onions and garlic.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {say_step(" Step one: Chop onions and garlic.")}
tis.private.tmp.sys.com: {done(True), resolved(?X.done(X))}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {say_step(" Step one: Chop onions and garlic.")}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X))])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: yes
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {done(True), resolved(?X.done(X))}
tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')}
tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: False
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:36:24,280 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:36:24,280 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 12:36:24,280 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 12:36:24,286 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([#])
+ tis.private.nim: OpenQueue([Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
- tis.shared.lu.speaker: USR
?                        - ^
+ tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')}
?            ^^
- tis.shared.pm: {ICMMove(icm:acc*pos, speaker=SYS, score=1.0), ICMMove(icm:loadplan, speaker=SYS, score=1.0), Move(ask(?X.done(X)), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 12:36:24,286 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 12:36:24,286 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 12:36:24,289 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:36:24,289 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 12:36:24,289 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 12:36:24,289 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 12:36:24,289 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 12:36:24,289 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 12:36:24,289 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 12:36:24,289 - session_2017-10-24T12_35_55_0 - INFO - BEGIN integrate_moves
2017-10-24 12:36:24,289 - session_2017-10-24T12_35_55_0 - INFO - init_shift: OpenQueue([Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 12:36:24,289 - session_2017-10-24T12_35_55_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 12:36:24,290 - session_2017-10-24T12_35_55_0 - INFO - init_shift: OpenQueue([Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
2017-10-24 12:36:24,290 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:integrate
2017-10-24 12:36:24,293 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: integrateSysAnswer
-- BEGIN TIS changes --
- tis.private.nim: OpenQueue([Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech), #])
+ tis.private.nim: OpenQueue([#])
- tis.shared.com: {done(True), resolved(?X.done(X))}
+ tis.shared.com: {done(True), resolved(?X.done(X)), say_step(" Step one: Chop onions and garlic.")}
- tis.shared.lu.turn_cont: {}
+ tis.shared.lu.turn_cont: {Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
-- END TIS changes --
2017-10-24 12:36:24,293 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:integrateSysAnswer
2017-10-24 12:36:24,293 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:36:24,297 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: downdateISSUES
-- BEGIN TIS changes --
- tis.shared.com: {done(True), resolved(?X.done(X)), say_step(" Step one: Chop onions and garlic.")}
+ tis.shared.com: {done(True), resolved(?X.done(X)), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}
?                                                                                                  ++++++++++++++++++++++++++
- tis.shared.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                             -------------------------
+ tis.shared.goals: stackset([perform(top)])
-- END TIS changes --
2017-10-24 12:36:24,297 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:removeFindout
2017-10-24 12:36:24,297 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:36:24,297 - session_2017-10-24T12_35_55_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 12:36:24,297 - session_2017-10-24T12_35_55_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 12:36:24,297 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:36:24,297 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_action
2017-10-24 12:36:24,297 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:36:24,297 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:accommodate
2017-10-24 12:36:24,297 - session_2017-10-24T12_35_55_0 - INFO - breaking out of accommodate
2017-10-24 12:36:24,298 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:36:24,298 - session_2017-10-24T12_35_55_0 - INFO - END integrate_moves
2017-10-24 12:36:24,298 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:36:24,298 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:36:24,298 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 12:36:24,298 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:36:24,298 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:36:24,299 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:36:24,299 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:36:24,299 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 12:36:24,301 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: enableTimeout
-- BEGIN TIS changes --
- tis.timeout.enabled: False
?                      ^^^^
+ tis.timeout.enabled: True
?                      ^^^
-- END TIS changes --
2017-10-24 12:36:24,301 - session_2017-10-24T12_35_55_0 - DEBUG - DmeModule posts Event(FACTS, [{predicate: done, grammar_entry: None, value: True}, {predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None)
2017-10-24 12:36:24,302 - session_2017-10-24T12_35_55_0 - DEBUG - DmeModule posts Event(END_SYSTEM_TURN, ({utterance: [Ok  Step one: Chop onions and garlic..], latest_moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 12:36:24,302 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(FACTS, [{predicate: done, grammar_entry: None, value: True}, {predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None))
2017-10-24 12:36:24,302 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [{predicate: done, grammar_entry: None, value: True}, {predicate: say_step, grammar_entry: None, value:  Step one: Chop onions and garlic.}], sender=DmeModule, reason=None)
2017-10-24 12:36:24,302 - session_2017-10-24T12_35_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [{"predicate": "done", "grammar_entry": null, "value": "True"}, {"predicate": "say_step", "grammar_entry": null, "value": " Step one: Chop onions and garlic."}], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 12:36:24,302 - session_2017-10-24T12_35_55_0 - DEBUG - Sent.
2017-10-24 12:36:24,303 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(END_SYSTEM_TURN, ({utterance: [Ok  Step one: Chop onions and garlic..], latest_moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None))
2017-10-24 12:36:24,304 - session_2017-10-24T12_35_55_0 - DEBUG - TurnManager handles Event(END_SYSTEM_TURN, ({utterance: [Ok  Step one: Chop onions and garlic..], latest_moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 12:36:24,304 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(END_SYSTEM_TURN, ({utterance: [Ok  Step one: Chop onions and garlic..], latest_moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])}, 1.0), sender=DmeModule, reason=None)
2017-10-24 12:36:24,304 - session_2017-10-24T12_35_55_0 - INFO - starting TIMEOUT timer: <tdm.maharani.scheduler.DelayedCall instance at 0x7f9211938878>:1.0
2017-10-24 12:36:24,305 - session_2017-10-24T12_35_55_0 - DEBUG - Backend.handle_event_from_external_queue()
2017-10-24 12:36:25,305 - session_2017-10-24T12_35_55_0 - DEBUG - Timeout fired
2017-10-24 12:36:25,305 - session_2017-10-24T12_35_55_0 - DEBUG - TurnManager posts Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 12:36:25,305 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 12:36:25,305 - session_2017-10-24T12_35_55_0 - DEBUG - DmeModule handles Event(TIMEOUT, None, sender=TurnManager, reason=None)
2017-10-24 12:36:25,305 - session_2017-10-24T12_35_55_0 - INFO - running ISU module: update (Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 12:36:25,306 - session_2017-10-24T12_35_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f921380d050>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9211929890>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508841385.31
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")))])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#])
tis.private.bel: {say_step(" Step one: Chop onions and garlic.")}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {say_step(" Step one: Chop onions and garlic.")}
tis.private.tmp.sys.com: {done(True), resolved(?X.done(X))}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {say_step(" Step one: Chop onions and garlic.")}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X))])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: yes
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {done(True), resolved(?X.done(X)), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: SYS
tis.shared.lu.turn_cont: {Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.pm: {Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:36:25,306 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:filterReadings
2017-10-24 12:36:25,306 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:selectHypothesis
2017-10-24 12:36:25,309 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: selectHypothesis
-- BEGIN TIS changes --
- tis.latest_moves: OpenQueue([#, Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)])
+ tis.latest_moves: OpenQueue([#])
-- END TIS changes --
2017-10-24 12:36:25,309 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:getLatestMoves
2017-10-24 12:36:25,313 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: getLatestMoves
-- BEGIN TIS changes --
- tis.shared.lu.speaker: SYS
?                         ^^
+ tis.shared.lu.speaker: USR
?                        + ^
+ tis.shared.lu.turn_cont: {}
- tis.shared.lu.turn_cont: {Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^^^^^^^^^^^
+ tis.shared.pm: {Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
?            ^^
- tis.shared.pm: {Move(answer(True), ddd_name=u'recipehelp', speaker=USR, score=1.0, weighted_score=1.44, modality=speech, utterance=u'yes')}
-- END TIS changes --
2017-10-24 12:36:25,313 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:switch_ddd
2017-10-24 12:36:25,313 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:clearDeviceOutput
2017-10-24 12:36:25,316 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: clearDeviceOutput
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:36:25,317 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:integrateDeviceAction
2017-10-24 12:36:25,317 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:backupSharedUsr
2017-10-24 12:36:25,317 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:noFollowupToActionConf
2017-10-24 12:36:25,317 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:irrelevantFollowup
2017-10-24 12:36:25,317 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:noFollowupToUndQ
2017-10-24 12:36:25,318 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:downdateClarification
2017-10-24 12:36:25,318 - session_2017-10-24T12_35_55_0 - INFO - BEGIN integrate_moves
2017-10-24 12:36:25,318 - session_2017-10-24T12_35_55_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 12:36:25,318 - session_2017-10-24T12_35_55_0 - INFO - BEGIN try_move_integratation_without_accommodation
2017-10-24 12:36:25,318 - session_2017-10-24T12_35_55_0 - INFO - init_shift: OpenQueue([#])
2017-10-24 12:36:25,318 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:integrate
2017-10-24 12:36:25,318 - session_2017-10-24T12_35_55_0 - INFO - breaking out: nim fully shifted: OpenQueue([#])
2017-10-24 12:36:25,318 - session_2017-10-24T12_35_55_0 - INFO - END try_move_integratation_without_accommodation
2017-10-24 12:36:25,318 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:36:25,318 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_action
2017-10-24 12:36:25,318 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:36:25,319 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:accommodate
2017-10-24 12:36:25,319 - session_2017-10-24T12_35_55_0 - INFO - breaking out of accommodate
2017-10-24 12:36:25,319 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_reject
2017-10-24 12:36:25,319 - session_2017-10-24T12_35_55_0 - INFO - END integrate_moves
2017-10-24 12:36:25,319 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:36:25,322 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: recoverPerformPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
- tis.private.plan: Stack([])
+ tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 12:36:25,322 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:36:25,322 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:36:25,325 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: exec_forget_all
-- BEGIN TIS changes --
- tis.private.bel: {say_step(" Step one: Chop onions and garlic.")}
+ tis.private.bel: {}
- tis.private.plan: Stack([forget_all, findout(?X.goal(X))])
?                           ------------
+ tis.private.plan: Stack([findout(?X.goal(X))])
- tis.shared.com: {done(True), resolved(?X.done(X)), say_step(" Step one: Chop onions and garlic."), resolved(?X.say_step(X))}
+ tis.shared.com: {}
-- END TIS changes --
2017-10-24 12:36:25,325 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:36:25,325 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:36:25,325 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:36:25,326 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:downdate_qud
2017-10-24 12:36:25,326 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:downdate_goals
2017-10-24 12:36:25,326 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:exec_plan
2017-10-24 12:36:25,326 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:load_plan
2017-10-24 12:36:25,326 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:removeYesNo
2017-10-24 12:36:25,326 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:enable_timeout
2017-10-24 12:36:25,327 - session_2017-10-24T12_35_55_0 - DEBUG - DmeModule posts Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 12:36:25,327 - session_2017-10-24T12_35_55_0 - INFO - running ISU module: select
2017-10-24 12:36:25,328 - session_2017-10-24T12_35_55_0 - DEBUG - <-<-<-<-<-<-<-IS->->->->->->>
TIS:
tis._ddd_manager: <tdm.ddd_manager.DddManager object at 0x7f921380d050>
tis._logged_tis_format: diff
tis._semantic_logic: <tdm.lib.semantic_logic.SemanticLogic object at 0x7f9211929890>
tis.active_ddd: Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})
tis.cogload_level: LOW
tis.cogload_management: False
tis.cogload_strategy: None
tis.conf_prediction_threshold.acknowledge: 0.8
tis.conf_prediction_threshold.check: 0.6
tis.conf_prediction_threshold.normal.acknowledge: 0.9
tis.conf_prediction_threshold.normal.check: 0.6
tis.conf_prediction_threshold.normal.trust: 1.01
tis.conf_prediction_threshold.trust: 1.0
tis.confidence_profiles.normal.acknowledge: 0.15
tis.confidence_profiles.normal.check: 0.1
tis.confidence_profiles.normal.trust: 0.3
tis.confidence_profiles.relaxed.acknowledge: 0.35
tis.confidence_profiles.relaxed.check: 0.4
tis.confidence_profiles.relaxed.trust: 0.4
tis.confidence_profiles.strict.acknowledge: 0.7
tis.confidence_profiles.strict.check: 0.4
tis.confidence_profiles.strict.trust: 0.8
tis.current_time: 1508841385.31
tis.ddds: [Ddd(u'recipehelp', u'RecipehelpOntology', u'RecipehelpDomain', {'eng': GfGrammar(u'recipehelp', 'eng')})]
tis.device_manager: Device Manager: ['RecipehelpDevice']
tis.device_outputs: Stack([])
tis.high_cogload_onset_time: None
tis.input_event: Event(TIMEOUT, None, sender=TurnManager, reason=None)
tis.language_code: eng
tis.latest_moves: OpenQueue([#])
tis.latest_moves_amb: {}
tis.latest_speaker: USR
tis.logged_tis_format: diff
tis.next_utterance.alts: []
tis.next_utterance.context: {}
tis.next_utterance.default_value: None
tis.next_utterance.moves: OpenQueue([#])
tis.next_utterance.plan_item: None
tis.passive_mode: False
tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
tis.private.bel: {}
tis.private.issues_being_accommodated: {}
tis.private.nim: OpenQueue([#])
tis.private.plan: Stack([findout(?X.goal(X))])
tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
tis.private.tmp.sys.bel: {say_step(" Step one: Chop onions and garlic.")}
tis.private.tmp.sys.com: {done(True), resolved(?X.done(X))}
tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.sys.plan: Stack([])
tis.private.tmp.sys.qud: stackset([])
tis.private.tmp.usr.agenda: OpenQueue([#])
tis.private.tmp.usr.bel: {say_step(" Step one: Chop onions and garlic.")}
tis.private.tmp.usr.com: {}
tis.private.tmp.usr.goals: stackset([resolve_user(?X.done(X)), resolve(?X.say_step(X)), perform(top)])
tis.private.tmp.usr.plan: Stack([findout(?X.done(X))])
tis.private.tmp.usr.qud: stackset([?X.done(X)])
tis.program_state: RUN
tis.recent_commitments: {}
tis.recognized_utterance: yes
tis.repeat_questions: False
tis.score: 1.44
tis.shared.com: {}
tis.shared.goals: stackset([perform(top)])
tis.shared.lu.moves: {}
tis.shared.lu.speaker: USR
tis.shared.lu.turn_cont: {}
tis.shared.pm: {Move(answer(say_step(" Step one: Chop onions and garlic.")), ddd_name=u'recipehelp', speaker=SYS, score=1.0, weighted_score=1.0, modality=speech)}
tis.shared.previous_goal: None
tis.shared.qud: stackset([])
tis.sys_turns: 0
tis.timeout.duration: 1.0
tis.timeout.enabled: True
<-<-<-<-<-<-<-END->->->->->->>

2017-10-24 12:36:25,328 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:backupSharedSys
2017-10-24 12:36:25,333 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: backupSharedSys
-- BEGIN TIS changes --
- tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:acc*pos))])
?                                                                 ^^^  ^
+ tis.private.tmp.sys.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
?                                                                +++ ^^^^ +++ ^^^^^^^
- tis.private.tmp.sys.bel: {say_step(" Step one: Chop onions and garlic.")}
- tis.private.tmp.sys.com: {done(True), resolved(?X.done(X))}
+ tis.private.tmp.sys.bel: {}
+ tis.private.tmp.sys.com: {}
- tis.private.tmp.sys.goals: stackset([resolve(?X.say_step(X)), perform(top)])
?                                      -------------------------
+ tis.private.tmp.sys.goals: stackset([perform(top)])
- tis.private.tmp.sys.plan: Stack([])
+ tis.private.tmp.sys.plan: Stack([findout(?X.goal(X))])
?                                  +++++++++++++++++++
-- END TIS changes --
2017-10-24 12:36:25,333 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_action
2017-10-24 12:36:25,335 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: selectFromPlan
-- BEGIN TIS changes --
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top)))])
+ tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
?                                                                              +++++++++++++++++++++
-- END TIS changes --
2017-10-24 12:36:25,335 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_icm
2017-10-24 12:36:25,338 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: selectIcmOther
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
- tis.private.agenda: OpenQueue([#, emit_icm(ICMMove(icm:reraise:perform(top))), findout(?X.goal(X))])
+ tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
-- END TIS changes --
2017-10-24 12:36:25,338 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_move
2017-10-24 12:36:25,341 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: selectAsk
-- BEGIN TIS changes --
- tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top))])
+ tis.next_utterance.moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))])
?                                                                          +++++++++++++++++++++++
- tis.private.agenda: OpenQueue([#, findout(?X.goal(X))])
?                                 ---------------------
+ tis.private.agenda: OpenQueue([#])
-- END TIS changes --
2017-10-24 12:36:25,341 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_icm
2017-10-24 12:36:25,341 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:select_move
2017-10-24 12:36:25,341 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:clearContext
2017-10-24 12:36:25,343 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: clearContext
-- BEGIN TIS changes --
-- END TIS changes --
2017-10-24 12:36:25,343 - session_2017-10-24T12_35_55_0 - DEBUG - Testing preconds for rule:setGUIContext
2017-10-24 12:36:25,343 - session_2017-10-24T12_35_55_0 - DEBUG - rulegroup:set_timeout
2017-10-24 12:36:25,345 - session_2017-10-24T12_35_55_0 - DEBUG - Applied rule: setLongTimeout
-- BEGIN TIS changes --
- tis.timeout.duration: 1.0
?                       ^
+ tis.timeout.duration: 5.0
?                       ^
-- END TIS changes --
2017-10-24 12:36:25,346 - session_2017-10-24T12_35_55_0 - INFO - DmeModule posts SYSTEM_MOVES_SELECTED with moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')])
2017-10-24 12:36:25,346 - session_2017-10-24T12_35_55_0 - DEBUG - DmeModule posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 13:09:22,344 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_external_event(...)
2017-10-24 13:09:22,344 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(STOP, None, sender=Backend, reason=None))
2017-10-24 13:09:22,344 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(STOP, None, sender=Backend, reason=None)
2017-10-24 13:09:22,344 - session_2017-10-24T12_35_55_0 - DEBUG - InterpretModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 13:09:22,345 - session_2017-10-24T12_35_55_0 - DEBUG - InterpretModule posts Event(STOPPED, None, sender=InterpretModule, reason=None)
2017-10-24 13:09:22,345 - session_2017-10-24T12_35_55_0 - DEBUG - DmeModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 13:09:22,345 - session_2017-10-24T12_35_55_0 - DEBUG - DmeModule posts Event(STOPPED, None, sender=DmeModule, reason=None)
2017-10-24 13:09:22,346 - session_2017-10-24T12_35_55_0 - DEBUG - DeviceManager handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 13:09:22,346 - session_2017-10-24T12_35_55_0 - DEBUG - DeviceManager posts Event(STOPPED, None, sender=DeviceManager, reason=None)
2017-10-24 13:09:22,346 - session_2017-10-24T12_35_55_0 - DEBUG - GenerateModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 13:09:22,346 - session_2017-10-24T12_35_55_0 - DEBUG - GenerateModule posts Event(STOPPED, None, sender=GenerateModule, reason=None)
2017-10-24 13:09:22,346 - session_2017-10-24T12_35_55_0 - DEBUG - IndependentGuiBackend handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 13:09:22,347 - session_2017-10-24T12_35_55_0 - DEBUG - IndependentGuiBackend posts Event(STOPPED, None, sender=IndependentGuiBackend, reason=None)
2017-10-24 13:09:22,347 - session_2017-10-24T12_35_55_0 - DEBUG - GuiBackend handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 13:09:22,347 - session_2017-10-24T12_35_55_0 - DEBUG - GuiBackend posts Event(STOPPED, None, sender=GuiBackend, reason=None)
2017-10-24 13:09:22,347 - session_2017-10-24T12_35_55_0 - DEBUG - CogloadModule handles Event(STOP, None, sender=Backend, reason=None)
2017-10-24 13:09:22,347 - session_2017-10-24T12_35_55_0 - DEBUG - CogloadModule posts Event(STOPPED, None, sender=CogloadModule, reason=None)
2017-10-24 13:09:22,348 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(FACTS, [], sender=DmeModule, reason=None))
2017-10-24 13:09:22,348 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(FACTS, [], sender=DmeModule, reason=None)
2017-10-24 13:09:22,348 - session_2017-10-24T12_35_55_0 - DEBUG - Backend communication: Backend is sending event {"content": [], "_sender": "DmeModule", "_reason": null, "event_type": "FACTS"}
2017-10-24 13:09:22,349 - session_2017-10-24T12_35_55_0 - DEBUG - Sent.
2017-10-24 13:09:22,350 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None)))
2017-10-24 13:09:22,350 - session_2017-10-24T12_35_55_0 - DEBUG - TurnManager handles Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=DmeModule, reason=Event(TIMEOUT, None, sender=TurnManager, reason=None))
2017-10-24 13:09:22,350 - session_2017-10-24T12_35_55_0 - INFO - TurnManager.enter_state(SYSTEM_TURN, echoing System moves selected) (previous state was IDLE)
2017-10-24 13:09:22,350 - session_2017-10-24T12_35_55_0 - DEBUG - TurnManager posts Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 13:09:22,350 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(SYSTEM_MOVES_SELECTED, {cogload_level: LOW, current_goal: perform(top), device_outputs: Stack([]), top_perform_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), bel: {}, facts_being_grounded: [], current_plan: Stack([findout(?X.goal(X))]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 13:09:22,352 - session_2017-10-24T12_35_55_0 - DEBUG - GenerateModule ignores Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 13:09:22,352 - session_2017-10-24T12_35_55_0 - DEBUG - IndependentGuiBackend ignores Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 13:09:22,354 - session_2017-10-24T12_35_55_0 - DEBUG - GuiBackend ignores Event(SYSTEM_MOVES_SELECTED, {current_plan: Stack([findout(?X.goal(X))]), bel: {}, cogload_level: LOW, facts_being_grounded: [], top_perform_goal: perform(top), device_outputs: Stack([]), next_utterance: NextUtterance(moves=OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)))]), context={}, alts=[], plan_item=None, default_value=None), previous_goal: None, current_goal: perform(top), moves: OpenQueue([#, ICMMove(icm:reraise:perform(top)), Move(ask(?X.goal(X)), ddd_name=u'recipehelp')]), com: {}, cogload_strategy: None}, sender=TurnManager, reason=None)
2017-10-24 13:09:22,354 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=InterpretModule, reason=None))
2017-10-24 13:09:22,354 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=InterpretModule, reason=None)
2017-10-24 13:09:22,354 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=DmeModule, reason=None))
2017-10-24 13:09:22,354 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=DmeModule, reason=None)
2017-10-24 13:09:22,354 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=DeviceManager, reason=None))
2017-10-24 13:09:22,354 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=DeviceManager, reason=None)
2017-10-24 13:09:22,354 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=GenerateModule, reason=None))
2017-10-24 13:09:22,354 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=GenerateModule, reason=None)
2017-10-24 13:09:22,355 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=IndependentGuiBackend, reason=None))
2017-10-24 13:09:22,355 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=IndependentGuiBackend, reason=None)
2017-10-24 13:09:22,355 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=GuiBackend, reason=None))
2017-10-24 13:09:22,355 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=GuiBackend, reason=None)
2017-10-24 13:09:22,355 - session_2017-10-24T12_35_55_0 - DEBUG - Backend._handle_event(Event(STOPPED, None, sender=CogloadModule, reason=None))
2017-10-24 13:09:22,355 - session_2017-10-24T12_35_55_0 - DEBUG - EventDispatcher: dispatching event Event(STOPPED, None, sender=CogloadModule, reason=None)
